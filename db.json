{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/assets/sci-fi-prop-project/schemeit-project.png","path":"assets/sci-fi-prop-project/schemeit-project.png","modified":0,"renderable":0},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"source/assets/sci-fi-prop-project/real-board-vertical.jpg","path":"assets/sci-fi-prop-project/real-board-vertical.jpg","modified":0,"renderable":0},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.png","path":"css/images/banner.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1467657693072},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1467657693072},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1467657693072},{"_id":"themes/landscape/README.md","hash":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1467657693072},{"_id":"themes/landscape/_config.yml","hash":"85f48cbf396f443fc9070a7fbe305177f6d3df97","modified":1635274486101},{"_id":"themes/landscape/package.json","hash":"85358dc34311c6662e841584e206a4679183943f","modified":1467657693072},{"_id":"source/_drafts/2016-11-15-First-Time-Setting-Up-Caddy-in-a-Container.md","hash":"3c4ff1c666b33bdeecafde2c72a65c071814e579","modified":1479606163401},{"_id":"source/_drafts/2017-08-29-managing-state-in-a-react-app.md","hash":"997c3cd6027a3494be96adc496a4348a1f3ac51b","modified":1504024315364},{"_id":"source/_drafts/2017-10-26-what-isnt-redux.md","hash":"5d8395250415d5ddcfbb83464053ca397e20e0fd","modified":1513010026191},{"_id":"source/Samuel-Scheiderich/index.md","hash":"1c9667a4d4745bc762cfa5d3599e48a7d725c7de","modified":1508352281872},{"_id":"source/_posts/2016-07-04-Getting-started-with-React.md","hash":"306fcdede8a4cb673bdbae77f580f94d4aab7a4a","modified":1535653843414},{"_id":"source/_posts/2016-09-19-blog.md","hash":"ab8f414d2da072ccf281d4421bb961c1911142b6","modified":1474338567279},{"_id":"source/_posts/2017-04-11-getting-started-with-webpack.md","hash":"b0ff76e973358d01fa36e4b55a26f954ea18b616","modified":1535653676765},{"_id":"source/_posts/2017-04-14-getting-started-with-webpack-part-2.md","hash":"b6370dbe8ab33db471ba5c1e50ba17213b6bd368","modified":1535653826450},{"_id":"source/_posts/2017-04-21-getting-started-with-react.md","hash":"55c348730e14a4f1f78efd253119ff7363695fbc","modified":1492814442265},{"_id":"source/_posts/2017-07-14-how-to-add-css-loader-to-webpack.md","hash":"e21a365d7f43676a66090a8445969cc5be80a4a0","modified":1563992232084},{"_id":"source/_posts/2017-08-29-state-terminology.md","hash":"4ca7b898e74ae94662f58c64526dcaeaed67fb31","modified":1504016361569},{"_id":"source/_posts/2017-12-11-sci-fi-prop-project.md","hash":"326f9ff8c49f68911a04fb3705faa9cf0da114a5","modified":1608499279548},{"_id":"source/_posts/2018-03-04-using-the-web-audio-api.md","hash":"d28be454b951fdcf51dcaf72137c791f327838c5","modified":1520192931450},{"_id":"source/_posts/2018-09-04-how-to-setup-webpack-v4.md","hash":"d35976f28dec0b1ce61576d92edadf9dd00170bd","modified":1536091030271},{"_id":"source/_posts/2019-07-08-does-using-react-negatively-affect-seo.md","hash":"573d5574a593ea6208a9b0bcd52da561c277f810","modified":1563992235404},{"_id":"source/_posts/2019-07-23-effects-are-not-lifecycles.md","hash":"4fc2f98869c1045d24b0ca7d537289aa0a3a7e53","modified":1565225476579},{"_id":"source/_posts/2020-03-30-react-is-a-leaky-abstration.md","hash":"a877177a1ead285969e616200797c6bace5a9fcf","modified":1585590419608},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1467657693080},{"_id":"themes/landscape/languages/en.yml","hash":"c7d966d954490f97e4d35b9e4de42c1eb70bed3d","modified":1538935548651},{"_id":"themes/landscape/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1467657693080},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1467657693080},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1467657693080},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1467657693080},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1467657693080},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1467657693080},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1467657693080},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1467657693080},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1467657693080},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1467657693080},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1467657693080},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1467657693080},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1467657693080},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1467657693084},{"_id":"source/assets/sci-fi-prop-project/schemeit-project.png","hash":"f772fcd3182cd077c0648c1660ef321a107ce21c","modified":1513005205964},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"82a30f81c0e8ba4a8af17acd6cc99e93834e4d5e","modified":1467657693096},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1467657693096},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"bd42c933cbce8048a2bceccdaf4a7ed69ae7d45b","modified":1621261038811},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1467657693100},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1467657693100},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"66c21211c434a085606eabe70f572a0bfb597f1d","modified":1608496145622},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"beb36739c42ec94e57b47d799b551aec8f1e5c68","modified":1474338511378},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1467657693100},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1467657693100},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1467657693096},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1467657693100},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"5aaea35a6b428e2e49c1f7672545e8fc66341030","modified":1538935394822},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1467657693100},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1467657693100},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1467657693100},{"_id":"themes/landscape/source/css/_variables.styl","hash":"2ca420b848f1764acd9bdcd2adf801d848fc5692","modified":1474338958826},{"_id":"themes/landscape/source/css/style.styl","hash":"d15fd41f79e95d96ad3543e971f25050ab626a2f","modified":1474715557350},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1467657693096},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1467657693100},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1467657693100},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1467657693100},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1467657693100},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1467657693100},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1467657693100},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1467657693100},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1467657693100},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1467657693096},{"_id":"source/assets/sci-fi-prop-project/real-board-vertical.jpg","hash":"1e6f1d8ee470665becce5589e8df7abf6227041b","modified":1513005768542},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1467657693112},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1467657693112},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1467657693112},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1467657693112},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1467657693112},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1467657693112},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1467657693112},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"1ff242aa6fbcfb49b63d15bd3746023dd283c1c3","modified":1492199250862},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1467657693112},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1467657693112},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"55edf2401d4fd9891c24f868e6e6b3dcac015093","modified":1492199882895},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1467657693112},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1467657693112},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1467657693112},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1467657693112},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1467657693112},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1467657693112},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1467657693112},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1467657693112},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1467657693112},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1467657693112},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1467657693112},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1467657693112},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1467657693112},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1467657693112},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1467657693112},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1467657693112},{"_id":"themes/landscape/source/css/images/banner.png","hash":"0f5c7be974ae0699a7c04f9f0b53f56c38bb55fd","modified":1520189863789},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1467657693112},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1467657693116},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1467657693116},{"_id":"public/atom.xml","hash":"d3ccea61309fb3bcc5a7bf24213e5a21ea2231e3","modified":1621260777869},{"_id":"public/Samuel-Scheiderich/index.html","hash":"0f939a4cfa860f98148031b94813481a5c049764","modified":1635275041550},{"_id":"public/2019/07/23/effects-are-not-lifecycles/index.html","hash":"51f8f4d1d8cd1612d5640ea02cd4f1c443de9502","modified":1635274554510},{"_id":"public/2019/07/08/does-using-react-negatively-affect-seo/index.html","hash":"fd77b3217fd0d78d03e789c8a3d8e4068014589e","modified":1635274554510},{"_id":"public/2018/09/04/how-to-setup-webpack-v4/index.html","hash":"cdcab02576c4def785dc9d17a636362efec6c0d6","modified":1635274554510},{"_id":"public/2018/03/04/using-the-web-audio-api/index.html","hash":"58209cdfaa5b677fe318b814c69c596e73afe30f","modified":1635274554510},{"_id":"public/2017/12/11/sci-fi-prop-project/index.html","hash":"3ef09b11dc30181f0213721107847c1a7dc642ee","modified":1635274554510},{"_id":"public/2017/08/29/state-terminology/index.html","hash":"60b6ab2ea731e6abce15469a96d451e9600a10a7","modified":1635274554510},{"_id":"public/2017/07/14/how-to-add-css-loader-to-webpack/index.html","hash":"1e60a9f21f7209d54ffaf0634587ab29705fd83e","modified":1635274554510},{"_id":"public/2017/04/21/getting-started-with-react/index.html","hash":"034fd0c9b8e5420cd2afd8f1b60f04ddafe5dc6f","modified":1635274554510},{"_id":"public/2017/04/14/getting-started-with-webpack-part-2/index.html","hash":"0fd2dd0a34c95e8a3d46b05284d3c8df29e85b36","modified":1635274554510},{"_id":"public/2017/04/08/getting-started-with-webpack/index.html","hash":"ba22f4eaef345a6e9564f009c336fa55355e0454","modified":1635274554510},{"_id":"public/2016/09/19/blog/index.html","hash":"f118264be9c3e023aef4ca6cbefb96fdbd6cf49c","modified":1635274554510},{"_id":"public/2016/07/04/Getting-started-with-React/index.html","hash":"a2fef6ec422bda974a54619b439a4afa18caf4bd","modified":1635274554510},{"_id":"public/archives/index.html","hash":"ccf1d2f97355b23e6ac060695cfb012e1bdffb76","modified":1635274554510},{"_id":"public/archives/page/2/index.html","hash":"2e9904cdb820258e908d84ecf33fa5d1a921724a","modified":1635274554510},{"_id":"public/archives/2016/index.html","hash":"811d1b9f9816efdecb19f8b46fb8226d9532b0fa","modified":1635274554510},{"_id":"public/archives/2016/07/index.html","hash":"3962f9fa4eb84be0c448650abd70034921356561","modified":1635274554510},{"_id":"public/archives/2016/09/index.html","hash":"076719c659318edd1f4d15836cd01236db3d2b40","modified":1635274554510},{"_id":"public/archives/2017/index.html","hash":"434169ffb3e3781c6ce504df92a856b96db1cc43","modified":1635274554510},{"_id":"public/archives/2017/04/index.html","hash":"9bc79201115d7a5d9082fcbbd266e24256d50518","modified":1635274554510},{"_id":"public/archives/2017/07/index.html","hash":"6bc93f0b94d28896ae33cfdd551f8d2ae7af1306","modified":1635274554510},{"_id":"public/archives/2017/08/index.html","hash":"14ee0fee593df0254a326e3733998f7a4232ae83","modified":1635274554510},{"_id":"public/archives/2017/12/index.html","hash":"54c1d26954d6c34f3bb273ea60ad54e556de030d","modified":1635274554510},{"_id":"public/archives/2018/index.html","hash":"c20c6cd8bf4398d05349addfe14caddfdcadd220","modified":1635274554510},{"_id":"public/archives/2018/03/index.html","hash":"257ce7e148ed901f75974123820cb7b58c3c9544","modified":1635274554510},{"_id":"public/archives/2018/09/index.html","hash":"ab4d08ca2b2b62388dd8bce8b709b4122e536bf2","modified":1635274554510},{"_id":"public/archives/2019/index.html","hash":"006c98ed8316a47de09c579e76ccd9fae7601734","modified":1635274554510},{"_id":"public/archives/2019/07/index.html","hash":"61e299e111f6f9a104f3e1d805fd3af621248e25","modified":1635274554510},{"_id":"public/index.html","hash":"a1aa2380000c675f3f0e83c6c05681bd29672394","modified":1635274554510},{"_id":"public/page/2/index.html","hash":"b763870143663655b8e72544702a0b9644481b5f","modified":1635274554510},{"_id":"public/tags/developer-experience/index.html","hash":"8ba20f0798ce58ae4ab02e5f06c08ccc970792ba","modified":1635274554510},{"_id":"public/tags/deployment/index.html","hash":"e3dd7897cfea524e0d3e46ac78f97b9bf5fd1aed","modified":1635274554510},{"_id":"public/tags/node/index.html","hash":"9c8e1e2ee51c6940a4d6ce805ab2eed24ba80a59","modified":1635274554510},{"_id":"public/tags/React/index.html","hash":"7789237c0252556f42fe8b7405149921edc35f10","modified":1635274554510},{"_id":"public/tags/state/index.html","hash":"daa2e206293060a827fa11a286fe8dd3604ff50c","modified":1635274554510},{"_id":"public/tags/patterns/index.html","hash":"af0863bea7db14dd6f97d928a9e1a6c7c8e41092","modified":1635274554510},{"_id":"public/tags/js/index.html","hash":"f5c70c417ac9264b67aae67683b764fa8e730d1a","modified":1635274554510},{"_id":"public/tags/Webpack/index.html","hash":"952c0364f11f774c847094cb9b752e7601b5fd7b","modified":1635274554510},{"_id":"public/tags/hexo/index.html","hash":"b594b07eb976e7328357efff93d5d7f63a74e8e3","modified":1635274554510},{"_id":"public/tags/ghost/index.html","hash":"cf368a514d433f33213055ff560d638f7d1587dc","modified":1635274554510},{"_id":"public/tags/webpack/index.html","hash":"bcfe4ec6f85bea6cffe4ec7bdcc99d4435d6d13a","modified":1635274554510},{"_id":"public/tags/css/index.html","hash":"8b114328127c8babf5228d7b9d152b84e82135bc","modified":1635274554510},{"_id":"public/tags/css-loader/index.html","hash":"54de58e212e37923fc51927bc7b251cf4a2a441f","modified":1635274554510},{"_id":"public/tags/arduino/index.html","hash":"27b98840cd12c941a0cf2477c1a40053e3f7816a","modified":1635274554510},{"_id":"public/tags/cos-play/index.html","hash":"f657611f2c9fbae76231f720d0fd24a02719e39e","modified":1635274554510},{"_id":"public/tags/sound/index.html","hash":"b6f0509dcc30477e4096e02054b3bfa8213cca1d","modified":1635274554510},{"_id":"public/tags/Web-API/index.html","hash":"34e4ebc6f23bf28fab6f0c06ae336123de733683","modified":1635274554510},{"_id":"public/tags/seo/index.html","hash":"dce3247b43fd9fcd592103ffbbdf3871d7942458","modified":1635274554510},{"_id":"public/tags/ssr/index.html","hash":"d85de72552626aeb092d825f340f3142f9ac0bb8","modified":1635274554510},{"_id":"public/tags/hooks/index.html","hash":"b59d730f375d6f016772e5633359ee705c4e7102","modified":1635274554510},{"_id":"public/tags/lifecycles/index.html","hash":"ce5cb4dbc36df539a0ae62c909ff125567188510","modified":1635274554510},{"_id":"public/2020/03/30/react-is-a-leaky-abstration/index.html","hash":"e65c746b739bc2bd8a459fa32f395217b6d95688","modified":1608496376949},{"_id":"public/archives/2020/index.html","hash":"6e3db93eff1a87060287e73cf8737199f911fd47","modified":1608496376949},{"_id":"public/archives/2020/03/index.html","hash":"95a6daa6aad3a28b6d07ff92b01e688ce6709ab0","modified":1608496376949},{"_id":"source/_drafts/2020-03-30-react-is-a-leaky-abstration.md","hash":"a877177a1ead285969e616200797c6bace5a9fcf","modified":1608496516792},{"_id":"source/Samuel-Scheiderich/index.html","hash":"ec1202fb09d32cecd8d7500473cba14f70e7a7f6","modified":1635275030605},{"_id":"source/about-me/index.md","hash":"17067522130b06fe1836501ca5267dba34a4852e","modified":1635274535997},{"_id":"public/about-me/index.html","hash":"0196b27c844206c1ff31d8a889489fbda2ec1859","modified":1635274554510}],"Category":[],"Data":[],"Page":[{"layout":"false","_content":"\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t<meta http-equiv=\"refresh\" content=\"0; URL=/about-me/\" />\n\t<title>Redirecting - About Me</title>\n</head>\n<body>\n\tRedirecting to <a href=\"/about-me/\">About me</a>\n\t<!-- Actual redirect should be handled by web server, this is a backup placeholder -->\n</body>\n</html>\n","source":"Samuel-Scheiderich/index.html","raw":"---\nlayout: false\n---\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t<meta http-equiv=\"refresh\" content=\"0; URL=/about-me/\" />\n\t<title>Redirecting - About Me</title>\n</head>\n<body>\n\tRedirecting to <a href=\"/about-me/\">About me</a>\n\t<!-- Actual redirect should be handled by web server, this is a backup placeholder -->\n</body>\n</html>\n","date":"2021-10-26T19:03:50.605Z","updated":"2021-10-26T19:03:50.605Z","path":"Samuel-Scheiderich/index.html","_id":"ckv8g4rof0000jtu3hbbn2wat","title":"","comments":1,"content":"\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t<meta http-equiv=\"refresh\" content=\"0; URL=/about-me/\" />\n\t<title>Redirecting - About Me</title>\n</head>\n<body>\n\tRedirecting to <a href=\"/about-me/\">About me</a>\n\t<!-- Actual redirect should be handled by web server, this is a backup placeholder -->\n</body>\n</html>\n","site":{"data":{}},"excerpt":"","more":"\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t<meta http-equiv=\"refresh\" content=\"0; URL=/about-me/\" />\n\t<title>Redirecting - About Me</title>\n</head>\n<body>\n\tRedirecting to <a href=\"/about-me/\">About me</a>\n\t<!-- Actual redirect should be handled by web server, this is a backup placeholder -->\n</body>\n</html>\n"},{"title":"Sam Scheiderich (she/her)","date":"2021-10-26T17:22:00.000Z","_content":"### Contact me\n- Email: [sam@samsch.org](mailto:sam@samsch.org)\n- LinkedIn: [Sam Scheiderich](https://www.linkedin.com/in/sam-scheiderich-a9a6b8122/)\n- Discord: [Server Invitation](https://discord.gg/DtfkPhU)\n- Matrix: @samsch.org:matrix.org\n\n## Development\nI build web apps, specializing in user interfaces (UI and UX) and data management. In particular, I know how to \"dumb-down\" an interface so that less tech-savvy users can feel comfortable.\n\n## Tutoring, mentoring\nI offer private tutoring and guidance for learning and working with the tools and languages in web development.\n\n## Skills and Tools\nBeside the common web languages (HTML, CSS, Javascript), these are tools I regularly use:\n- React\n- Babel\n- Webpack\n- Sass (SCSS)\n- ESLint\n- VSCode\n- Node.js\n- Express\n- Lodash\n- Laravel/PHP\n- SQL (PostgreSQL/MySQL)\n- Many others...\n\nYou can check out my open source work on [my Github profile](https://github.com/samsch).\n\nSend me an email, message me on [Discord](https://discord.gg/DtfkPhU) or Matrix (@samsch.org:matrix.org), or you can find me hanging in #reactjs, #javascript, and #Node.js on Libera (IRC). I can tell you about projects I've worked on, technical solutions, or we can just connect and see where it goes.\n","source":"about-me/index.md","raw":"---\ntitle: Sam Scheiderich (she/her)\ndate: 2021-10-26 13:22:00\n---\n### Contact me\n- Email: [sam@samsch.org](mailto:sam@samsch.org)\n- LinkedIn: [Sam Scheiderich](https://www.linkedin.com/in/sam-scheiderich-a9a6b8122/)\n- Discord: [Server Invitation](https://discord.gg/DtfkPhU)\n- Matrix: @samsch.org:matrix.org\n\n## Development\nI build web apps, specializing in user interfaces (UI and UX) and data management. In particular, I know how to \"dumb-down\" an interface so that less tech-savvy users can feel comfortable.\n\n## Tutoring, mentoring\nI offer private tutoring and guidance for learning and working with the tools and languages in web development.\n\n## Skills and Tools\nBeside the common web languages (HTML, CSS, Javascript), these are tools I regularly use:\n- React\n- Babel\n- Webpack\n- Sass (SCSS)\n- ESLint\n- VSCode\n- Node.js\n- Express\n- Lodash\n- Laravel/PHP\n- SQL (PostgreSQL/MySQL)\n- Many others...\n\nYou can check out my open source work on [my Github profile](https://github.com/samsch).\n\nSend me an email, message me on [Discord](https://discord.gg/DtfkPhU) or Matrix (@samsch.org:matrix.org), or you can find me hanging in #reactjs, #javascript, and #Node.js on Libera (IRC). I can tell you about projects I've worked on, technical solutions, or we can just connect and see where it goes.\n","updated":"2021-10-26T18:55:35.997Z","path":"about-me/index.html","_id":"ckv8g4rog0001jtu366g00nbd","comments":1,"layout":"page","content":"<h3 id=\"Contact-me\"><a href=\"#Contact-me\" class=\"headerlink\" title=\"Contact me\"></a>Contact me</h3><ul>\n<li>Email: <a href=\"mailto:sam@samsch.org\">sam@samsch.org</a></li>\n<li>LinkedIn: <a href=\"https://www.linkedin.com/in/sam-scheiderich-a9a6b8122/\">Sam Scheiderich</a></li>\n<li>Discord: <a href=\"https://discord.gg/DtfkPhU\">Server Invitation</a></li>\n<li>Matrix: @samsch.org:matrix.org</li>\n</ul>\n<h2 id=\"Development\"><a href=\"#Development\" class=\"headerlink\" title=\"Development\"></a>Development</h2><p>I build web apps, specializing in user interfaces (UI and UX) and data management. In particular, I know how to “dumb-down” an interface so that less tech-savvy users can feel comfortable.</p>\n<h2 id=\"Tutoring-mentoring\"><a href=\"#Tutoring-mentoring\" class=\"headerlink\" title=\"Tutoring, mentoring\"></a>Tutoring, mentoring</h2><p>I offer private tutoring and guidance for learning and working with the tools and languages in web development.</p>\n<h2 id=\"Skills-and-Tools\"><a href=\"#Skills-and-Tools\" class=\"headerlink\" title=\"Skills and Tools\"></a>Skills and Tools</h2><p>Beside the common web languages (HTML, CSS, Javascript), these are tools I regularly use:</p>\n<ul>\n<li>React</li>\n<li>Babel</li>\n<li>Webpack</li>\n<li>Sass (SCSS)</li>\n<li>ESLint</li>\n<li>VSCode</li>\n<li>Node.js</li>\n<li>Express</li>\n<li>Lodash</li>\n<li>Laravel/PHP</li>\n<li>SQL (PostgreSQL/MySQL)</li>\n<li>Many others…</li>\n</ul>\n<p>You can check out my open source work on <a href=\"https://github.com/samsch\">my Github profile</a>.</p>\n<p>Send me an email, message me on <a href=\"https://discord.gg/DtfkPhU\">Discord</a> or Matrix (@samsch.org:matrix.org), or you can find me hanging in #reactjs, #javascript, and #Node.js on Libera (IRC). I can tell you about projects I’ve worked on, technical solutions, or we can just connect and see where it goes.</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Contact-me\"><a href=\"#Contact-me\" class=\"headerlink\" title=\"Contact me\"></a>Contact me</h3><ul>\n<li>Email: <a href=\"mailto:sam@samsch.org\">sam@samsch.org</a></li>\n<li>LinkedIn: <a href=\"https://www.linkedin.com/in/sam-scheiderich-a9a6b8122/\">Sam Scheiderich</a></li>\n<li>Discord: <a href=\"https://discord.gg/DtfkPhU\">Server Invitation</a></li>\n<li>Matrix: @samsch.org:matrix.org</li>\n</ul>\n<h2 id=\"Development\"><a href=\"#Development\" class=\"headerlink\" title=\"Development\"></a>Development</h2><p>I build web apps, specializing in user interfaces (UI and UX) and data management. In particular, I know how to “dumb-down” an interface so that less tech-savvy users can feel comfortable.</p>\n<h2 id=\"Tutoring-mentoring\"><a href=\"#Tutoring-mentoring\" class=\"headerlink\" title=\"Tutoring, mentoring\"></a>Tutoring, mentoring</h2><p>I offer private tutoring and guidance for learning and working with the tools and languages in web development.</p>\n<h2 id=\"Skills-and-Tools\"><a href=\"#Skills-and-Tools\" class=\"headerlink\" title=\"Skills and Tools\"></a>Skills and Tools</h2><p>Beside the common web languages (HTML, CSS, Javascript), these are tools I regularly use:</p>\n<ul>\n<li>React</li>\n<li>Babel</li>\n<li>Webpack</li>\n<li>Sass (SCSS)</li>\n<li>ESLint</li>\n<li>VSCode</li>\n<li>Node.js</li>\n<li>Express</li>\n<li>Lodash</li>\n<li>Laravel/PHP</li>\n<li>SQL (PostgreSQL/MySQL)</li>\n<li>Many others…</li>\n</ul>\n<p>You can check out my open source work on <a href=\"https://github.com/samsch\">my Github profile</a>.</p>\n<p>Send me an email, message me on <a href=\"https://discord.gg/DtfkPhU\">Discord</a> or Matrix (@samsch.org:matrix.org), or you can find me hanging in #reactjs, #javascript, and #Node.js on Libera (IRC). I can tell you about projects I’ve worked on, technical solutions, or we can just connect and see where it goes.</p>\n"}],"Post":[{"title":"First Time Setting Up Caddy in a Container","date":"2016-11-15T22:33:10.000Z","_content":"Primary Goal: Setup Caddy as a static web server with a self-signed cert, in a LXD container.\nSecondary Goal: Setup proxy server to Node.js for dynamic content.\nTertiary Goal: Setup FastCGI proxy for PHP.\n\n# Article OS assumption\n\nMy base OS is Xubuntu 16.10. While technically LXD is not a Ubuntu-specific technology, I'm not as familiar with other distros, and won't be providing instructions for other platforms.\n\n# Do basic startup of container image\n\nFor starters, if you don't have LXD/LXC (pronounced Lex-D and Lex-C), check out the [installation instructions.](https://linuxcontainers.org/lxd/getting-started-cli/) Don't run `newgrp lxd` with sudo. I'm not sure why I thought that made sense, but no, that just adds the group to root, and drops you to the root terminal.\n\nCreate a new container with `lxc launch ubuntu:16.10 my-ubuntu`. I'm going to hazard a guess that everything will work on 16.04 as well, which is an LTS release.\n\nIf you aren't familiar with LXD, we just created a running container based on a generic Ubuntu image. You can stop the container with `lxc stop my-ubuntu`. (The container is named 'my-ubuntu'. You can name yours whatever you want.) To start your container back up, use `lxc start my-ubuntu`. To get a bash console in the container, run `lxc exec my-ubuntu bash`.\n\n# Downloading Caddy\n\nThe preferred method of downloading Caddy seems to be as a configurable [tar.gz download](https://caddyserver.com/download). So I'll do that and push it into the container manually. I chose the default HTTP core, 'expires' and 'git' directives/middleware, and no DNS providers (since this is a local-only instance). Make sure you know where you download the server to.\n\nPush the file into the container with `lxc file push -p Downloads/caddy_linux_amd64_custom.tar.gz my-ubuntu/home/ubuntu/`. The `-p` flag tells `lxc file push` to create any folders which don't already exist. If you get an error that the flag does exist, you are probably using lxd on 16.04 or older, which don't have the flag. You can manually create any folder needed.\n\nEnter bash into the container (`lxc exec my-ubuntu bash`), cd to where you pushed the file (`cd /home/ubuntu`), and run `tar -xzf caddy_linux_amd64_custom.tar.gz` to unpack.\n\nMove caddy to `/usr/local/bin` with `mv caddy /usr/local/bin/`, and set ownership and permissions `chown root:root /usr/local/bin/caddy`, `chmod 755 /usr/local/bin/caddy`.\n\n# Setup daemon\n\nWe want Caddy to start up with the container. Fortunately, Caddy comes with some unofficial, unsupported scripts for setting this up. Recent Ubuntu uses systemd, so that's the instruction set we'll follow. The scripts are contained in the `init/` folder unpacked from the tar.gz, but you can also read the [readme on github](https://github.com/mholt/caddy/tree/master/dist/init/linux-systemd).\n\nWe can skip the groupadd and useradd commands, as the Ubuntu container already has the appropriate 'www-data' user setup.\n\nWe need some folders setup:\n```bash\n# - From the readme\nsudo mkdir /etc/caddy\nsudo chown -R root:www-data /etc/caddy\nsudo mkdir /etc/ssl/caddy\nsudo chown -R www-data:root /etc/ssl/caddy\nsudo chmod 0770 /etc/ssl/caddy\n```\n\nThe next step requires that we have a Caddyfile setup.\n","source":"_drafts/2016-11-15-First-Time-Setting-Up-Caddy-in-a-Container.md","raw":"---\ntitle: First Time Setting Up Caddy in a Container\ndate: 2016-11-15 17:33:10\ntags:\n- developer experience\n- deployment\n- node\n- Caddy\n- Node.js\n- PHP\n---\nPrimary Goal: Setup Caddy as a static web server with a self-signed cert, in a LXD container.\nSecondary Goal: Setup proxy server to Node.js for dynamic content.\nTertiary Goal: Setup FastCGI proxy for PHP.\n\n# Article OS assumption\n\nMy base OS is Xubuntu 16.10. While technically LXD is not a Ubuntu-specific technology, I'm not as familiar with other distros, and won't be providing instructions for other platforms.\n\n# Do basic startup of container image\n\nFor starters, if you don't have LXD/LXC (pronounced Lex-D and Lex-C), check out the [installation instructions.](https://linuxcontainers.org/lxd/getting-started-cli/) Don't run `newgrp lxd` with sudo. I'm not sure why I thought that made sense, but no, that just adds the group to root, and drops you to the root terminal.\n\nCreate a new container with `lxc launch ubuntu:16.10 my-ubuntu`. I'm going to hazard a guess that everything will work on 16.04 as well, which is an LTS release.\n\nIf you aren't familiar with LXD, we just created a running container based on a generic Ubuntu image. You can stop the container with `lxc stop my-ubuntu`. (The container is named 'my-ubuntu'. You can name yours whatever you want.) To start your container back up, use `lxc start my-ubuntu`. To get a bash console in the container, run `lxc exec my-ubuntu bash`.\n\n# Downloading Caddy\n\nThe preferred method of downloading Caddy seems to be as a configurable [tar.gz download](https://caddyserver.com/download). So I'll do that and push it into the container manually. I chose the default HTTP core, 'expires' and 'git' directives/middleware, and no DNS providers (since this is a local-only instance). Make sure you know where you download the server to.\n\nPush the file into the container with `lxc file push -p Downloads/caddy_linux_amd64_custom.tar.gz my-ubuntu/home/ubuntu/`. The `-p` flag tells `lxc file push` to create any folders which don't already exist. If you get an error that the flag does exist, you are probably using lxd on 16.04 or older, which don't have the flag. You can manually create any folder needed.\n\nEnter bash into the container (`lxc exec my-ubuntu bash`), cd to where you pushed the file (`cd /home/ubuntu`), and run `tar -xzf caddy_linux_amd64_custom.tar.gz` to unpack.\n\nMove caddy to `/usr/local/bin` with `mv caddy /usr/local/bin/`, and set ownership and permissions `chown root:root /usr/local/bin/caddy`, `chmod 755 /usr/local/bin/caddy`.\n\n# Setup daemon\n\nWe want Caddy to start up with the container. Fortunately, Caddy comes with some unofficial, unsupported scripts for setting this up. Recent Ubuntu uses systemd, so that's the instruction set we'll follow. The scripts are contained in the `init/` folder unpacked from the tar.gz, but you can also read the [readme on github](https://github.com/mholt/caddy/tree/master/dist/init/linux-systemd).\n\nWe can skip the groupadd and useradd commands, as the Ubuntu container already has the appropriate 'www-data' user setup.\n\nWe need some folders setup:\n```bash\n# - From the readme\nsudo mkdir /etc/caddy\nsudo chown -R root:www-data /etc/caddy\nsudo mkdir /etc/ssl/caddy\nsudo chown -R www-data:root /etc/ssl/caddy\nsudo chmod 0770 /etc/ssl/caddy\n```\n\nThe next step requires that we have a Caddyfile setup.\n","slug":"First-Time-Setting-Up-Caddy-in-a-Container","published":0,"updated":"2016-11-20T01:42:43.401Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckixl4zvr0000jku3e17mfgre","content":"<p>Primary Goal: Setup Caddy as a static web server with a self-signed cert, in a LXD container.<br>Secondary Goal: Setup proxy server to Node.js for dynamic content.<br>Tertiary Goal: Setup FastCGI proxy for PHP.</p>\n<h1 id=\"Article-OS-assumption\"><a href=\"#Article-OS-assumption\" class=\"headerlink\" title=\"Article OS assumption\"></a>Article OS assumption</h1><p>My base OS is Xubuntu 16.10. While technically LXD is not a Ubuntu-specific technology, I’m not as familiar with other distros, and won’t be providing instructions for other platforms.</p>\n<h1 id=\"Do-basic-startup-of-container-image\"><a href=\"#Do-basic-startup-of-container-image\" class=\"headerlink\" title=\"Do basic startup of container image\"></a>Do basic startup of container image</h1><p>For starters, if you don’t have LXD/LXC (pronounced Lex-D and Lex-C), check out the <a href=\"https://linuxcontainers.org/lxd/getting-started-cli/\" target=\"_blank\" rel=\"external\">installation instructions.</a> Don’t run <code>newgrp lxd</code> with sudo. I’m not sure why I thought that made sense, but no, that just adds the group to root, and drops you to the root terminal.</p>\n<p>Create a new container with <code>lxc launch ubuntu:16.10 my-ubuntu</code>. I’m going to hazard a guess that everything will work on 16.04 as well, which is an LTS release.</p>\n<p>If you aren’t familiar with LXD, we just created a running container based on a generic Ubuntu image. You can stop the container with <code>lxc stop my-ubuntu</code>. (The container is named ‘my-ubuntu’. You can name yours whatever you want.) To start your container back up, use <code>lxc start my-ubuntu</code>. To get a bash console in the container, run <code>lxc exec my-ubuntu bash</code>.</p>\n<h1 id=\"Downloading-Caddy\"><a href=\"#Downloading-Caddy\" class=\"headerlink\" title=\"Downloading Caddy\"></a>Downloading Caddy</h1><p>The preferred method of downloading Caddy seems to be as a configurable <a href=\"https://caddyserver.com/download\" target=\"_blank\" rel=\"external\">tar.gz download</a>. So I’ll do that and push it into the container manually. I chose the default HTTP core, ‘expires’ and ‘git’ directives/middleware, and no DNS providers (since this is a local-only instance). Make sure you know where you download the server to.</p>\n<p>Push the file into the container with <code>lxc file push -p Downloads/caddy_linux_amd64_custom.tar.gz my-ubuntu/home/ubuntu/</code>. The <code>-p</code> flag tells <code>lxc file push</code> to create any folders which don’t already exist. If you get an error that the flag does exist, you are probably using lxd on 16.04 or older, which don’t have the flag. You can manually create any folder needed.</p>\n<p>Enter bash into the container (<code>lxc exec my-ubuntu bash</code>), cd to where you pushed the file (<code>cd /home/ubuntu</code>), and run <code>tar -xzf caddy_linux_amd64_custom.tar.gz</code> to unpack.</p>\n<p>Move caddy to <code>/usr/local/bin</code> with <code>mv caddy /usr/local/bin/</code>, and set ownership and permissions <code>chown root:root /usr/local/bin/caddy</code>, <code>chmod 755 /usr/local/bin/caddy</code>.</p>\n<h1 id=\"Setup-daemon\"><a href=\"#Setup-daemon\" class=\"headerlink\" title=\"Setup daemon\"></a>Setup daemon</h1><p>We want Caddy to start up with the container. Fortunately, Caddy comes with some unofficial, unsupported scripts for setting this up. Recent Ubuntu uses systemd, so that’s the instruction set we’ll follow. The scripts are contained in the <code>init/</code> folder unpacked from the tar.gz, but you can also read the <a href=\"https://github.com/mholt/caddy/tree/master/dist/init/linux-systemd\" target=\"_blank\" rel=\"external\">readme on github</a>.</p>\n<p>We can skip the groupadd and useradd commands, as the Ubuntu container already has the appropriate ‘www-data’ user setup.</p>\n<p>We need some folders setup:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># - From the readme</span></div><div class=\"line\">sudo mkdir /etc/caddy</div><div class=\"line\">sudo chown -R root:www-data /etc/caddy</div><div class=\"line\">sudo mkdir /etc/ssl/caddy</div><div class=\"line\">sudo chown -R www-data:root /etc/ssl/caddy</div><div class=\"line\">sudo chmod 0770 /etc/ssl/caddy</div></pre></td></tr></table></figure></p>\n<p>The next step requires that we have a Caddyfile setup.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Primary Goal: Setup Caddy as a static web server with a self-signed cert, in a LXD container.<br>Secondary Goal: Setup proxy server to Node.js for dynamic content.<br>Tertiary Goal: Setup FastCGI proxy for PHP.</p>\n<h1 id=\"Article-OS-assumption\"><a href=\"#Article-OS-assumption\" class=\"headerlink\" title=\"Article OS assumption\"></a>Article OS assumption</h1><p>My base OS is Xubuntu 16.10. While technically LXD is not a Ubuntu-specific technology, I’m not as familiar with other distros, and won’t be providing instructions for other platforms.</p>\n<h1 id=\"Do-basic-startup-of-container-image\"><a href=\"#Do-basic-startup-of-container-image\" class=\"headerlink\" title=\"Do basic startup of container image\"></a>Do basic startup of container image</h1><p>For starters, if you don’t have LXD/LXC (pronounced Lex-D and Lex-C), check out the <a href=\"https://linuxcontainers.org/lxd/getting-started-cli/\" target=\"_blank\" rel=\"external\">installation instructions.</a> Don’t run <code>newgrp lxd</code> with sudo. I’m not sure why I thought that made sense, but no, that just adds the group to root, and drops you to the root terminal.</p>\n<p>Create a new container with <code>lxc launch ubuntu:16.10 my-ubuntu</code>. I’m going to hazard a guess that everything will work on 16.04 as well, which is an LTS release.</p>\n<p>If you aren’t familiar with LXD, we just created a running container based on a generic Ubuntu image. You can stop the container with <code>lxc stop my-ubuntu</code>. (The container is named ‘my-ubuntu’. You can name yours whatever you want.) To start your container back up, use <code>lxc start my-ubuntu</code>. To get a bash console in the container, run <code>lxc exec my-ubuntu bash</code>.</p>\n<h1 id=\"Downloading-Caddy\"><a href=\"#Downloading-Caddy\" class=\"headerlink\" title=\"Downloading Caddy\"></a>Downloading Caddy</h1><p>The preferred method of downloading Caddy seems to be as a configurable <a href=\"https://caddyserver.com/download\" target=\"_blank\" rel=\"external\">tar.gz download</a>. So I’ll do that and push it into the container manually. I chose the default HTTP core, ‘expires’ and ‘git’ directives/middleware, and no DNS providers (since this is a local-only instance). Make sure you know where you download the server to.</p>\n<p>Push the file into the container with <code>lxc file push -p Downloads/caddy_linux_amd64_custom.tar.gz my-ubuntu/home/ubuntu/</code>. The <code>-p</code> flag tells <code>lxc file push</code> to create any folders which don’t already exist. If you get an error that the flag does exist, you are probably using lxd on 16.04 or older, which don’t have the flag. You can manually create any folder needed.</p>\n<p>Enter bash into the container (<code>lxc exec my-ubuntu bash</code>), cd to where you pushed the file (<code>cd /home/ubuntu</code>), and run <code>tar -xzf caddy_linux_amd64_custom.tar.gz</code> to unpack.</p>\n<p>Move caddy to <code>/usr/local/bin</code> with <code>mv caddy /usr/local/bin/</code>, and set ownership and permissions <code>chown root:root /usr/local/bin/caddy</code>, <code>chmod 755 /usr/local/bin/caddy</code>.</p>\n<h1 id=\"Setup-daemon\"><a href=\"#Setup-daemon\" class=\"headerlink\" title=\"Setup daemon\"></a>Setup daemon</h1><p>We want Caddy to start up with the container. Fortunately, Caddy comes with some unofficial, unsupported scripts for setting this up. Recent Ubuntu uses systemd, so that’s the instruction set we’ll follow. The scripts are contained in the <code>init/</code> folder unpacked from the tar.gz, but you can also read the <a href=\"https://github.com/mholt/caddy/tree/master/dist/init/linux-systemd\" target=\"_blank\" rel=\"external\">readme on github</a>.</p>\n<p>We can skip the groupadd and useradd commands, as the Ubuntu container already has the appropriate ‘www-data’ user setup.</p>\n<p>We need some folders setup:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># - From the readme</span></div><div class=\"line\">sudo mkdir /etc/caddy</div><div class=\"line\">sudo chown -R root:www-data /etc/caddy</div><div class=\"line\">sudo mkdir /etc/ssl/caddy</div><div class=\"line\">sudo chown -R www-data:root /etc/ssl/caddy</div><div class=\"line\">sudo chmod 0770 /etc/ssl/caddy</div></pre></td></tr></table></figure></p>\n<p>The next step requires that we have a Caddyfile setup.</p>\n"},{"title":"Managing State in a React app","date":"2017-08-29T11:59:53.000Z","_content":"How to manage state in React.\n\n## Fully top-down\nThis is easily the most straight forward way to use React. You pass state and update functions as props to the top level render, and re-render when the state changes.\n\nA basic (simplified) example:\n```jsx\nconst Input = props =>\n\t<input value={props.value} onChange={e => props.onChange(e.currentTarget.value)} />;\n\nconst Output = props =>\n\t<div>\n\t  Output: {props.value}\n\t</div>;\n\nlet value = '';\n\nconst containerEl = document.getElementById('container');\n\nconst render = () => {\n\tReactDOM.render(\n \t\t<div>\n \t\t  <Input value={value} onChange={newValue => {\n        value = newValue;\n        render();\n      }} />\n      <Output value={value} />\n \t\t</div>,\n    containerEl\n  );\n};\n\nrender();\n```\n> [On JSFiddle](https://jsfiddle.net/samsch/skom7z2e/)\n\nFor a slightly more realistic example, check out [this fiddle](https://jsfiddle.net/samsch/nsdrt8r4/).\n\n## Internally\nReact class component include some features not available in function components, including a simple state store.\n\n> One of the biggest catches which causes new users trouble is that the setState function can't be treated as a synchronous update (it's also not strictly async, but can usually be treated as if it is). You can read more about how it works and how to use it in [the documentation](https://facebook.github.io/react/docs/react-component.html#setstate).\n\nA basic input example:\n```jsx\nclass App extends React.Component {\n\tconstructor(props) {\n  \tsuper(props);\n    this.state = {\n      text: '',\n    };\n  }\n  render() {\n    return (\n    \t<div>\n    \t  <div>\n          <input\n            value={this.state.text}\n            onChange={e => {\n            \t// events can't be directly stored in React, so we need to \"cache\" the value.\n            \tconst newText = e.currentTarget.value;\n            \tthis.setState(prev => ({ text: newText }));\n            }}\n          />\n        </div>\n        <div>\n          Output: {this.state.text}\n        </div>\n    \t</div>\n    );\n  }\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('container')\n);\n```\n> [On JSFiddle](https://jsfiddle.net/samsch/4h2ryo3u/)\n\n## With context\nLastly, React includes a shortcut (called context) which can pass data down the component tree without having to be included in the props at each level. This relies on some other actual data store, and also custom update logic, since context updates don't guarantee that any child using that context will update.\n\nReact context is also considered an \"unstable\" feature, meaning the React team is not actually happy with how it works, and if they can find a better solution it will likely get replaced. However, React also follows semver, so any non-backward compatible changes will only happen in major versions.\n\nBecause of the \"unstableness\" of context, it's recommended that you use a library which wraps the functionality, rather than use the API directly in your app. Another possiblity is to create such a wrapper yourself.\n\n> To learn more, check out [How safely use React context](https://medium.com/@mweststrate/how-to-safely-use-react-context-b7e343eff076) on medium.\n\n# When to use what\nIf you are just getting into React, you should only do fully top down rendering. (You should also only use function components here, which helps enforce this.) Using React strictly top down will help solidify how React is meant to be used.\n\nKeeping everything rendered top down allows for the strongest application logic and state vs view separation. It's easier to reason about your application when your view is irrelavant, and it's easier to reason about your view when your application is only relevant in that it provides state and functions which you use in render and event handlers.\n\nReact component state is handy tool for some situations, but should almost always be only used for \"view state\" purposes, never business logic. You might make an exception for a small \"widget\" where you only have a couple components and the functionality is trivial, but even then, it's often going to be easier to move the functionality outside of React and just have React render the view.\n\n## Using context\nIn general, you don't need to use context for most apps. The advantage to using it is that you don't need to pass everything needed for every component through all of its parents. It also allows you to delegate selecting what state is needed to the component which use it.\n\nHowever, there are downsides too. It can be more difficult to trace state usage in your view when components further down the tree","source":"_drafts/2017-08-29-managing-state-in-a-react-app.md","raw":"---\ntitle: Managing State in a React app\ndate: 2017-08-29 07:59:53\ntags:\n- React\n- state\n- patterns\n- js\n---\nHow to manage state in React.\n\n## Fully top-down\nThis is easily the most straight forward way to use React. You pass state and update functions as props to the top level render, and re-render when the state changes.\n\nA basic (simplified) example:\n```jsx\nconst Input = props =>\n\t<input value={props.value} onChange={e => props.onChange(e.currentTarget.value)} />;\n\nconst Output = props =>\n\t<div>\n\t  Output: {props.value}\n\t</div>;\n\nlet value = '';\n\nconst containerEl = document.getElementById('container');\n\nconst render = () => {\n\tReactDOM.render(\n \t\t<div>\n \t\t  <Input value={value} onChange={newValue => {\n        value = newValue;\n        render();\n      }} />\n      <Output value={value} />\n \t\t</div>,\n    containerEl\n  );\n};\n\nrender();\n```\n> [On JSFiddle](https://jsfiddle.net/samsch/skom7z2e/)\n\nFor a slightly more realistic example, check out [this fiddle](https://jsfiddle.net/samsch/nsdrt8r4/).\n\n## Internally\nReact class component include some features not available in function components, including a simple state store.\n\n> One of the biggest catches which causes new users trouble is that the setState function can't be treated as a synchronous update (it's also not strictly async, but can usually be treated as if it is). You can read more about how it works and how to use it in [the documentation](https://facebook.github.io/react/docs/react-component.html#setstate).\n\nA basic input example:\n```jsx\nclass App extends React.Component {\n\tconstructor(props) {\n  \tsuper(props);\n    this.state = {\n      text: '',\n    };\n  }\n  render() {\n    return (\n    \t<div>\n    \t  <div>\n          <input\n            value={this.state.text}\n            onChange={e => {\n            \t// events can't be directly stored in React, so we need to \"cache\" the value.\n            \tconst newText = e.currentTarget.value;\n            \tthis.setState(prev => ({ text: newText }));\n            }}\n          />\n        </div>\n        <div>\n          Output: {this.state.text}\n        </div>\n    \t</div>\n    );\n  }\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('container')\n);\n```\n> [On JSFiddle](https://jsfiddle.net/samsch/4h2ryo3u/)\n\n## With context\nLastly, React includes a shortcut (called context) which can pass data down the component tree without having to be included in the props at each level. This relies on some other actual data store, and also custom update logic, since context updates don't guarantee that any child using that context will update.\n\nReact context is also considered an \"unstable\" feature, meaning the React team is not actually happy with how it works, and if they can find a better solution it will likely get replaced. However, React also follows semver, so any non-backward compatible changes will only happen in major versions.\n\nBecause of the \"unstableness\" of context, it's recommended that you use a library which wraps the functionality, rather than use the API directly in your app. Another possiblity is to create such a wrapper yourself.\n\n> To learn more, check out [How safely use React context](https://medium.com/@mweststrate/how-to-safely-use-react-context-b7e343eff076) on medium.\n\n# When to use what\nIf you are just getting into React, you should only do fully top down rendering. (You should also only use function components here, which helps enforce this.) Using React strictly top down will help solidify how React is meant to be used.\n\nKeeping everything rendered top down allows for the strongest application logic and state vs view separation. It's easier to reason about your application when your view is irrelavant, and it's easier to reason about your view when your application is only relevant in that it provides state and functions which you use in render and event handlers.\n\nReact component state is handy tool for some situations, but should almost always be only used for \"view state\" purposes, never business logic. You might make an exception for a small \"widget\" where you only have a couple components and the functionality is trivial, but even then, it's often going to be easier to move the functionality outside of React and just have React render the view.\n\n## Using context\nIn general, you don't need to use context for most apps. The advantage to using it is that you don't need to pass everything needed for every component through all of its parents. It also allows you to delegate selecting what state is needed to the component which use it.\n\nHowever, there are downsides too. It can be more difficult to trace state usage in your view when components further down the tree","slug":"managing-state-in-a-react-app","published":0,"updated":"2017-08-29T16:31:55.364Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckixl4zvu0002jku3e4lbc7eu","content":"<p>How to manage state in React.</p>\n<h2 id=\"Fully-top-down\"><a href=\"#Fully-top-down\" class=\"headerlink\" title=\"Fully top-down\"></a>Fully top-down</h2><p>This is easily the most straight forward way to use React. You pass state and update functions as props to the top level render, and re-render when the state changes.</p>\n<p>A basic (simplified) example:<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> Input = <span class=\"function\"><span class=\"params\">props</span> =&gt;</span></div><div class=\"line\">\t&lt;input value=&#123;props.value&#125; onChange=&#123;e =&gt; props.onChange(e.currentTarget.value)&#125; /&gt;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> Output = <span class=\"function\"><span class=\"params\">props</span> =&gt;</span></div><div class=\"line\">\t&lt;div&gt;</div><div class=\"line\">\t  Output: &#123;props.value&#125;</div><div class=\"line\">\t&lt;<span class=\"regexp\">/div&gt;;</span></div><div class=\"line\"><span class=\"regexp\"></span></div><div class=\"line\"><span class=\"regexp\">let value = '';</span></div><div class=\"line\"><span class=\"regexp\"></span></div><div class=\"line\"><span class=\"regexp\">const containerEl = document.getElementById('container');</span></div><div class=\"line\"><span class=\"regexp\"></span></div><div class=\"line\"><span class=\"regexp\">const render = () =&gt; &#123;</span></div><div class=\"line\"><span class=\"regexp\">\tReactDOM.render(</span></div><div class=\"line\"><span class=\"regexp\"> \t\t&lt;div&gt;</span></div><div class=\"line\"><span class=\"regexp\"> \t\t  &lt;Input value=&#123;value&#125; onChange=&#123;newValue =&gt; &#123;</span></div><div class=\"line\"><span class=\"regexp\">        value = newValue;</span></div><div class=\"line\"><span class=\"regexp\">        render();</span></div><div class=\"line\"><span class=\"regexp\">      &#125;&#125; /</span>&gt;</div><div class=\"line\">      &lt;Output value=&#123;value&#125; /&gt;</div><div class=\"line\"> \t\t&lt;<span class=\"regexp\">/div&gt;,</span></div><div class=\"line\"><span class=\"regexp\">    containerEl</span></div><div class=\"line\"><span class=\"regexp\">  );</span></div><div class=\"line\"><span class=\"regexp\">&#125;;</span></div><div class=\"line\"><span class=\"regexp\"></span></div><div class=\"line\"><span class=\"regexp\">render();</span></div></pre></td></tr></table></figure></p>\n<blockquote>\n<p><a href=\"https://jsfiddle.net/samsch/skom7z2e/\" target=\"_blank\" rel=\"external\">On JSFiddle</a></p>\n</blockquote>\n<p>For a slightly more realistic example, check out <a href=\"https://jsfiddle.net/samsch/nsdrt8r4/\" target=\"_blank\" rel=\"external\">this fiddle</a>.</p>\n<h2 id=\"Internally\"><a href=\"#Internally\" class=\"headerlink\" title=\"Internally\"></a>Internally</h2><p>React class component include some features not available in function components, including a simple state store.</p>\n<blockquote>\n<p>One of the biggest catches which causes new users trouble is that the setState function can’t be treated as a synchronous update (it’s also not strictly async, but can usually be treated as if it is). You can read more about how it works and how to use it in <a href=\"https://facebook.github.io/react/docs/react-component.html#setstate\" target=\"_blank\" rel=\"external\">the documentation</a>.</p>\n</blockquote>\n<p>A basic input example:<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">constructor</span>(props) &#123;</div><div class=\"line\">  \t<span class=\"keyword\">super</span>(props);</div><div class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;</div><div class=\"line\">      text: <span class=\"string\">''</span>,</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">    \t&lt;div&gt;</div><div class=\"line\">    \t  &lt;div&gt;</div><div class=\"line\">          &lt;input</div><div class=\"line\">            value=&#123;<span class=\"keyword\">this</span>.state.text&#125;</div><div class=\"line\">            onChange=&#123;e =&gt; &#123;</div><div class=\"line\">            \t<span class=\"comment\">// events can't be directly stored in React, so we need to \"cache\" the value.</span></div><div class=\"line\">            \t<span class=\"keyword\">const</span> newText = e.currentTarget.value;</div><div class=\"line\">            \t<span class=\"keyword\">this</span>.setState(<span class=\"function\"><span class=\"params\">prev</span> =&gt;</span> (&#123; <span class=\"attr\">text</span>: newText &#125;));</div><div class=\"line\">            &#125;&#125;</div><div class=\"line\">          /&gt;</div><div class=\"line\">        &lt;<span class=\"regexp\">/div&gt;</span></div><div class=\"line\"><span class=\"regexp\">        &lt;div&gt;</span></div><div class=\"line\"><span class=\"regexp\">          Output: &#123;this.state.text&#125;</span></div><div class=\"line\"><span class=\"regexp\">        &lt;/</span>div&gt;</div><div class=\"line\">    \t&lt;<span class=\"regexp\">/div&gt;</span></div><div class=\"line\"><span class=\"regexp\">    );</span></div><div class=\"line\"><span class=\"regexp\">  &#125;</span></div><div class=\"line\"><span class=\"regexp\">&#125;</span></div><div class=\"line\"><span class=\"regexp\"></span></div><div class=\"line\"><span class=\"regexp\">ReactDOM.render(</span></div><div class=\"line\"><span class=\"regexp\">  &lt;App /</span>&gt;,</div><div class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'container'</span>)</div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p><a href=\"https://jsfiddle.net/samsch/4h2ryo3u/\" target=\"_blank\" rel=\"external\">On JSFiddle</a></p>\n</blockquote>\n<h2 id=\"With-context\"><a href=\"#With-context\" class=\"headerlink\" title=\"With context\"></a>With context</h2><p>Lastly, React includes a shortcut (called context) which can pass data down the component tree without having to be included in the props at each level. This relies on some other actual data store, and also custom update logic, since context updates don’t guarantee that any child using that context will update.</p>\n<p>React context is also considered an “unstable” feature, meaning the React team is not actually happy with how it works, and if they can find a better solution it will likely get replaced. However, React also follows semver, so any non-backward compatible changes will only happen in major versions.</p>\n<p>Because of the “unstableness” of context, it’s recommended that you use a library which wraps the functionality, rather than use the API directly in your app. Another possiblity is to create such a wrapper yourself.</p>\n<blockquote>\n<p>To learn more, check out <a href=\"https://medium.com/@mweststrate/how-to-safely-use-react-context-b7e343eff076\" target=\"_blank\" rel=\"external\">How safely use React context</a> on medium.</p>\n</blockquote>\n<h1 id=\"When-to-use-what\"><a href=\"#When-to-use-what\" class=\"headerlink\" title=\"When to use what\"></a>When to use what</h1><p>If you are just getting into React, you should only do fully top down rendering. (You should also only use function components here, which helps enforce this.) Using React strictly top down will help solidify how React is meant to be used.</p>\n<p>Keeping everything rendered top down allows for the strongest application logic and state vs view separation. It’s easier to reason about your application when your view is irrelavant, and it’s easier to reason about your view when your application is only relevant in that it provides state and functions which you use in render and event handlers.</p>\n<p>React component state is handy tool for some situations, but should almost always be only used for “view state” purposes, never business logic. You might make an exception for a small “widget” where you only have a couple components and the functionality is trivial, but even then, it’s often going to be easier to move the functionality outside of React and just have React render the view.</p>\n<h2 id=\"Using-context\"><a href=\"#Using-context\" class=\"headerlink\" title=\"Using context\"></a>Using context</h2><p>In general, you don’t need to use context for most apps. The advantage to using it is that you don’t need to pass everything needed for every component through all of its parents. It also allows you to delegate selecting what state is needed to the component which use it.</p>\n<p>However, there are downsides too. It can be more difficult to trace state usage in your view when components further down the tree</p>\n","site":{"data":{}},"excerpt":"","more":"<p>How to manage state in React.</p>\n<h2 id=\"Fully-top-down\"><a href=\"#Fully-top-down\" class=\"headerlink\" title=\"Fully top-down\"></a>Fully top-down</h2><p>This is easily the most straight forward way to use React. You pass state and update functions as props to the top level render, and re-render when the state changes.</p>\n<p>A basic (simplified) example:<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> Input = <span class=\"function\"><span class=\"params\">props</span> =&gt;</span></div><div class=\"line\">\t&lt;input value=&#123;props.value&#125; onChange=&#123;e =&gt; props.onChange(e.currentTarget.value)&#125; /&gt;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> Output = <span class=\"function\"><span class=\"params\">props</span> =&gt;</span></div><div class=\"line\">\t&lt;div&gt;</div><div class=\"line\">\t  Output: &#123;props.value&#125;</div><div class=\"line\">\t&lt;<span class=\"regexp\">/div&gt;;</span></div><div class=\"line\"><span class=\"regexp\"></span></div><div class=\"line\"><span class=\"regexp\">let value = '';</span></div><div class=\"line\"><span class=\"regexp\"></span></div><div class=\"line\"><span class=\"regexp\">const containerEl = document.getElementById('container');</span></div><div class=\"line\"><span class=\"regexp\"></span></div><div class=\"line\"><span class=\"regexp\">const render = () =&gt; &#123;</span></div><div class=\"line\"><span class=\"regexp\">\tReactDOM.render(</span></div><div class=\"line\"><span class=\"regexp\"> \t\t&lt;div&gt;</span></div><div class=\"line\"><span class=\"regexp\"> \t\t  &lt;Input value=&#123;value&#125; onChange=&#123;newValue =&gt; &#123;</span></div><div class=\"line\"><span class=\"regexp\">        value = newValue;</span></div><div class=\"line\"><span class=\"regexp\">        render();</span></div><div class=\"line\"><span class=\"regexp\">      &#125;&#125; /</span>&gt;</div><div class=\"line\">      &lt;Output value=&#123;value&#125; /&gt;</div><div class=\"line\"> \t\t&lt;<span class=\"regexp\">/div&gt;,</span></div><div class=\"line\"><span class=\"regexp\">    containerEl</span></div><div class=\"line\"><span class=\"regexp\">  );</span></div><div class=\"line\"><span class=\"regexp\">&#125;;</span></div><div class=\"line\"><span class=\"regexp\"></span></div><div class=\"line\"><span class=\"regexp\">render();</span></div></pre></td></tr></table></figure></p>\n<blockquote>\n<p><a href=\"https://jsfiddle.net/samsch/skom7z2e/\" target=\"_blank\" rel=\"external\">On JSFiddle</a></p>\n</blockquote>\n<p>For a slightly more realistic example, check out <a href=\"https://jsfiddle.net/samsch/nsdrt8r4/\" target=\"_blank\" rel=\"external\">this fiddle</a>.</p>\n<h2 id=\"Internally\"><a href=\"#Internally\" class=\"headerlink\" title=\"Internally\"></a>Internally</h2><p>React class component include some features not available in function components, including a simple state store.</p>\n<blockquote>\n<p>One of the biggest catches which causes new users trouble is that the setState function can’t be treated as a synchronous update (it’s also not strictly async, but can usually be treated as if it is). You can read more about how it works and how to use it in <a href=\"https://facebook.github.io/react/docs/react-component.html#setstate\" target=\"_blank\" rel=\"external\">the documentation</a>.</p>\n</blockquote>\n<p>A basic input example:<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">constructor</span>(props) &#123;</div><div class=\"line\">  \t<span class=\"keyword\">super</span>(props);</div><div class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;</div><div class=\"line\">      text: <span class=\"string\">''</span>,</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">    \t&lt;div&gt;</div><div class=\"line\">    \t  &lt;div&gt;</div><div class=\"line\">          &lt;input</div><div class=\"line\">            value=&#123;<span class=\"keyword\">this</span>.state.text&#125;</div><div class=\"line\">            onChange=&#123;e =&gt; &#123;</div><div class=\"line\">            \t<span class=\"comment\">// events can't be directly stored in React, so we need to \"cache\" the value.</span></div><div class=\"line\">            \t<span class=\"keyword\">const</span> newText = e.currentTarget.value;</div><div class=\"line\">            \t<span class=\"keyword\">this</span>.setState(<span class=\"function\"><span class=\"params\">prev</span> =&gt;</span> (&#123; <span class=\"attr\">text</span>: newText &#125;));</div><div class=\"line\">            &#125;&#125;</div><div class=\"line\">          /&gt;</div><div class=\"line\">        &lt;<span class=\"regexp\">/div&gt;</span></div><div class=\"line\"><span class=\"regexp\">        &lt;div&gt;</span></div><div class=\"line\"><span class=\"regexp\">          Output: &#123;this.state.text&#125;</span></div><div class=\"line\"><span class=\"regexp\">        &lt;/</span>div&gt;</div><div class=\"line\">    \t&lt;<span class=\"regexp\">/div&gt;</span></div><div class=\"line\"><span class=\"regexp\">    );</span></div><div class=\"line\"><span class=\"regexp\">  &#125;</span></div><div class=\"line\"><span class=\"regexp\">&#125;</span></div><div class=\"line\"><span class=\"regexp\"></span></div><div class=\"line\"><span class=\"regexp\">ReactDOM.render(</span></div><div class=\"line\"><span class=\"regexp\">  &lt;App /</span>&gt;,</div><div class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'container'</span>)</div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p><a href=\"https://jsfiddle.net/samsch/4h2ryo3u/\" target=\"_blank\" rel=\"external\">On JSFiddle</a></p>\n</blockquote>\n<h2 id=\"With-context\"><a href=\"#With-context\" class=\"headerlink\" title=\"With context\"></a>With context</h2><p>Lastly, React includes a shortcut (called context) which can pass data down the component tree without having to be included in the props at each level. This relies on some other actual data store, and also custom update logic, since context updates don’t guarantee that any child using that context will update.</p>\n<p>React context is also considered an “unstable” feature, meaning the React team is not actually happy with how it works, and if they can find a better solution it will likely get replaced. However, React also follows semver, so any non-backward compatible changes will only happen in major versions.</p>\n<p>Because of the “unstableness” of context, it’s recommended that you use a library which wraps the functionality, rather than use the API directly in your app. Another possiblity is to create such a wrapper yourself.</p>\n<blockquote>\n<p>To learn more, check out <a href=\"https://medium.com/@mweststrate/how-to-safely-use-react-context-b7e343eff076\" target=\"_blank\" rel=\"external\">How safely use React context</a> on medium.</p>\n</blockquote>\n<h1 id=\"When-to-use-what\"><a href=\"#When-to-use-what\" class=\"headerlink\" title=\"When to use what\"></a>When to use what</h1><p>If you are just getting into React, you should only do fully top down rendering. (You should also only use function components here, which helps enforce this.) Using React strictly top down will help solidify how React is meant to be used.</p>\n<p>Keeping everything rendered top down allows for the strongest application logic and state vs view separation. It’s easier to reason about your application when your view is irrelavant, and it’s easier to reason about your view when your application is only relevant in that it provides state and functions which you use in render and event handlers.</p>\n<p>React component state is handy tool for some situations, but should almost always be only used for “view state” purposes, never business logic. You might make an exception for a small “widget” where you only have a couple components and the functionality is trivial, but even then, it’s often going to be easier to move the functionality outside of React and just have React render the view.</p>\n<h2 id=\"Using-context\"><a href=\"#Using-context\" class=\"headerlink\" title=\"Using context\"></a>Using context</h2><p>In general, you don’t need to use context for most apps. The advantage to using it is that you don’t need to pass everything needed for every component through all of its parents. It also allows you to delegate selecting what state is needed to the component which use it.</p>\n<p>However, there are downsides too. It can be more difficult to trace state usage in your view when components further down the tree</p>\n"},{"title":"what-isnt-redux","date":"2017-10-26T08:46:29.000Z","_content":"It's frequently argued that you should use Redux so you can avoid passing your entire state tree through your entire React component tree.\n\nThis is a bit like suggesting that you need a freight train to travel from A to B. `connect()` and getting data without passing props through the tree is **not** part of Redux. It's a [**separate** library called react-redux](https://github.com/reactjs/react-redux), which can actually be used with any store that has a redux-compatible API (namely the `dispatch`, `subscribe` and `getState` functions and immutable state).\n\nIf all you want is to not pass props through all components, consider whether you want all the baggage of a strongly opinionated state library (Redux, the freight train), or if it makes more sense to use react-redux with another state manager, or if it makes sense to use another context-based solution all together.\n\nLet's a look at a couple examples:\n\nHere's what using Redux and React looks like without react-redux: https://jsfiddle.net/samsch/899vv6kn/\n\nThis is the equivalent with react-redux: https://jsfiddle.net/samsch/ejrLuyvx/\n\nIf you don't see the value of the *first* example over something like https://jsfiddle.net/samsch/uuqno72z/ , then you probably shouldn't use Redux. If you see value in only the second example, take a look at using other context-based solutions, since Redux is just going to be noise.\n\n\n\nAs for the actual \"why\" of Redux, checkout the design goals from when it was being written: [Redux v0.3.0 design goals](https://github.com/reactjs/redux/tree/v0.3.0#design-goals)\n\nThe major theme of Redux was to make hot module reloading easy, which is made much easier by having an external, immutable, state controlled by pure (stateless, deterministic) functions (the reducer(s)).\n\nIt was found that Redux makes an ok general state store, and it can stop you from making mistakes which are easy in earlier Flux implementations. There are downsides to the library as well though. Because the entire store system (reducer tree) **must** be pure, you have to separate out impure, asynchronous and non-deterministic work. This works ok for some types of apps, but if you do a lot of async work, you can easily end up having half of your app logic outside of Redux in [Sagas](https://redux-saga.js.org/) or [Thunks](http://redux.js.org/docs/advanced/AsyncActions.html#async-action-creators). Instead, it can be much easier and clearer to write these types of apps using a state management system which doesn't have these limitations.\n\nUsing an external state store often makes using React much easier and cleaner. Redux is an available option, but I'd recommend taking a look at some other tools as well:\n\n- Just use JavaScript!\n  - [Over simplified example](https://jsfiddle.net/samsch/skom7z2e/)\n  - [Basic example](https://jsfiddle.net/samsch/nsdrt8r4/)\n  - [More advanced example](https://jsfiddle.net/samsch/8erd7m9m/)\n  - Roll your own library! (e.g., I created [subscribe-store](https://github.com/samsch/subscribe-store/))\n- Reactive programming!\n  - [Tightly integrated with React](https://github.com/rikutiira/react-frp-todomvc)\n  - You can also directly use reactive libraries like [RxJS](https://github.com/Reactive-Extensions/RxJS), [Kefir](https://rpominov.github.io/kefir/) and [Bacon](https://baconjs.github.io/); where you would subscribe and pass props similar to the Just use JavaScript examples above.\n- Use older model libraries like [Backbone](https://reactjs.org/docs/integrating-with-other-libraries.html#using-backbone-models-in-react-components)\n  - *Note that using backbone isn't really recommend by most people these days, but this provides a decent example of using a model that wasn't designed around React*\n- Other React-focused state management libraries\n  - [MobX](https://mobx.js.org/)\n  - A search for \"react state management library\" on Google will turn up many less-known libraries (as well as some dead libraries, such as [marty.js](https://github.com/martyjs/marty#marty-is-no-longer-actively-maintained-use-alt-or-redux-instead-more-info))\n","source":"_drafts/2017-10-26-what-isnt-redux.md","raw":"---\ntitle: what-isnt-redux\ndate: 2017-10-26 04:46:29\ntags:\n---\nIt's frequently argued that you should use Redux so you can avoid passing your entire state tree through your entire React component tree.\n\nThis is a bit like suggesting that you need a freight train to travel from A to B. `connect()` and getting data without passing props through the tree is **not** part of Redux. It's a [**separate** library called react-redux](https://github.com/reactjs/react-redux), which can actually be used with any store that has a redux-compatible API (namely the `dispatch`, `subscribe` and `getState` functions and immutable state).\n\nIf all you want is to not pass props through all components, consider whether you want all the baggage of a strongly opinionated state library (Redux, the freight train), or if it makes more sense to use react-redux with another state manager, or if it makes sense to use another context-based solution all together.\n\nLet's a look at a couple examples:\n\nHere's what using Redux and React looks like without react-redux: https://jsfiddle.net/samsch/899vv6kn/\n\nThis is the equivalent with react-redux: https://jsfiddle.net/samsch/ejrLuyvx/\n\nIf you don't see the value of the *first* example over something like https://jsfiddle.net/samsch/uuqno72z/ , then you probably shouldn't use Redux. If you see value in only the second example, take a look at using other context-based solutions, since Redux is just going to be noise.\n\n\n\nAs for the actual \"why\" of Redux, checkout the design goals from when it was being written: [Redux v0.3.0 design goals](https://github.com/reactjs/redux/tree/v0.3.0#design-goals)\n\nThe major theme of Redux was to make hot module reloading easy, which is made much easier by having an external, immutable, state controlled by pure (stateless, deterministic) functions (the reducer(s)).\n\nIt was found that Redux makes an ok general state store, and it can stop you from making mistakes which are easy in earlier Flux implementations. There are downsides to the library as well though. Because the entire store system (reducer tree) **must** be pure, you have to separate out impure, asynchronous and non-deterministic work. This works ok for some types of apps, but if you do a lot of async work, you can easily end up having half of your app logic outside of Redux in [Sagas](https://redux-saga.js.org/) or [Thunks](http://redux.js.org/docs/advanced/AsyncActions.html#async-action-creators). Instead, it can be much easier and clearer to write these types of apps using a state management system which doesn't have these limitations.\n\nUsing an external state store often makes using React much easier and cleaner. Redux is an available option, but I'd recommend taking a look at some other tools as well:\n\n- Just use JavaScript!\n  - [Over simplified example](https://jsfiddle.net/samsch/skom7z2e/)\n  - [Basic example](https://jsfiddle.net/samsch/nsdrt8r4/)\n  - [More advanced example](https://jsfiddle.net/samsch/8erd7m9m/)\n  - Roll your own library! (e.g., I created [subscribe-store](https://github.com/samsch/subscribe-store/))\n- Reactive programming!\n  - [Tightly integrated with React](https://github.com/rikutiira/react-frp-todomvc)\n  - You can also directly use reactive libraries like [RxJS](https://github.com/Reactive-Extensions/RxJS), [Kefir](https://rpominov.github.io/kefir/) and [Bacon](https://baconjs.github.io/); where you would subscribe and pass props similar to the Just use JavaScript examples above.\n- Use older model libraries like [Backbone](https://reactjs.org/docs/integrating-with-other-libraries.html#using-backbone-models-in-react-components)\n  - *Note that using backbone isn't really recommend by most people these days, but this provides a decent example of using a model that wasn't designed around React*\n- Other React-focused state management libraries\n  - [MobX](https://mobx.js.org/)\n  - A search for \"react state management library\" on Google will turn up many less-known libraries (as well as some dead libraries, such as [marty.js](https://github.com/martyjs/marty#marty-is-no-longer-actively-maintained-use-alt-or-redux-instead-more-info))\n","slug":"what-isnt-redux","published":0,"updated":"2017-12-11T16:33:46.191Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckixl4zvv0004jku376po9513","content":"<p>It’s frequently argued that you should use Redux so you can avoid passing your entire state tree through your entire React component tree.</p>\n<p>This is a bit like suggesting that you need a freight train to travel from A to B. <code>connect()</code> and getting data without passing props through the tree is <strong>not</strong> part of Redux. It’s a <a href=\"https://github.com/reactjs/react-redux\" target=\"_blank\" rel=\"external\"><strong>separate</strong> library called react-redux</a>, which can actually be used with any store that has a redux-compatible API (namely the <code>dispatch</code>, <code>subscribe</code> and <code>getState</code> functions and immutable state).</p>\n<p>If all you want is to not pass props through all components, consider whether you want all the baggage of a strongly opinionated state library (Redux, the freight train), or if it makes more sense to use react-redux with another state manager, or if it makes sense to use another context-based solution all together.</p>\n<p>Let’s a look at a couple examples:</p>\n<p>Here’s what using Redux and React looks like without react-redux: <a href=\"https://jsfiddle.net/samsch/899vv6kn/\" target=\"_blank\" rel=\"external\">https://jsfiddle.net/samsch/899vv6kn/</a></p>\n<p>This is the equivalent with react-redux: <a href=\"https://jsfiddle.net/samsch/ejrLuyvx/\" target=\"_blank\" rel=\"external\">https://jsfiddle.net/samsch/ejrLuyvx/</a></p>\n<p>If you don’t see the value of the <em>first</em> example over something like <a href=\"https://jsfiddle.net/samsch/uuqno72z/\" target=\"_blank\" rel=\"external\">https://jsfiddle.net/samsch/uuqno72z/</a> , then you probably shouldn’t use Redux. If you see value in only the second example, take a look at using other context-based solutions, since Redux is just going to be noise.</p>\n<p>As for the actual “why” of Redux, checkout the design goals from when it was being written: <a href=\"https://github.com/reactjs/redux/tree/v0.3.0#design-goals\" target=\"_blank\" rel=\"external\">Redux v0.3.0 design goals</a></p>\n<p>The major theme of Redux was to make hot module reloading easy, which is made much easier by having an external, immutable, state controlled by pure (stateless, deterministic) functions (the reducer(s)).</p>\n<p>It was found that Redux makes an ok general state store, and it can stop you from making mistakes which are easy in earlier Flux implementations. There are downsides to the library as well though. Because the entire store system (reducer tree) <strong>must</strong> be pure, you have to separate out impure, asynchronous and non-deterministic work. This works ok for some types of apps, but if you do a lot of async work, you can easily end up having half of your app logic outside of Redux in <a href=\"https://redux-saga.js.org/\" target=\"_blank\" rel=\"external\">Sagas</a> or <a href=\"http://redux.js.org/docs/advanced/AsyncActions.html#async-action-creators\" target=\"_blank\" rel=\"external\">Thunks</a>. Instead, it can be much easier and clearer to write these types of apps using a state management system which doesn’t have these limitations.</p>\n<p>Using an external state store often makes using React much easier and cleaner. Redux is an available option, but I’d recommend taking a look at some other tools as well:</p>\n<ul>\n<li>Just use JavaScript!<ul>\n<li><a href=\"https://jsfiddle.net/samsch/skom7z2e/\" target=\"_blank\" rel=\"external\">Over simplified example</a></li>\n<li><a href=\"https://jsfiddle.net/samsch/nsdrt8r4/\" target=\"_blank\" rel=\"external\">Basic example</a></li>\n<li><a href=\"https://jsfiddle.net/samsch/8erd7m9m/\" target=\"_blank\" rel=\"external\">More advanced example</a></li>\n<li>Roll your own library! (e.g., I created <a href=\"https://github.com/samsch/subscribe-store/\" target=\"_blank\" rel=\"external\">subscribe-store</a>)</li>\n</ul>\n</li>\n<li>Reactive programming!<ul>\n<li><a href=\"https://github.com/rikutiira/react-frp-todomvc\" target=\"_blank\" rel=\"external\">Tightly integrated with React</a></li>\n<li>You can also directly use reactive libraries like <a href=\"https://github.com/Reactive-Extensions/RxJS\" target=\"_blank\" rel=\"external\">RxJS</a>, <a href=\"https://rpominov.github.io/kefir/\" target=\"_blank\" rel=\"external\">Kefir</a> and <a href=\"https://baconjs.github.io/\" target=\"_blank\" rel=\"external\">Bacon</a>; where you would subscribe and pass props similar to the Just use JavaScript examples above.</li>\n</ul>\n</li>\n<li>Use older model libraries like <a href=\"https://reactjs.org/docs/integrating-with-other-libraries.html#using-backbone-models-in-react-components\" target=\"_blank\" rel=\"external\">Backbone</a><ul>\n<li><em>Note that using backbone isn’t really recommend by most people these days, but this provides a decent example of using a model that wasn’t designed around React</em></li>\n</ul>\n</li>\n<li>Other React-focused state management libraries<ul>\n<li><a href=\"https://mobx.js.org/\" target=\"_blank\" rel=\"external\">MobX</a></li>\n<li>A search for “react state management library” on Google will turn up many less-known libraries (as well as some dead libraries, such as <a href=\"https://github.com/martyjs/marty#marty-is-no-longer-actively-maintained-use-alt-or-redux-instead-more-info\" target=\"_blank\" rel=\"external\">marty.js</a>)</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>It’s frequently argued that you should use Redux so you can avoid passing your entire state tree through your entire React component tree.</p>\n<p>This is a bit like suggesting that you need a freight train to travel from A to B. <code>connect()</code> and getting data without passing props through the tree is <strong>not</strong> part of Redux. It’s a <a href=\"https://github.com/reactjs/react-redux\" target=\"_blank\" rel=\"external\"><strong>separate</strong> library called react-redux</a>, which can actually be used with any store that has a redux-compatible API (namely the <code>dispatch</code>, <code>subscribe</code> and <code>getState</code> functions and immutable state).</p>\n<p>If all you want is to not pass props through all components, consider whether you want all the baggage of a strongly opinionated state library (Redux, the freight train), or if it makes more sense to use react-redux with another state manager, or if it makes sense to use another context-based solution all together.</p>\n<p>Let’s a look at a couple examples:</p>\n<p>Here’s what using Redux and React looks like without react-redux: <a href=\"https://jsfiddle.net/samsch/899vv6kn/\" target=\"_blank\" rel=\"external\">https://jsfiddle.net/samsch/899vv6kn/</a></p>\n<p>This is the equivalent with react-redux: <a href=\"https://jsfiddle.net/samsch/ejrLuyvx/\" target=\"_blank\" rel=\"external\">https://jsfiddle.net/samsch/ejrLuyvx/</a></p>\n<p>If you don’t see the value of the <em>first</em> example over something like <a href=\"https://jsfiddle.net/samsch/uuqno72z/\" target=\"_blank\" rel=\"external\">https://jsfiddle.net/samsch/uuqno72z/</a> , then you probably shouldn’t use Redux. If you see value in only the second example, take a look at using other context-based solutions, since Redux is just going to be noise.</p>\n<p>As for the actual “why” of Redux, checkout the design goals from when it was being written: <a href=\"https://github.com/reactjs/redux/tree/v0.3.0#design-goals\" target=\"_blank\" rel=\"external\">Redux v0.3.0 design goals</a></p>\n<p>The major theme of Redux was to make hot module reloading easy, which is made much easier by having an external, immutable, state controlled by pure (stateless, deterministic) functions (the reducer(s)).</p>\n<p>It was found that Redux makes an ok general state store, and it can stop you from making mistakes which are easy in earlier Flux implementations. There are downsides to the library as well though. Because the entire store system (reducer tree) <strong>must</strong> be pure, you have to separate out impure, asynchronous and non-deterministic work. This works ok for some types of apps, but if you do a lot of async work, you can easily end up having half of your app logic outside of Redux in <a href=\"https://redux-saga.js.org/\" target=\"_blank\" rel=\"external\">Sagas</a> or <a href=\"http://redux.js.org/docs/advanced/AsyncActions.html#async-action-creators\" target=\"_blank\" rel=\"external\">Thunks</a>. Instead, it can be much easier and clearer to write these types of apps using a state management system which doesn’t have these limitations.</p>\n<p>Using an external state store often makes using React much easier and cleaner. Redux is an available option, but I’d recommend taking a look at some other tools as well:</p>\n<ul>\n<li>Just use JavaScript!<ul>\n<li><a href=\"https://jsfiddle.net/samsch/skom7z2e/\" target=\"_blank\" rel=\"external\">Over simplified example</a></li>\n<li><a href=\"https://jsfiddle.net/samsch/nsdrt8r4/\" target=\"_blank\" rel=\"external\">Basic example</a></li>\n<li><a href=\"https://jsfiddle.net/samsch/8erd7m9m/\" target=\"_blank\" rel=\"external\">More advanced example</a></li>\n<li>Roll your own library! (e.g., I created <a href=\"https://github.com/samsch/subscribe-store/\" target=\"_blank\" rel=\"external\">subscribe-store</a>)</li>\n</ul>\n</li>\n<li>Reactive programming!<ul>\n<li><a href=\"https://github.com/rikutiira/react-frp-todomvc\" target=\"_blank\" rel=\"external\">Tightly integrated with React</a></li>\n<li>You can also directly use reactive libraries like <a href=\"https://github.com/Reactive-Extensions/RxJS\" target=\"_blank\" rel=\"external\">RxJS</a>, <a href=\"https://rpominov.github.io/kefir/\" target=\"_blank\" rel=\"external\">Kefir</a> and <a href=\"https://baconjs.github.io/\" target=\"_blank\" rel=\"external\">Bacon</a>; where you would subscribe and pass props similar to the Just use JavaScript examples above.</li>\n</ul>\n</li>\n<li>Use older model libraries like <a href=\"https://reactjs.org/docs/integrating-with-other-libraries.html#using-backbone-models-in-react-components\" target=\"_blank\" rel=\"external\">Backbone</a><ul>\n<li><em>Note that using backbone isn’t really recommend by most people these days, but this provides a decent example of using a model that wasn’t designed around React</em></li>\n</ul>\n</li>\n<li>Other React-focused state management libraries<ul>\n<li><a href=\"https://mobx.js.org/\" target=\"_blank\" rel=\"external\">MobX</a></li>\n<li>A search for “react state management library” on Google will turn up many less-known libraries (as well as some dead libraries, such as <a href=\"https://github.com/martyjs/marty#marty-is-no-longer-actively-maintained-use-alt-or-redux-instead-more-info\" target=\"_blank\" rel=\"external\">marty.js</a>)</li>\n</ul>\n</li>\n</ul>\n"},{"title":"Getting Started with React (Webpack v1)","date":"2016-07-04T19:10:16.000Z","_content":"# Newer version available!\n\nSince originally written, Webpack released version 2. There are some changes to the configuration, and we no longer need to setup the define plugin ourselves for production mode.\n\nI've updated the guide, but I'm leaving this version here for historical purposes. All new projects should follow along with the new [Getting Started with React](https://samsch.org/2017/04/21/getting-started-with-react/).\n\nThe original Githup repo is also updated for the new guide. You can view the final result as it was for this version of the guide in the [git history](https://github.com/samsch/basic-react/tree/034c6eb9df309afd03806978c1326545ef64bc0d).\n\n# Original guide for Webpack v1\n\nThis will be the fast course to get a productive React development flow going. The only real prerequisite (besides a working computer and internet connection) is having a recent version of Node.js installed (as written, this is version 6.2.2, and this may work in versions 4 and 5).\n\nWhat this guide does not do is teach you Javascript or React. This just gets the environment in place.\n\n## Let's go!\nFirst thing to do is create your new project folder (I'll be using `react-project` in this guide), and run `npm init`. The requested information doesn't directly impact what we are going to be doing, so use whatever values you want.\n\nWe need some an html page to attach our app to, so create a `public/ folder`, and inside, create `index.html`. Paste this content into it:\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Basic React App</title>\n</head>\n<body>\n    <div id=\"app\"></div>\n    <script src=\"bundle.js\"></script>\n</body>\n</html>\n```\nIf you are looking at this and saying, \"man, that's a pretty sparse web page\", well, you're right. For a \"real\" app, you are going to want to put your extra meta tags in, maybe Google Analytics, a link to your favicon, and whatever else you need. We'll get to the content next.\n\n### Application source\n\nCreate a `src/` folder in the root of your project. All of your project specific source will be in this folder. For now, just create a `main.js` file in `src/`, and copy these contents into it:\n```js\nconst React = require('react');\nconst ReactDOM = require('react-dom');\n\nReactDOM.render(\n    <h1>Hello, world!</h1>,\n    document.getElementById('app')\n);\n```\n\nSo now your project folder should look like this:\n```\n- react-project\n |- package.json\n |- src/\n | |- main.js\n |- public/\n   |- index.html\n```\n\nWell, we can see from above that we need at least a few dependencies from NPM installed, so lets get started on those.\n\nRun `npm install --save react react-dom`.\n\nThe `react` package is the ReactJS library, and `react-dom` is a sister library which lets you render a React virtual DOM to the real DOM.\n\nThat actually covers the entire source of the application. Now all we need to do is build it.\n\n### Setting up Webpack\n\nSo, we primarily need two tools for building a React application: Webpack, and Babel.\n\nBabel is a Javascript compiler (sometimes called a transpiler). It takes JSX and modern (ES2015, ES2016, etc) Javascript syntax, and compiles it to ES5 Javascript, which allows your modern code to run in older browsers (generally IE9+, but with some extra effort, IE8 as well).\n\nWebpack is a module bundler. You give it an entry point file which uses CommonJS (which is the same syntax that Node uses for its modules), and it finds and \"bundles\" all the required files into a single file, which you can then include in your webpage.\n\nSo, lets install Webpack and Babel. Run `npm install --save-dev webpack babel-core babel-loader babel-polyfill`. Wait, what is babel-loader? Webpack plugins are called loaders. babel-loader is then the Webpack plugin which allows Babel to be run against the files to be bundled. And babel-polyfill? That's to fill in additions to Javascript in ES2015+ that do not require new syntax, such as methods like `Object.assign` and objects like `Promise`.\n\n\"That's it right? now we just run `webpack` and we're done, right?\" Not quite.\n\nOur next step is to configure webpack. Technically, we could forgo configuring, and just use command line arguments to the webpack cli interface. That would look something like `webpack src/main.js public/bundle.js --module-bind 'js=babel'`. However, using a configuration file is much more expressive, gives you more options, and is easier to maintain. So create `webpack.config.js` in the root of your project, and copy this into it:\n```js\nconst webpack = require('webpack');\nconst path = require('path');\n\nconst TARGET = process.env.npm_lifecycle_event;\nconst BUILD_DIR = path.resolve(__dirname, 'public');\nconst APP_DIR = path.resolve(__dirname, 'src/');\n\nconst config = {\n    entry: ['babel-polyfill', APP_DIR + '/main.js'],\n    output: {\n        path: BUILD_DIR,\n        filename: 'bundle.js'\n    },\n    module : {\n        loaders : [\n            {\n                test : /\\.jsx?/,\n                include : APP_DIR,\n                loader : 'babel'\n            }\n        ]\n    },\n    plugins: [],\n};\n\nif(TARGET === 'build') {\n    config.plugins.push(\n        (new webpack.DefinePlugin({\n            'process.env': {\n              'NODE_ENV': JSON.stringify('production')\n            }\n        }))\n    );\n}\n\nmodule.exports = config;\n```\nWow, that's a lot of configuration for a simple app! Let's take a closer look though. The first two lines are just requiring Webpack and the Node \"path\" module, and two the next three lines are just setting of some constants. This line:\n```js\nconst TARGET = process.env.npm_lifecycle_event;\n```\nPulls in the name of the npm script command. I'll get back to this, but for now, just remember something about \"TARGET\".\n\nNext, we have the actual configuration for Webpack. One nice point to note is that Webpack's configuration file is a Javascript file, not JSON like many others are. In our configuration we set the `entry` property, which is the file that Webpack starts at (more on that in a moment); the `output`, which is where Webpack saves the compiled code; the `modules` property, which I'll get to next; and `plugins`, which defaults to empty.\n\nThe `entry` configuration can take a string, array, or object. If you use a string, it should point at the single file that starts your application. If you use an array, Webpack will concatenate the files. Using an object allows you to have multiple entry points, which is for building multiple separate apps. In our case, we need our main.js file and babel-polyfill (which is loaded first).\n\nOur module property has a loader property, which is an array of the defined loaders. For now, we are just defining babel-loader. `test` is a regex to match against file extensions. I'm using pattern which matches `.js` and `.jsx` files. You could also choose to set it to only compile files with the JSX extension, by using `/\\.jsx/`, or if you decide not to use .jsx at all, just use `/\\.js/` to .js files. The `include` property tell Webpack that you only want to compile files in a specific folder. This is because you should never need to compile files from `node_modules`, since libraries should already be compiled with Babel (if they needed to be). This only stops Webpack from running Babel on files outside of APP_DIR, it doesn't stop Webpack from bundling those files into the output. Our `loader` is Babel. Webpack knows that `babel` means it should use the loader from package `babel-loader`.\n\nThe `plugins` property is an array of Webpack plugins and their own configuration. What we are doing is checking the value of TARGET for 'build', which is our production build command. If set, we setup one of the built-in Webpack plugins which defines an environment variable. This is the Webpack configuration method for setting an environment variable, the other common way to do this is by setting vars before `webpack` in the NPM script (or on the command line directly). In this case, both methods are viable, but I prefer to keep it in my config file.\n\nThe last bit is simply exporting the configuration. By default, when Webpack runs, it looks for `webpack.config.js` and `include()`'s it.\n\nAnd that's it for our Webpack configuration. Now we just need to add our command to package.json:\n```json\n{\n  ...\n  \"scripts\": {\n    ...\n    \"dev\": \"webpack -d --watch\",\n    \"build\": \"webpack -p\"\n  },\n  ...\n}\n```\nWe add two npm scripts, \"dev\" and \"build\". These are the command which will become the TARGET from earlier. \"dev\" will run Webpack with \"-d --watch\", which sets webpack in debug mode (more verbose, and outputs code maps for the browser), and in watch mode, which means it continuously runs, re-compiling whenever a require()'d file changes. \"build\" runs Webpack with \"-p\", which enables production mode. In production mode, the output is uglified (using Uglify). For us, with our bit of configuration that watches for the TARGET to be \"build\", we also set the NODE_ENV variable to be \"production\", which tells React not to include it's debugging tools (which lets it run faster, and spill less in production if there is an error).\n\n### Setup Babel\n\nOk, we're almost there. We have everything in place except for a little bit of Babel configuration. This one is easy. Create `.babelrc` in your project root, and copy this into it:\n```json\n{\n    \"presets\" : [\"latest\", \"react\"]\n}\n```\nWhat this does is tell Babel to compile ES2015+ and JSX to ES5 Javascript. This has only been necessary since the Babel maintainers decided to take a \"batteries not included\" approach with Babel 6v. These preset also don't come with Babel, so install them with `npm install --save-dev babel-preset-latest babel-preset-react`.\n\n### Run!\n\nThat pretty much covers it. And now you know why the React workflow is notorious for being difficult to setup. While it's not actually that complex, there are many steps to the process, at least the first time through.\n\nSo, finally, to start your development environment, run `npm run dev`. You should see some output from Webpack, and two more files should appear in `public/`: `bundle.js` and `bundle.js.map`.\n\nNow you just need a server to get these files into your browser. My go-to mini-server is `http-server`, available with npm. I install very few npm packages globally, but this is one. Install it with `npm install -g http-server`, then run it from your project root with `http-server public`. Now you should be able to visit `localhost:8080` in your browser, and see the web app you just created!\n\n## Just give me the final product already\n\n[Here it is, the whole thing wrapped up in a Github Repository.](https://github.com/samsch/basic-react)\n","source":"_posts/2016-07-04-Getting-started-with-React.md","raw":"---\ntitle: Getting Started with React (Webpack v1)\ndate: 2016-07-04 15:10:16\ntags:\n- React\n- Webpack\n- developer experience\n- js\n---\n# Newer version available!\n\nSince originally written, Webpack released version 2. There are some changes to the configuration, and we no longer need to setup the define plugin ourselves for production mode.\n\nI've updated the guide, but I'm leaving this version here for historical purposes. All new projects should follow along with the new [Getting Started with React](https://samsch.org/2017/04/21/getting-started-with-react/).\n\nThe original Githup repo is also updated for the new guide. You can view the final result as it was for this version of the guide in the [git history](https://github.com/samsch/basic-react/tree/034c6eb9df309afd03806978c1326545ef64bc0d).\n\n# Original guide for Webpack v1\n\nThis will be the fast course to get a productive React development flow going. The only real prerequisite (besides a working computer and internet connection) is having a recent version of Node.js installed (as written, this is version 6.2.2, and this may work in versions 4 and 5).\n\nWhat this guide does not do is teach you Javascript or React. This just gets the environment in place.\n\n## Let's go!\nFirst thing to do is create your new project folder (I'll be using `react-project` in this guide), and run `npm init`. The requested information doesn't directly impact what we are going to be doing, so use whatever values you want.\n\nWe need some an html page to attach our app to, so create a `public/ folder`, and inside, create `index.html`. Paste this content into it:\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Basic React App</title>\n</head>\n<body>\n    <div id=\"app\"></div>\n    <script src=\"bundle.js\"></script>\n</body>\n</html>\n```\nIf you are looking at this and saying, \"man, that's a pretty sparse web page\", well, you're right. For a \"real\" app, you are going to want to put your extra meta tags in, maybe Google Analytics, a link to your favicon, and whatever else you need. We'll get to the content next.\n\n### Application source\n\nCreate a `src/` folder in the root of your project. All of your project specific source will be in this folder. For now, just create a `main.js` file in `src/`, and copy these contents into it:\n```js\nconst React = require('react');\nconst ReactDOM = require('react-dom');\n\nReactDOM.render(\n    <h1>Hello, world!</h1>,\n    document.getElementById('app')\n);\n```\n\nSo now your project folder should look like this:\n```\n- react-project\n |- package.json\n |- src/\n | |- main.js\n |- public/\n   |- index.html\n```\n\nWell, we can see from above that we need at least a few dependencies from NPM installed, so lets get started on those.\n\nRun `npm install --save react react-dom`.\n\nThe `react` package is the ReactJS library, and `react-dom` is a sister library which lets you render a React virtual DOM to the real DOM.\n\nThat actually covers the entire source of the application. Now all we need to do is build it.\n\n### Setting up Webpack\n\nSo, we primarily need two tools for building a React application: Webpack, and Babel.\n\nBabel is a Javascript compiler (sometimes called a transpiler). It takes JSX and modern (ES2015, ES2016, etc) Javascript syntax, and compiles it to ES5 Javascript, which allows your modern code to run in older browsers (generally IE9+, but with some extra effort, IE8 as well).\n\nWebpack is a module bundler. You give it an entry point file which uses CommonJS (which is the same syntax that Node uses for its modules), and it finds and \"bundles\" all the required files into a single file, which you can then include in your webpage.\n\nSo, lets install Webpack and Babel. Run `npm install --save-dev webpack babel-core babel-loader babel-polyfill`. Wait, what is babel-loader? Webpack plugins are called loaders. babel-loader is then the Webpack plugin which allows Babel to be run against the files to be bundled. And babel-polyfill? That's to fill in additions to Javascript in ES2015+ that do not require new syntax, such as methods like `Object.assign` and objects like `Promise`.\n\n\"That's it right? now we just run `webpack` and we're done, right?\" Not quite.\n\nOur next step is to configure webpack. Technically, we could forgo configuring, and just use command line arguments to the webpack cli interface. That would look something like `webpack src/main.js public/bundle.js --module-bind 'js=babel'`. However, using a configuration file is much more expressive, gives you more options, and is easier to maintain. So create `webpack.config.js` in the root of your project, and copy this into it:\n```js\nconst webpack = require('webpack');\nconst path = require('path');\n\nconst TARGET = process.env.npm_lifecycle_event;\nconst BUILD_DIR = path.resolve(__dirname, 'public');\nconst APP_DIR = path.resolve(__dirname, 'src/');\n\nconst config = {\n    entry: ['babel-polyfill', APP_DIR + '/main.js'],\n    output: {\n        path: BUILD_DIR,\n        filename: 'bundle.js'\n    },\n    module : {\n        loaders : [\n            {\n                test : /\\.jsx?/,\n                include : APP_DIR,\n                loader : 'babel'\n            }\n        ]\n    },\n    plugins: [],\n};\n\nif(TARGET === 'build') {\n    config.plugins.push(\n        (new webpack.DefinePlugin({\n            'process.env': {\n              'NODE_ENV': JSON.stringify('production')\n            }\n        }))\n    );\n}\n\nmodule.exports = config;\n```\nWow, that's a lot of configuration for a simple app! Let's take a closer look though. The first two lines are just requiring Webpack and the Node \"path\" module, and two the next three lines are just setting of some constants. This line:\n```js\nconst TARGET = process.env.npm_lifecycle_event;\n```\nPulls in the name of the npm script command. I'll get back to this, but for now, just remember something about \"TARGET\".\n\nNext, we have the actual configuration for Webpack. One nice point to note is that Webpack's configuration file is a Javascript file, not JSON like many others are. In our configuration we set the `entry` property, which is the file that Webpack starts at (more on that in a moment); the `output`, which is where Webpack saves the compiled code; the `modules` property, which I'll get to next; and `plugins`, which defaults to empty.\n\nThe `entry` configuration can take a string, array, or object. If you use a string, it should point at the single file that starts your application. If you use an array, Webpack will concatenate the files. Using an object allows you to have multiple entry points, which is for building multiple separate apps. In our case, we need our main.js file and babel-polyfill (which is loaded first).\n\nOur module property has a loader property, which is an array of the defined loaders. For now, we are just defining babel-loader. `test` is a regex to match against file extensions. I'm using pattern which matches `.js` and `.jsx` files. You could also choose to set it to only compile files with the JSX extension, by using `/\\.jsx/`, or if you decide not to use .jsx at all, just use `/\\.js/` to .js files. The `include` property tell Webpack that you only want to compile files in a specific folder. This is because you should never need to compile files from `node_modules`, since libraries should already be compiled with Babel (if they needed to be). This only stops Webpack from running Babel on files outside of APP_DIR, it doesn't stop Webpack from bundling those files into the output. Our `loader` is Babel. Webpack knows that `babel` means it should use the loader from package `babel-loader`.\n\nThe `plugins` property is an array of Webpack plugins and their own configuration. What we are doing is checking the value of TARGET for 'build', which is our production build command. If set, we setup one of the built-in Webpack plugins which defines an environment variable. This is the Webpack configuration method for setting an environment variable, the other common way to do this is by setting vars before `webpack` in the NPM script (or on the command line directly). In this case, both methods are viable, but I prefer to keep it in my config file.\n\nThe last bit is simply exporting the configuration. By default, when Webpack runs, it looks for `webpack.config.js` and `include()`'s it.\n\nAnd that's it for our Webpack configuration. Now we just need to add our command to package.json:\n```json\n{\n  ...\n  \"scripts\": {\n    ...\n    \"dev\": \"webpack -d --watch\",\n    \"build\": \"webpack -p\"\n  },\n  ...\n}\n```\nWe add two npm scripts, \"dev\" and \"build\". These are the command which will become the TARGET from earlier. \"dev\" will run Webpack with \"-d --watch\", which sets webpack in debug mode (more verbose, and outputs code maps for the browser), and in watch mode, which means it continuously runs, re-compiling whenever a require()'d file changes. \"build\" runs Webpack with \"-p\", which enables production mode. In production mode, the output is uglified (using Uglify). For us, with our bit of configuration that watches for the TARGET to be \"build\", we also set the NODE_ENV variable to be \"production\", which tells React not to include it's debugging tools (which lets it run faster, and spill less in production if there is an error).\n\n### Setup Babel\n\nOk, we're almost there. We have everything in place except for a little bit of Babel configuration. This one is easy. Create `.babelrc` in your project root, and copy this into it:\n```json\n{\n    \"presets\" : [\"latest\", \"react\"]\n}\n```\nWhat this does is tell Babel to compile ES2015+ and JSX to ES5 Javascript. This has only been necessary since the Babel maintainers decided to take a \"batteries not included\" approach with Babel 6v. These preset also don't come with Babel, so install them with `npm install --save-dev babel-preset-latest babel-preset-react`.\n\n### Run!\n\nThat pretty much covers it. And now you know why the React workflow is notorious for being difficult to setup. While it's not actually that complex, there are many steps to the process, at least the first time through.\n\nSo, finally, to start your development environment, run `npm run dev`. You should see some output from Webpack, and two more files should appear in `public/`: `bundle.js` and `bundle.js.map`.\n\nNow you just need a server to get these files into your browser. My go-to mini-server is `http-server`, available with npm. I install very few npm packages globally, but this is one. Install it with `npm install -g http-server`, then run it from your project root with `http-server public`. Now you should be able to visit `localhost:8080` in your browser, and see the web app you just created!\n\n## Just give me the final product already\n\n[Here it is, the whole thing wrapped up in a Github Repository.](https://github.com/samsch/basic-react)\n","slug":"Getting-started-with-React","published":1,"updated":"2018-08-30T18:30:43.414Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckixl4zvw0005jku3w68s38k7","content":"<h1 id=\"Newer-version-available\"><a href=\"#Newer-version-available\" class=\"headerlink\" title=\"Newer version available!\"></a>Newer version available!</h1><p>Since originally written, Webpack released version 2. There are some changes to the configuration, and we no longer need to setup the define plugin ourselves for production mode.</p>\n<p>I’ve updated the guide, but I’m leaving this version here for historical purposes. All new projects should follow along with the new <a href=\"https://samsch.org/2017/04/21/getting-started-with-react/\">Getting Started with React</a>.</p>\n<p>The original Githup repo is also updated for the new guide. You can view the final result as it was for this version of the guide in the <a href=\"https://github.com/samsch/basic-react/tree/034c6eb9df309afd03806978c1326545ef64bc0d\" target=\"_blank\" rel=\"external\">git history</a>.</p>\n<h1 id=\"Original-guide-for-Webpack-v1\"><a href=\"#Original-guide-for-Webpack-v1\" class=\"headerlink\" title=\"Original guide for Webpack v1\"></a>Original guide for Webpack v1</h1><p>This will be the fast course to get a productive React development flow going. The only real prerequisite (besides a working computer and internet connection) is having a recent version of Node.js installed (as written, this is version 6.2.2, and this may work in versions 4 and 5).</p>\n<p>What this guide does not do is teach you Javascript or React. This just gets the environment in place.</p>\n<h2 id=\"Let’s-go\"><a href=\"#Let’s-go\" class=\"headerlink\" title=\"Let’s go!\"></a>Let’s go!</h2><p>First thing to do is create your new project folder (I’ll be using <code>react-project</code> in this guide), and run <code>npm init</code>. The requested information doesn’t directly impact what we are going to be doing, so use whatever values you want.</p>\n<p>We need some an html page to attach our app to, so create a <code>public/ folder</code>, and inside, create <code>index.html</code>. Paste this content into it:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Basic React App<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"bundle.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>If you are looking at this and saying, “man, that’s a pretty sparse web page”, well, you’re right. For a “real” app, you are going to want to put your extra meta tags in, maybe Google Analytics, a link to your favicon, and whatever else you need. We’ll get to the content next.</p>\n<h3 id=\"Application-source\"><a href=\"#Application-source\" class=\"headerlink\" title=\"Application source\"></a>Application source</h3><p>Create a <code>src/</code> folder in the root of your project. All of your project specific source will be in this folder. For now, just create a <code>main.js</code> file in <code>src/</code>, and copy these contents into it:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> React = <span class=\"built_in\">require</span>(<span class=\"string\">'react'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> ReactDOM = <span class=\"built_in\">require</span>(<span class=\"string\">'react-dom'</span>);</div><div class=\"line\"></div><div class=\"line\">ReactDOM.render(</div><div class=\"line\">    &lt;h1&gt;Hello, world!<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>,</div><div class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'app'</span>)</div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n<p>So now your project folder should look like this:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">- react-project</div><div class=\"line\"> |- package.json</div><div class=\"line\"> |- src/</div><div class=\"line\"> | |- main.js</div><div class=\"line\"> |- public/</div><div class=\"line\">   |- index.html</div></pre></td></tr></table></figure></p>\n<p>Well, we can see from above that we need at least a few dependencies from NPM installed, so lets get started on those.</p>\n<p>Run <code>npm install --save react react-dom</code>.</p>\n<p>The <code>react</code> package is the ReactJS library, and <code>react-dom</code> is a sister library which lets you render a React virtual DOM to the real DOM.</p>\n<p>That actually covers the entire source of the application. Now all we need to do is build it.</p>\n<h3 id=\"Setting-up-Webpack\"><a href=\"#Setting-up-Webpack\" class=\"headerlink\" title=\"Setting up Webpack\"></a>Setting up Webpack</h3><p>So, we primarily need two tools for building a React application: Webpack, and Babel.</p>\n<p>Babel is a Javascript compiler (sometimes called a transpiler). It takes JSX and modern (ES2015, ES2016, etc) Javascript syntax, and compiles it to ES5 Javascript, which allows your modern code to run in older browsers (generally IE9+, but with some extra effort, IE8 as well).</p>\n<p>Webpack is a module bundler. You give it an entry point file which uses CommonJS (which is the same syntax that Node uses for its modules), and it finds and “bundles” all the required files into a single file, which you can then include in your webpage.</p>\n<p>So, lets install Webpack and Babel. Run <code>npm install --save-dev webpack babel-core babel-loader babel-polyfill</code>. Wait, what is babel-loader? Webpack plugins are called loaders. babel-loader is then the Webpack plugin which allows Babel to be run against the files to be bundled. And babel-polyfill? That’s to fill in additions to Javascript in ES2015+ that do not require new syntax, such as methods like <code>Object.assign</code> and objects like <code>Promise</code>.</p>\n<p>“That’s it right? now we just run <code>webpack</code> and we’re done, right?” Not quite.</p>\n<p>Our next step is to configure webpack. Technically, we could forgo configuring, and just use command line arguments to the webpack cli interface. That would look something like <code>webpack src/main.js public/bundle.js --module-bind &#39;js=babel&#39;</code>. However, using a configuration file is much more expressive, gives you more options, and is easier to maintain. So create <code>webpack.config.js</code> in the root of your project, and copy this into it:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> TARGET = process.env.npm_lifecycle_event;</div><div class=\"line\"><span class=\"keyword\">const</span> BUILD_DIR = path.resolve(__dirname, <span class=\"string\">'public'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> APP_DIR = path.resolve(__dirname, <span class=\"string\">'src/'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> config = &#123;</div><div class=\"line\">    entry: [<span class=\"string\">'babel-polyfill'</span>, APP_DIR + <span class=\"string\">'/main.js'</span>],</div><div class=\"line\">    output: &#123;</div><div class=\"line\">        path: BUILD_DIR,</div><div class=\"line\">        filename: <span class=\"string\">'bundle.js'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"built_in\">module</span> : &#123;</div><div class=\"line\">        loaders : [</div><div class=\"line\">            &#123;</div><div class=\"line\">                test : <span class=\"regexp\">/\\.jsx?/</span>,</div><div class=\"line\">                include : APP_DIR,</div><div class=\"line\">                loader : <span class=\"string\">'babel'</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;,</div><div class=\"line\">    plugins: [],</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span>(TARGET === <span class=\"string\">'build'</span>) &#123;</div><div class=\"line\">    config.plugins.push(</div><div class=\"line\">        (<span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;</div><div class=\"line\">            <span class=\"string\">'process.env'</span>: &#123;</div><div class=\"line\">              <span class=\"string\">'NODE_ENV'</span>: <span class=\"built_in\">JSON</span>.stringify(<span class=\"string\">'production'</span>)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;))</div><div class=\"line\">    );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = config;</div></pre></td></tr></table></figure></p>\n<p>Wow, that’s a lot of configuration for a simple app! Let’s take a closer look though. The first two lines are just requiring Webpack and the Node “path” module, and two the next three lines are just setting of some constants. This line:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> TARGET = process.env.npm_lifecycle_event;</div></pre></td></tr></table></figure></p>\n<p>Pulls in the name of the npm script command. I’ll get back to this, but for now, just remember something about “TARGET”.</p>\n<p>Next, we have the actual configuration for Webpack. One nice point to note is that Webpack’s configuration file is a Javascript file, not JSON like many others are. In our configuration we set the <code>entry</code> property, which is the file that Webpack starts at (more on that in a moment); the <code>output</code>, which is where Webpack saves the compiled code; the <code>modules</code> property, which I’ll get to next; and <code>plugins</code>, which defaults to empty.</p>\n<p>The <code>entry</code> configuration can take a string, array, or object. If you use a string, it should point at the single file that starts your application. If you use an array, Webpack will concatenate the files. Using an object allows you to have multiple entry points, which is for building multiple separate apps. In our case, we need our main.js file and babel-polyfill (which is loaded first).</p>\n<p>Our module property has a loader property, which is an array of the defined loaders. For now, we are just defining babel-loader. <code>test</code> is a regex to match against file extensions. I’m using pattern which matches <code>.js</code> and <code>.jsx</code> files. You could also choose to set it to only compile files with the JSX extension, by using <code>/\\.jsx/</code>, or if you decide not to use .jsx at all, just use <code>/\\.js/</code> to .js files. The <code>include</code> property tell Webpack that you only want to compile files in a specific folder. This is because you should never need to compile files from <code>node_modules</code>, since libraries should already be compiled with Babel (if they needed to be). This only stops Webpack from running Babel on files outside of APP_DIR, it doesn’t stop Webpack from bundling those files into the output. Our <code>loader</code> is Babel. Webpack knows that <code>babel</code> means it should use the loader from package <code>babel-loader</code>.</p>\n<p>The <code>plugins</code> property is an array of Webpack plugins and their own configuration. What we are doing is checking the value of TARGET for ‘build’, which is our production build command. If set, we setup one of the built-in Webpack plugins which defines an environment variable. This is the Webpack configuration method for setting an environment variable, the other common way to do this is by setting vars before <code>webpack</code> in the NPM script (or on the command line directly). In this case, both methods are viable, but I prefer to keep it in my config file.</p>\n<p>The last bit is simply exporting the configuration. By default, when Webpack runs, it looks for <code>webpack.config.js</code> and <code>include()</code>‘s it.</p>\n<p>And that’s it for our Webpack configuration. Now we just need to add our command to package.json:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  ...</div><div class=\"line\">  \"scripts\": &#123;</div><div class=\"line\">    ...</div><div class=\"line\">    \"dev\": \"webpack -d --watch\",</div><div class=\"line\">    \"build\": \"webpack -p\"</div><div class=\"line\">  &#125;,</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>We add two npm scripts, “dev” and “build”. These are the command which will become the TARGET from earlier. “dev” will run Webpack with “-d –watch”, which sets webpack in debug mode (more verbose, and outputs code maps for the browser), and in watch mode, which means it continuously runs, re-compiling whenever a require()’d file changes. “build” runs Webpack with “-p”, which enables production mode. In production mode, the output is uglified (using Uglify). For us, with our bit of configuration that watches for the TARGET to be “build”, we also set the NODE_ENV variable to be “production”, which tells React not to include it’s debugging tools (which lets it run faster, and spill less in production if there is an error).</p>\n<h3 id=\"Setup-Babel\"><a href=\"#Setup-Babel\" class=\"headerlink\" title=\"Setup Babel\"></a>Setup Babel</h3><p>Ok, we’re almost there. We have everything in place except for a little bit of Babel configuration. This one is easy. Create <code>.babelrc</code> in your project root, and copy this into it:<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"presets\"</span> : [<span class=\"string\">\"latest\"</span>, <span class=\"string\">\"react\"</span>]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>What this does is tell Babel to compile ES2015+ and JSX to ES5 Javascript. This has only been necessary since the Babel maintainers decided to take a “batteries not included” approach with Babel 6v. These preset also don’t come with Babel, so install them with <code>npm install --save-dev babel-preset-latest babel-preset-react</code>.</p>\n<h3 id=\"Run\"><a href=\"#Run\" class=\"headerlink\" title=\"Run!\"></a>Run!</h3><p>That pretty much covers it. And now you know why the React workflow is notorious for being difficult to setup. While it’s not actually that complex, there are many steps to the process, at least the first time through.</p>\n<p>So, finally, to start your development environment, run <code>npm run dev</code>. You should see some output from Webpack, and two more files should appear in <code>public/</code>: <code>bundle.js</code> and <code>bundle.js.map</code>.</p>\n<p>Now you just need a server to get these files into your browser. My go-to mini-server is <code>http-server</code>, available with npm. I install very few npm packages globally, but this is one. Install it with <code>npm install -g http-server</code>, then run it from your project root with <code>http-server public</code>. Now you should be able to visit <code>localhost:8080</code> in your browser, and see the web app you just created!</p>\n<h2 id=\"Just-give-me-the-final-product-already\"><a href=\"#Just-give-me-the-final-product-already\" class=\"headerlink\" title=\"Just give me the final product already\"></a>Just give me the final product already</h2><p><a href=\"https://github.com/samsch/basic-react\" target=\"_blank\" rel=\"external\">Here it is, the whole thing wrapped up in a Github Repository.</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Newer-version-available\"><a href=\"#Newer-version-available\" class=\"headerlink\" title=\"Newer version available!\"></a>Newer version available!</h1><p>Since originally written, Webpack released version 2. There are some changes to the configuration, and we no longer need to setup the define plugin ourselves for production mode.</p>\n<p>I’ve updated the guide, but I’m leaving this version here for historical purposes. All new projects should follow along with the new <a href=\"https://samsch.org/2017/04/21/getting-started-with-react/\">Getting Started with React</a>.</p>\n<p>The original Githup repo is also updated for the new guide. You can view the final result as it was for this version of the guide in the <a href=\"https://github.com/samsch/basic-react/tree/034c6eb9df309afd03806978c1326545ef64bc0d\" target=\"_blank\" rel=\"external\">git history</a>.</p>\n<h1 id=\"Original-guide-for-Webpack-v1\"><a href=\"#Original-guide-for-Webpack-v1\" class=\"headerlink\" title=\"Original guide for Webpack v1\"></a>Original guide for Webpack v1</h1><p>This will be the fast course to get a productive React development flow going. The only real prerequisite (besides a working computer and internet connection) is having a recent version of Node.js installed (as written, this is version 6.2.2, and this may work in versions 4 and 5).</p>\n<p>What this guide does not do is teach you Javascript or React. This just gets the environment in place.</p>\n<h2 id=\"Let’s-go\"><a href=\"#Let’s-go\" class=\"headerlink\" title=\"Let’s go!\"></a>Let’s go!</h2><p>First thing to do is create your new project folder (I’ll be using <code>react-project</code> in this guide), and run <code>npm init</code>. The requested information doesn’t directly impact what we are going to be doing, so use whatever values you want.</p>\n<p>We need some an html page to attach our app to, so create a <code>public/ folder</code>, and inside, create <code>index.html</code>. Paste this content into it:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Basic React App<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"bundle.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>If you are looking at this and saying, “man, that’s a pretty sparse web page”, well, you’re right. For a “real” app, you are going to want to put your extra meta tags in, maybe Google Analytics, a link to your favicon, and whatever else you need. We’ll get to the content next.</p>\n<h3 id=\"Application-source\"><a href=\"#Application-source\" class=\"headerlink\" title=\"Application source\"></a>Application source</h3><p>Create a <code>src/</code> folder in the root of your project. All of your project specific source will be in this folder. For now, just create a <code>main.js</code> file in <code>src/</code>, and copy these contents into it:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> React = <span class=\"built_in\">require</span>(<span class=\"string\">'react'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> ReactDOM = <span class=\"built_in\">require</span>(<span class=\"string\">'react-dom'</span>);</div><div class=\"line\"></div><div class=\"line\">ReactDOM.render(</div><div class=\"line\">    &lt;h1&gt;Hello, world!<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>,</div><div class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'app'</span>)</div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n<p>So now your project folder should look like this:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">- react-project</div><div class=\"line\"> |- package.json</div><div class=\"line\"> |- src/</div><div class=\"line\"> | |- main.js</div><div class=\"line\"> |- public/</div><div class=\"line\">   |- index.html</div></pre></td></tr></table></figure></p>\n<p>Well, we can see from above that we need at least a few dependencies from NPM installed, so lets get started on those.</p>\n<p>Run <code>npm install --save react react-dom</code>.</p>\n<p>The <code>react</code> package is the ReactJS library, and <code>react-dom</code> is a sister library which lets you render a React virtual DOM to the real DOM.</p>\n<p>That actually covers the entire source of the application. Now all we need to do is build it.</p>\n<h3 id=\"Setting-up-Webpack\"><a href=\"#Setting-up-Webpack\" class=\"headerlink\" title=\"Setting up Webpack\"></a>Setting up Webpack</h3><p>So, we primarily need two tools for building a React application: Webpack, and Babel.</p>\n<p>Babel is a Javascript compiler (sometimes called a transpiler). It takes JSX and modern (ES2015, ES2016, etc) Javascript syntax, and compiles it to ES5 Javascript, which allows your modern code to run in older browsers (generally IE9+, but with some extra effort, IE8 as well).</p>\n<p>Webpack is a module bundler. You give it an entry point file which uses CommonJS (which is the same syntax that Node uses for its modules), and it finds and “bundles” all the required files into a single file, which you can then include in your webpage.</p>\n<p>So, lets install Webpack and Babel. Run <code>npm install --save-dev webpack babel-core babel-loader babel-polyfill</code>. Wait, what is babel-loader? Webpack plugins are called loaders. babel-loader is then the Webpack plugin which allows Babel to be run against the files to be bundled. And babel-polyfill? That’s to fill in additions to Javascript in ES2015+ that do not require new syntax, such as methods like <code>Object.assign</code> and objects like <code>Promise</code>.</p>\n<p>“That’s it right? now we just run <code>webpack</code> and we’re done, right?” Not quite.</p>\n<p>Our next step is to configure webpack. Technically, we could forgo configuring, and just use command line arguments to the webpack cli interface. That would look something like <code>webpack src/main.js public/bundle.js --module-bind &#39;js=babel&#39;</code>. However, using a configuration file is much more expressive, gives you more options, and is easier to maintain. So create <code>webpack.config.js</code> in the root of your project, and copy this into it:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> TARGET = process.env.npm_lifecycle_event;</div><div class=\"line\"><span class=\"keyword\">const</span> BUILD_DIR = path.resolve(__dirname, <span class=\"string\">'public'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> APP_DIR = path.resolve(__dirname, <span class=\"string\">'src/'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> config = &#123;</div><div class=\"line\">    entry: [<span class=\"string\">'babel-polyfill'</span>, APP_DIR + <span class=\"string\">'/main.js'</span>],</div><div class=\"line\">    output: &#123;</div><div class=\"line\">        path: BUILD_DIR,</div><div class=\"line\">        filename: <span class=\"string\">'bundle.js'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"built_in\">module</span> : &#123;</div><div class=\"line\">        loaders : [</div><div class=\"line\">            &#123;</div><div class=\"line\">                test : <span class=\"regexp\">/\\.jsx?/</span>,</div><div class=\"line\">                include : APP_DIR,</div><div class=\"line\">                loader : <span class=\"string\">'babel'</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;,</div><div class=\"line\">    plugins: [],</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span>(TARGET === <span class=\"string\">'build'</span>) &#123;</div><div class=\"line\">    config.plugins.push(</div><div class=\"line\">        (<span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;</div><div class=\"line\">            <span class=\"string\">'process.env'</span>: &#123;</div><div class=\"line\">              <span class=\"string\">'NODE_ENV'</span>: <span class=\"built_in\">JSON</span>.stringify(<span class=\"string\">'production'</span>)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;))</div><div class=\"line\">    );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = config;</div></pre></td></tr></table></figure></p>\n<p>Wow, that’s a lot of configuration for a simple app! Let’s take a closer look though. The first two lines are just requiring Webpack and the Node “path” module, and two the next three lines are just setting of some constants. This line:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> TARGET = process.env.npm_lifecycle_event;</div></pre></td></tr></table></figure></p>\n<p>Pulls in the name of the npm script command. I’ll get back to this, but for now, just remember something about “TARGET”.</p>\n<p>Next, we have the actual configuration for Webpack. One nice point to note is that Webpack’s configuration file is a Javascript file, not JSON like many others are. In our configuration we set the <code>entry</code> property, which is the file that Webpack starts at (more on that in a moment); the <code>output</code>, which is where Webpack saves the compiled code; the <code>modules</code> property, which I’ll get to next; and <code>plugins</code>, which defaults to empty.</p>\n<p>The <code>entry</code> configuration can take a string, array, or object. If you use a string, it should point at the single file that starts your application. If you use an array, Webpack will concatenate the files. Using an object allows you to have multiple entry points, which is for building multiple separate apps. In our case, we need our main.js file and babel-polyfill (which is loaded first).</p>\n<p>Our module property has a loader property, which is an array of the defined loaders. For now, we are just defining babel-loader. <code>test</code> is a regex to match against file extensions. I’m using pattern which matches <code>.js</code> and <code>.jsx</code> files. You could also choose to set it to only compile files with the JSX extension, by using <code>/\\.jsx/</code>, or if you decide not to use .jsx at all, just use <code>/\\.js/</code> to .js files. The <code>include</code> property tell Webpack that you only want to compile files in a specific folder. This is because you should never need to compile files from <code>node_modules</code>, since libraries should already be compiled with Babel (if they needed to be). This only stops Webpack from running Babel on files outside of APP_DIR, it doesn’t stop Webpack from bundling those files into the output. Our <code>loader</code> is Babel. Webpack knows that <code>babel</code> means it should use the loader from package <code>babel-loader</code>.</p>\n<p>The <code>plugins</code> property is an array of Webpack plugins and their own configuration. What we are doing is checking the value of TARGET for ‘build’, which is our production build command. If set, we setup one of the built-in Webpack plugins which defines an environment variable. This is the Webpack configuration method for setting an environment variable, the other common way to do this is by setting vars before <code>webpack</code> in the NPM script (or on the command line directly). In this case, both methods are viable, but I prefer to keep it in my config file.</p>\n<p>The last bit is simply exporting the configuration. By default, when Webpack runs, it looks for <code>webpack.config.js</code> and <code>include()</code>‘s it.</p>\n<p>And that’s it for our Webpack configuration. Now we just need to add our command to package.json:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  ...</div><div class=\"line\">  \"scripts\": &#123;</div><div class=\"line\">    ...</div><div class=\"line\">    \"dev\": \"webpack -d --watch\",</div><div class=\"line\">    \"build\": \"webpack -p\"</div><div class=\"line\">  &#125;,</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>We add two npm scripts, “dev” and “build”. These are the command which will become the TARGET from earlier. “dev” will run Webpack with “-d –watch”, which sets webpack in debug mode (more verbose, and outputs code maps for the browser), and in watch mode, which means it continuously runs, re-compiling whenever a require()’d file changes. “build” runs Webpack with “-p”, which enables production mode. In production mode, the output is uglified (using Uglify). For us, with our bit of configuration that watches for the TARGET to be “build”, we also set the NODE_ENV variable to be “production”, which tells React not to include it’s debugging tools (which lets it run faster, and spill less in production if there is an error).</p>\n<h3 id=\"Setup-Babel\"><a href=\"#Setup-Babel\" class=\"headerlink\" title=\"Setup Babel\"></a>Setup Babel</h3><p>Ok, we’re almost there. We have everything in place except for a little bit of Babel configuration. This one is easy. Create <code>.babelrc</code> in your project root, and copy this into it:<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"presets\"</span> : [<span class=\"string\">\"latest\"</span>, <span class=\"string\">\"react\"</span>]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>What this does is tell Babel to compile ES2015+ and JSX to ES5 Javascript. This has only been necessary since the Babel maintainers decided to take a “batteries not included” approach with Babel 6v. These preset also don’t come with Babel, so install them with <code>npm install --save-dev babel-preset-latest babel-preset-react</code>.</p>\n<h3 id=\"Run\"><a href=\"#Run\" class=\"headerlink\" title=\"Run!\"></a>Run!</h3><p>That pretty much covers it. And now you know why the React workflow is notorious for being difficult to setup. While it’s not actually that complex, there are many steps to the process, at least the first time through.</p>\n<p>So, finally, to start your development environment, run <code>npm run dev</code>. You should see some output from Webpack, and two more files should appear in <code>public/</code>: <code>bundle.js</code> and <code>bundle.js.map</code>.</p>\n<p>Now you just need a server to get these files into your browser. My go-to mini-server is <code>http-server</code>, available with npm. I install very few npm packages globally, but this is one. Install it with <code>npm install -g http-server</code>, then run it from your project root with <code>http-server public</code>. Now you should be able to visit <code>localhost:8080</code> in your browser, and see the web app you just created!</p>\n<h2 id=\"Just-give-me-the-final-product-already\"><a href=\"#Just-give-me-the-final-product-already\" class=\"headerlink\" title=\"Just give me the final product already\"></a>Just give me the final product already</h2><p><a href=\"https://github.com/samsch/basic-react\" target=\"_blank\" rel=\"external\">Here it is, the whole thing wrapped up in a Github Repository.</a></p>\n"},{"title":"Getting a blog started","date":"2016-09-19T23:58:27.000Z","_content":"This could just as well be titled *Trouble with blogging software*.\n\nIf you're reading this, then at some point I had success. Let me tell you about some of the trials along the way.\n\nMy first taste of server-side programming was in PHP. At the same time, I was taking a basic theming course for [Wordpress](https://wordpress.org). So setting up a Wordpress (.org or .com) site would be easy, and I could probably be done with it in less than an hour if I didn't get distracted by theming.\n\n## Wordpress\n\nI have worked with PHP and Wordpress though, and know that I want to be part of the movement away from them (find me in IRC sometime as samsch (newer) or samssh (older)). So I struck out on the journey to find an alternative. There are many, and I've tried a few. I'm actually writing this in Markdown as part of a [Hexo](https://hexo.io/) blog right now.\n\n## Hexo\n\nSo, if I'm writing this is Hexo, why would I not just use it for my blog? Hexo has a distinct lack of a comment system. Hexo is very nice, works well, is documented well, but, is still a *static* blog framework. So no login, no comments, no true CMS.\n\n## Ghost\nThe next step of the journey was a run at [Ghost](https://ghost.org). I didn't make it very far without the first snag. Ghost doesn't currently support Node latest. Ghost as of right now (2016-09-19) \"supports LTS Node versions: ~**0.10.0** || ~**0.12.0** || ^**4.2.0**\". Node latest is 6.6.0, and Node 6 will become LTS (planned) next month. Otherwise Ghost has looked very good so far: It's based on Node, has a deployment system built out, uses stable (if not quite modern) tools (Ember.js and Handlebars), and is fully open source, and run by a company touting 100% transparency. So, not supporting the latest version of Node isn't a huge issue, but coupled with Ember and Handlebars being a bit dated, I've decided to try other options before coming back.\n\n## Random blogs I didn't try\n- [softare]\n - [Reasons I skipped it]\n- [Anchor](https://anchorcms.com/)\n - PHP*, GPL\n- [Nikola](https://getnikola.com/)\n - Python*\n- [Bolt](https://bolt.cm/)\n - PHP\n\n## Bolt\n\nIf Bolt was Node or another language which I want to learn and code in, then I would try it right now. However, since I don't actually want to setup a PHP server, I'm going to put this off for later. Bolt is driven by Silex/Symfony, which is (in my opinion) the best way to build a site in PHP. But right now I'm still holding out hope for a blogging software based either on Node, or a language that I have interest in learning.\n\nIt's now getting late, time to go with Hexo for a little longer...\n","source":"_posts/2016-09-19-blog.md","raw":"---\ntitle: Getting a blog started\ndate: 2016-09-19 19:58:27\ntags:\n- developer experience\n- deployment\n- node\n- hexo\n- ghost\n---\nThis could just as well be titled *Trouble with blogging software*.\n\nIf you're reading this, then at some point I had success. Let me tell you about some of the trials along the way.\n\nMy first taste of server-side programming was in PHP. At the same time, I was taking a basic theming course for [Wordpress](https://wordpress.org). So setting up a Wordpress (.org or .com) site would be easy, and I could probably be done with it in less than an hour if I didn't get distracted by theming.\n\n## Wordpress\n\nI have worked with PHP and Wordpress though, and know that I want to be part of the movement away from them (find me in IRC sometime as samsch (newer) or samssh (older)). So I struck out on the journey to find an alternative. There are many, and I've tried a few. I'm actually writing this in Markdown as part of a [Hexo](https://hexo.io/) blog right now.\n\n## Hexo\n\nSo, if I'm writing this is Hexo, why would I not just use it for my blog? Hexo has a distinct lack of a comment system. Hexo is very nice, works well, is documented well, but, is still a *static* blog framework. So no login, no comments, no true CMS.\n\n## Ghost\nThe next step of the journey was a run at [Ghost](https://ghost.org). I didn't make it very far without the first snag. Ghost doesn't currently support Node latest. Ghost as of right now (2016-09-19) \"supports LTS Node versions: ~**0.10.0** || ~**0.12.0** || ^**4.2.0**\". Node latest is 6.6.0, and Node 6 will become LTS (planned) next month. Otherwise Ghost has looked very good so far: It's based on Node, has a deployment system built out, uses stable (if not quite modern) tools (Ember.js and Handlebars), and is fully open source, and run by a company touting 100% transparency. So, not supporting the latest version of Node isn't a huge issue, but coupled with Ember and Handlebars being a bit dated, I've decided to try other options before coming back.\n\n## Random blogs I didn't try\n- [softare]\n - [Reasons I skipped it]\n- [Anchor](https://anchorcms.com/)\n - PHP*, GPL\n- [Nikola](https://getnikola.com/)\n - Python*\n- [Bolt](https://bolt.cm/)\n - PHP\n\n## Bolt\n\nIf Bolt was Node or another language which I want to learn and code in, then I would try it right now. However, since I don't actually want to setup a PHP server, I'm going to put this off for later. Bolt is driven by Silex/Symfony, which is (in my opinion) the best way to build a site in PHP. But right now I'm still holding out hope for a blogging software based either on Node, or a language that I have interest in learning.\n\nIt's now getting late, time to go with Hexo for a little longer...\n","slug":"blog","published":1,"updated":"2016-09-20T02:29:27.279Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckixl4zvx0006jku39shksd9g","content":"<p>This could just as well be titled <em>Trouble with blogging software</em>.</p>\n<p>If you’re reading this, then at some point I had success. Let me tell you about some of the trials along the way.</p>\n<p>My first taste of server-side programming was in PHP. At the same time, I was taking a basic theming course for <a href=\"https://wordpress.org\" target=\"_blank\" rel=\"external\">Wordpress</a>. So setting up a Wordpress (.org or .com) site would be easy, and I could probably be done with it in less than an hour if I didn’t get distracted by theming.</p>\n<h2 id=\"Wordpress\"><a href=\"#Wordpress\" class=\"headerlink\" title=\"Wordpress\"></a>Wordpress</h2><p>I have worked with PHP and Wordpress though, and know that I want to be part of the movement away from them (find me in IRC sometime as samsch (newer) or samssh (older)). So I struck out on the journey to find an alternative. There are many, and I’ve tried a few. I’m actually writing this in Markdown as part of a <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a> blog right now.</p>\n<h2 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h2><p>So, if I’m writing this is Hexo, why would I not just use it for my blog? Hexo has a distinct lack of a comment system. Hexo is very nice, works well, is documented well, but, is still a <em>static</em> blog framework. So no login, no comments, no true CMS.</p>\n<h2 id=\"Ghost\"><a href=\"#Ghost\" class=\"headerlink\" title=\"Ghost\"></a>Ghost</h2><p>The next step of the journey was a run at <a href=\"https://ghost.org\" target=\"_blank\" rel=\"external\">Ghost</a>. I didn’t make it very far without the first snag. Ghost doesn’t currently support Node latest. Ghost as of right now (2016-09-19) “supports LTS Node versions: ~<strong>0.10.0</strong> || ~<strong>0.12.0</strong> || ^<strong>4.2.0</strong>“. Node latest is 6.6.0, and Node 6 will become LTS (planned) next month. Otherwise Ghost has looked very good so far: It’s based on Node, has a deployment system built out, uses stable (if not quite modern) tools (Ember.js and Handlebars), and is fully open source, and run by a company touting 100% transparency. So, not supporting the latest version of Node isn’t a huge issue, but coupled with Ember and Handlebars being a bit dated, I’ve decided to try other options before coming back.</p>\n<h2 id=\"Random-blogs-I-didn’t-try\"><a href=\"#Random-blogs-I-didn’t-try\" class=\"headerlink\" title=\"Random blogs I didn’t try\"></a>Random blogs I didn’t try</h2><ul>\n<li>[softare]<ul>\n<li>[Reasons I skipped it]</li>\n</ul>\n</li>\n<li><a href=\"https://anchorcms.com/\" target=\"_blank\" rel=\"external\">Anchor</a><ul>\n<li>PHP*, GPL</li>\n</ul>\n</li>\n<li><a href=\"https://getnikola.com/\" target=\"_blank\" rel=\"external\">Nikola</a><ul>\n<li>Python*</li>\n</ul>\n</li>\n<li><a href=\"https://bolt.cm/\" target=\"_blank\" rel=\"external\">Bolt</a><ul>\n<li>PHP</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Bolt\"><a href=\"#Bolt\" class=\"headerlink\" title=\"Bolt\"></a>Bolt</h2><p>If Bolt was Node or another language which I want to learn and code in, then I would try it right now. However, since I don’t actually want to setup a PHP server, I’m going to put this off for later. Bolt is driven by Silex/Symfony, which is (in my opinion) the best way to build a site in PHP. But right now I’m still holding out hope for a blogging software based either on Node, or a language that I have interest in learning.</p>\n<p>It’s now getting late, time to go with Hexo for a little longer…</p>\n","site":{"data":{}},"excerpt":"","more":"<p>This could just as well be titled <em>Trouble with blogging software</em>.</p>\n<p>If you’re reading this, then at some point I had success. Let me tell you about some of the trials along the way.</p>\n<p>My first taste of server-side programming was in PHP. At the same time, I was taking a basic theming course for <a href=\"https://wordpress.org\" target=\"_blank\" rel=\"external\">Wordpress</a>. So setting up a Wordpress (.org or .com) site would be easy, and I could probably be done with it in less than an hour if I didn’t get distracted by theming.</p>\n<h2 id=\"Wordpress\"><a href=\"#Wordpress\" class=\"headerlink\" title=\"Wordpress\"></a>Wordpress</h2><p>I have worked with PHP and Wordpress though, and know that I want to be part of the movement away from them (find me in IRC sometime as samsch (newer) or samssh (older)). So I struck out on the journey to find an alternative. There are many, and I’ve tried a few. I’m actually writing this in Markdown as part of a <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a> blog right now.</p>\n<h2 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h2><p>So, if I’m writing this is Hexo, why would I not just use it for my blog? Hexo has a distinct lack of a comment system. Hexo is very nice, works well, is documented well, but, is still a <em>static</em> blog framework. So no login, no comments, no true CMS.</p>\n<h2 id=\"Ghost\"><a href=\"#Ghost\" class=\"headerlink\" title=\"Ghost\"></a>Ghost</h2><p>The next step of the journey was a run at <a href=\"https://ghost.org\" target=\"_blank\" rel=\"external\">Ghost</a>. I didn’t make it very far without the first snag. Ghost doesn’t currently support Node latest. Ghost as of right now (2016-09-19) “supports LTS Node versions: ~<strong>0.10.0</strong> || ~<strong>0.12.0</strong> || ^<strong>4.2.0</strong>“. Node latest is 6.6.0, and Node 6 will become LTS (planned) next month. Otherwise Ghost has looked very good so far: It’s based on Node, has a deployment system built out, uses stable (if not quite modern) tools (Ember.js and Handlebars), and is fully open source, and run by a company touting 100% transparency. So, not supporting the latest version of Node isn’t a huge issue, but coupled with Ember and Handlebars being a bit dated, I’ve decided to try other options before coming back.</p>\n<h2 id=\"Random-blogs-I-didn’t-try\"><a href=\"#Random-blogs-I-didn’t-try\" class=\"headerlink\" title=\"Random blogs I didn’t try\"></a>Random blogs I didn’t try</h2><ul>\n<li>[softare]<ul>\n<li>[Reasons I skipped it]</li>\n</ul>\n</li>\n<li><a href=\"https://anchorcms.com/\" target=\"_blank\" rel=\"external\">Anchor</a><ul>\n<li>PHP*, GPL</li>\n</ul>\n</li>\n<li><a href=\"https://getnikola.com/\" target=\"_blank\" rel=\"external\">Nikola</a><ul>\n<li>Python*</li>\n</ul>\n</li>\n<li><a href=\"https://bolt.cm/\" target=\"_blank\" rel=\"external\">Bolt</a><ul>\n<li>PHP</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Bolt\"><a href=\"#Bolt\" class=\"headerlink\" title=\"Bolt\"></a>Bolt</h2><p>If Bolt was Node or another language which I want to learn and code in, then I would try it right now. However, since I don’t actually want to setup a PHP server, I’m going to put this off for later. Bolt is driven by Silex/Symfony, which is (in my opinion) the best way to build a site in PHP. But right now I’m still holding out hope for a blogging software based either on Node, or a language that I have interest in learning.</p>\n<p>It’s now getting late, time to go with Hexo for a little longer…</p>\n"},{"title":"Getting Started with Webpack","date":"2017-04-08T14:49:29.000Z","_content":"Modern Javascript best practice is to use either ES modules or CommonJS modules for front end code. However, not all [browsers currently support a module system](http://caniuse.com/#feat=es6-module) directly, so to allow this practice, we use a tool called a bundler, which parses modules and creates a single file containing the full source.\n\nThere are a couple options for bundlers, but the popularity contest is largely being won by Webpack. There is some notoriety around Webpack, mostly due to the ability to create monstrous configurations for complex builds. However, Webpack itself is fairly straightforward, and this post will walk through the basic setup and configuration.\n\n>In a hurry? The final product of this guide can be found in my [basic-webpack-no-loaders repository](https://github.com/samsch/basic-webpack-no-loaders).\n\n## Webpack basics\nThe simplest usage of Webpack is very easy. Let's get a basic project started.\n\n>Don't forget to reference the [Webpack documentation](https://webpack.js.org/configuration/) for more details, and to explore the options that Webpack provides!\n\n### Prerequisites\nYou need to have Node.js installed.\n\nFor Linux and MacOS, the easiest way to install and work with Node is using nvm. Instructions for installing are on the [nvm project page](https://github.com/creationix/nvm#installation).\n\n>If using Windows, you can download an installer from the [Node.js website](https://nodejs.org/en/).\n>\n>The instructions are the same for Webpack in Windows, except you may need to use backslashes instead of slashes for paths on the command line. For example, `webpack src/main.js public/bundle.js` might need to be `webpack src\\main.js public\\bundle.js` in Windows.\n\n>You can of course use Yarn instead of npm for all the command below. Just remember to use `yarn add -D <package>` instead of `npm install -D <package>`.\n\n### Create a new project\n\nMake a new folder for your project (I'm using `basic-webpack`). Then open this folder in a terminal.\n\nRun `npm init`. It will prompt you for project details, but you can just hit enter for each option to use the default. In a real project, you would probably want to fill in actual details.\n\nNext run `npm install -D webpack`. This will install Webpack as a development dependency.\n\n### Add source code\n\nLet's add some source code modules that we want to bundle!\n\nCreate a `src/` folder in your project, and then create a `src/foo.js` file. Add the following to the file:\n```js\nconst foo = function() {\n  console.log('Ran foo()!');\n}\n\nexport default foo;\n```\nThen create a `src/main.js` file, with this content:\n```js\n\nimport foo from './foo';\n\nfoo();\n```\n\nNow we can see that main.js is reliant on foo.js. Now we need to create a *bundle*, which is a single file with all the code in it, neatly packaged to be used in the browser.\n\n### Use Webpack\n\nThe simplest way to use Webpack is from the command line. Webpack, like most runnable npm modules, can be installed globally so that you could just run `webpack <options>` directly. However, the best practice is to install locally to the project. So then to run Webpack, we either need to use `./node_modules/.bin/webpack` OR we can setup an **npm script**. We will be doing the latter.\n\nIn your `package.json` file (which was created by `npm init` above), add a line under the **scripts** property like this:\n```json\n  \"scripts\": {\n    \"webpack\": \"webpack\"\n  },\n```\nNow we can run Webpack with `npm run webpack -- <options>`.\n\nWebpack runs on the command line with the form `webpack <entry> <output>`. We want to output our bundle to `public/`, and `src/main.js` is our *entry* file.\n\nRun `npm run webpack -- src/main.js public/bundle.js`. (It will create the `public/` folder automatically if it doesn't exist.)\n\n### Profit!\n\nThat's it! That's all there is to running Webpack in it's most basic form. You can change your `package.json` file to include the Weback command option so that you can just run `npm run webpack`. Change the line `\"webpack\": \"webpack\",` to be `\"webpack\": \"webpack src/main.js public/bundle.js\",`.\n\n## Actually...\n\nHowever, this isn't the standard way to use Webpack. There are a couple missing features which we usually want. You can actually do most of this from the command line, but the recommended path is to use a Webpack config file.\n\n### Basic config-driven Webpack\n\nIf you changed your `package.json` file to include the paths in the Webpack script command, revert that change so that it's just:\n```json\n  \"scripts\": {\n    \"webpack\": \"webpack\"\n  },\n```\nNow create a `webpack.config.js` file in the project root, with these contents:\n```js\nconst path = require('path');\n\nmodule.exports = {\n  entry: './src/main.js',\n  output: {\n    filename: 'bundle.js',\n    path: path.resolve(__dirname, 'public'),\n  },\n};\n```\nThis is the bare basics to do the same thing as the command line. While it is a bit more verbose, it also is fairly clear.\n\nNow you can run `npm run webpack`, and it will automatically find the config file (we used the default name) and build the bundle.\n\n### Setup basic development and production modes\n\nWebpack comes with some built-in development and production tool which can be enabled with command line options. Edit scripts in `package.json` again to be like:\n```json\n  \"scripts\": {\n    \"dev\": \"webpack -d --watch\",\n    \"build\": \"webpack -p\"\n  },\n```\nNow we can do a production build with `npm run build`. For development, we can run `npm run dev`, and it will re-compile any time a file changes which will affect the bundle.\n\nThe `-d` and `-p` are shortcut options. `-d` enables sourcemaps and turns on debug mode for *loaders* (more on loaders later). `-p` sets the `NODE_ENV` environment variable to \"production\" and replaces usages of process.env.NODE_ENV with '\"production\"' in your code. `-p` also turns on UglifyJSPlugin, which does minification and dead-code removal. With these two combined, code such as the following will be removed in production builds:\n```js\n  if(process.env.NODE_ENV !== \"production\") {\n    console.log('Debug mode!');\n  }\n```\n\nThe sourcemaps are not generated as a separate file by default. You can choose a different sourcemap output with a setting in the webpack config file. [Webpack devtool documentation](https://webpack.js.org/configuration/devtool/).\n\n## Using the bundle, and automation!\n\nWhat we have now is all you need to bundle Javascript files in development and production. All that needed is a server to serve the Javascript bundle, and a page that includes it.\n\nIn the [basic-webpack-no-loaders repo](https://github.com/samsch/basic-webpack-no-loaders), you can run `checkout basic-production-ready` to see the code as it should be if you followed along.\n\nA quick look at what we have:\n\n- We can put ES module and CommonJS module source files in `src/`, and also include modules from `node_modules/` installed with npm or Yarn.\n- We can do a development build on change with `npm run dev`, and we can create a production-ready bundle with `npm run build`.\n\nOur next step is to make the developer experience (DX) even better, by setting up webpack-dev-server.\n\n### webpack-dev-server\n\nWebpack-dev-server does two things: It acts as a static file server (by default), and it watches and bundles your source with some added code which will refresh your browser page when the source changes and the bundle is rebuilt.\n\nInstall webpack-dev-server with `npm install webpack-dev-server`.\n\nNext add a start script to `package.json`:\n```json\n  \"scripts\": {\n    \"start\": \"webpack-dev-server -d --open\",\n    \"dev\": \"webpack -d --watch\",\n    \"build\": \"webpack -p\"\n  },\n```\n\nIf we had an `index.html` file in our project root, and it used a script with a source that pointed to `/bundle.js`, then we could just run `npm start` and serve that. However, we don't really want our app to serve from the project root, we want to serve from the `public/` folder. Let's add a bit of configuration to `webpack.config.js`:\n```js\nconst path = require('path');\n\nmodule.exports = {\n  entry: './src/main.js',\n  output: {\n    filename: 'bundle.js',\n    path: path.resolve(__dirname, 'public'),\n  },\n  devServer: {\n    contentBase: path.join(__dirname, \"public\"),\n    https: true,\n  },\n};\n```\n>The https setting is optional. These days HTTPS is strongly preferred for *all* websites. This option will set the dev server to automatically create a self-signed cert, and open the page via with https. You can also set a cert, key, and ca file. Check the [devServer documentation for instructions](https://webpack.js.org/configuration/dev-server/#devserver-https).\n\nNext create `public/index.html`, and put this content in it:\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>Webpack bundle test page</title>\n  <script src=\"/bundle.js\" defer></script>\n</head>\n<body id=\"app-body\">\n  <h1>Waiting for Javascript...</h1>\n</body>\n</html>\n```\nThat's all we need, but to give us a slightly better first look, lets update `src/foo.js` to modify the html:\n```js\nconst foo = function() {\n  console.log('Ran foo()!');\n  const date = new Date().toDateString();\n  document.getElementById('app-body').innerHTML = `<h1>Hello, world!</h1><p>This is bundled Javascript! Today is: ${date}</p>`;\n  if(process.env.NODE_ENV !== \"production\") {\n    console.log('Debug mode!');\n  }\n}\n\nexport default foo;\n```\nNow with these changes, run `npm start`. This should open a new page in your browser with the above html.\n\n>Since it will be using a self-signed cert, you will need to click through the \"Advanced\" option to allow it. In Chrome, you click \"Proceed to <hostname> (unsafe)\", and in Firefox you click \"Add Exception...\" and I recommend unchecking the permanent option (since the cert won't last very long anyway).\n\nCongratulations! You now have webpack-dev-server running! You can test it out by changing `src/main.js` or `src/foo.js`. When you save changes to either file, the webpage in your browser will refresh with the new bundle.\n\nThe final product is available to clone in [basic-webpack-no-loaders](https://github.com/samsch/basic-webpack-no-loaders).\n\n## Next steps\n\nWhat we have now is a production ready Javascript build system. To make it your own, you can replace, change, and remove the files in `src/`, just make sure that the `entry` property in `webpack.config.js` points to your entry file (some common files are `src/main.js`, `src/index.js`, and `lib/index.js`).\n\nThe most common extra configuration for Webpack is to include babel-loader with preset to compile modern Javascript to ES5 Javascript for browser compatibility. That will be explored in the [next post](https://samsch.org/2017/04/14/getting-started-with-webpack-part-2/).\n\nHappy coding!\n","source":"_posts/2017-04-11-getting-started-with-webpack.md","raw":"---\ntitle: Getting Started with Webpack\ndate: 2017-04-08 10:49:29\ntags:\n- React\n- Webpack\n- developer experience\n- js\n---\nModern Javascript best practice is to use either ES modules or CommonJS modules for front end code. However, not all [browsers currently support a module system](http://caniuse.com/#feat=es6-module) directly, so to allow this practice, we use a tool called a bundler, which parses modules and creates a single file containing the full source.\n\nThere are a couple options for bundlers, but the popularity contest is largely being won by Webpack. There is some notoriety around Webpack, mostly due to the ability to create monstrous configurations for complex builds. However, Webpack itself is fairly straightforward, and this post will walk through the basic setup and configuration.\n\n>In a hurry? The final product of this guide can be found in my [basic-webpack-no-loaders repository](https://github.com/samsch/basic-webpack-no-loaders).\n\n## Webpack basics\nThe simplest usage of Webpack is very easy. Let's get a basic project started.\n\n>Don't forget to reference the [Webpack documentation](https://webpack.js.org/configuration/) for more details, and to explore the options that Webpack provides!\n\n### Prerequisites\nYou need to have Node.js installed.\n\nFor Linux and MacOS, the easiest way to install and work with Node is using nvm. Instructions for installing are on the [nvm project page](https://github.com/creationix/nvm#installation).\n\n>If using Windows, you can download an installer from the [Node.js website](https://nodejs.org/en/).\n>\n>The instructions are the same for Webpack in Windows, except you may need to use backslashes instead of slashes for paths on the command line. For example, `webpack src/main.js public/bundle.js` might need to be `webpack src\\main.js public\\bundle.js` in Windows.\n\n>You can of course use Yarn instead of npm for all the command below. Just remember to use `yarn add -D <package>` instead of `npm install -D <package>`.\n\n### Create a new project\n\nMake a new folder for your project (I'm using `basic-webpack`). Then open this folder in a terminal.\n\nRun `npm init`. It will prompt you for project details, but you can just hit enter for each option to use the default. In a real project, you would probably want to fill in actual details.\n\nNext run `npm install -D webpack`. This will install Webpack as a development dependency.\n\n### Add source code\n\nLet's add some source code modules that we want to bundle!\n\nCreate a `src/` folder in your project, and then create a `src/foo.js` file. Add the following to the file:\n```js\nconst foo = function() {\n  console.log('Ran foo()!');\n}\n\nexport default foo;\n```\nThen create a `src/main.js` file, with this content:\n```js\n\nimport foo from './foo';\n\nfoo();\n```\n\nNow we can see that main.js is reliant on foo.js. Now we need to create a *bundle*, which is a single file with all the code in it, neatly packaged to be used in the browser.\n\n### Use Webpack\n\nThe simplest way to use Webpack is from the command line. Webpack, like most runnable npm modules, can be installed globally so that you could just run `webpack <options>` directly. However, the best practice is to install locally to the project. So then to run Webpack, we either need to use `./node_modules/.bin/webpack` OR we can setup an **npm script**. We will be doing the latter.\n\nIn your `package.json` file (which was created by `npm init` above), add a line under the **scripts** property like this:\n```json\n  \"scripts\": {\n    \"webpack\": \"webpack\"\n  },\n```\nNow we can run Webpack with `npm run webpack -- <options>`.\n\nWebpack runs on the command line with the form `webpack <entry> <output>`. We want to output our bundle to `public/`, and `src/main.js` is our *entry* file.\n\nRun `npm run webpack -- src/main.js public/bundle.js`. (It will create the `public/` folder automatically if it doesn't exist.)\n\n### Profit!\n\nThat's it! That's all there is to running Webpack in it's most basic form. You can change your `package.json` file to include the Weback command option so that you can just run `npm run webpack`. Change the line `\"webpack\": \"webpack\",` to be `\"webpack\": \"webpack src/main.js public/bundle.js\",`.\n\n## Actually...\n\nHowever, this isn't the standard way to use Webpack. There are a couple missing features which we usually want. You can actually do most of this from the command line, but the recommended path is to use a Webpack config file.\n\n### Basic config-driven Webpack\n\nIf you changed your `package.json` file to include the paths in the Webpack script command, revert that change so that it's just:\n```json\n  \"scripts\": {\n    \"webpack\": \"webpack\"\n  },\n```\nNow create a `webpack.config.js` file in the project root, with these contents:\n```js\nconst path = require('path');\n\nmodule.exports = {\n  entry: './src/main.js',\n  output: {\n    filename: 'bundle.js',\n    path: path.resolve(__dirname, 'public'),\n  },\n};\n```\nThis is the bare basics to do the same thing as the command line. While it is a bit more verbose, it also is fairly clear.\n\nNow you can run `npm run webpack`, and it will automatically find the config file (we used the default name) and build the bundle.\n\n### Setup basic development and production modes\n\nWebpack comes with some built-in development and production tool which can be enabled with command line options. Edit scripts in `package.json` again to be like:\n```json\n  \"scripts\": {\n    \"dev\": \"webpack -d --watch\",\n    \"build\": \"webpack -p\"\n  },\n```\nNow we can do a production build with `npm run build`. For development, we can run `npm run dev`, and it will re-compile any time a file changes which will affect the bundle.\n\nThe `-d` and `-p` are shortcut options. `-d` enables sourcemaps and turns on debug mode for *loaders* (more on loaders later). `-p` sets the `NODE_ENV` environment variable to \"production\" and replaces usages of process.env.NODE_ENV with '\"production\"' in your code. `-p` also turns on UglifyJSPlugin, which does minification and dead-code removal. With these two combined, code such as the following will be removed in production builds:\n```js\n  if(process.env.NODE_ENV !== \"production\") {\n    console.log('Debug mode!');\n  }\n```\n\nThe sourcemaps are not generated as a separate file by default. You can choose a different sourcemap output with a setting in the webpack config file. [Webpack devtool documentation](https://webpack.js.org/configuration/devtool/).\n\n## Using the bundle, and automation!\n\nWhat we have now is all you need to bundle Javascript files in development and production. All that needed is a server to serve the Javascript bundle, and a page that includes it.\n\nIn the [basic-webpack-no-loaders repo](https://github.com/samsch/basic-webpack-no-loaders), you can run `checkout basic-production-ready` to see the code as it should be if you followed along.\n\nA quick look at what we have:\n\n- We can put ES module and CommonJS module source files in `src/`, and also include modules from `node_modules/` installed with npm or Yarn.\n- We can do a development build on change with `npm run dev`, and we can create a production-ready bundle with `npm run build`.\n\nOur next step is to make the developer experience (DX) even better, by setting up webpack-dev-server.\n\n### webpack-dev-server\n\nWebpack-dev-server does two things: It acts as a static file server (by default), and it watches and bundles your source with some added code which will refresh your browser page when the source changes and the bundle is rebuilt.\n\nInstall webpack-dev-server with `npm install webpack-dev-server`.\n\nNext add a start script to `package.json`:\n```json\n  \"scripts\": {\n    \"start\": \"webpack-dev-server -d --open\",\n    \"dev\": \"webpack -d --watch\",\n    \"build\": \"webpack -p\"\n  },\n```\n\nIf we had an `index.html` file in our project root, and it used a script with a source that pointed to `/bundle.js`, then we could just run `npm start` and serve that. However, we don't really want our app to serve from the project root, we want to serve from the `public/` folder. Let's add a bit of configuration to `webpack.config.js`:\n```js\nconst path = require('path');\n\nmodule.exports = {\n  entry: './src/main.js',\n  output: {\n    filename: 'bundle.js',\n    path: path.resolve(__dirname, 'public'),\n  },\n  devServer: {\n    contentBase: path.join(__dirname, \"public\"),\n    https: true,\n  },\n};\n```\n>The https setting is optional. These days HTTPS is strongly preferred for *all* websites. This option will set the dev server to automatically create a self-signed cert, and open the page via with https. You can also set a cert, key, and ca file. Check the [devServer documentation for instructions](https://webpack.js.org/configuration/dev-server/#devserver-https).\n\nNext create `public/index.html`, and put this content in it:\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>Webpack bundle test page</title>\n  <script src=\"/bundle.js\" defer></script>\n</head>\n<body id=\"app-body\">\n  <h1>Waiting for Javascript...</h1>\n</body>\n</html>\n```\nThat's all we need, but to give us a slightly better first look, lets update `src/foo.js` to modify the html:\n```js\nconst foo = function() {\n  console.log('Ran foo()!');\n  const date = new Date().toDateString();\n  document.getElementById('app-body').innerHTML = `<h1>Hello, world!</h1><p>This is bundled Javascript! Today is: ${date}</p>`;\n  if(process.env.NODE_ENV !== \"production\") {\n    console.log('Debug mode!');\n  }\n}\n\nexport default foo;\n```\nNow with these changes, run `npm start`. This should open a new page in your browser with the above html.\n\n>Since it will be using a self-signed cert, you will need to click through the \"Advanced\" option to allow it. In Chrome, you click \"Proceed to <hostname> (unsafe)\", and in Firefox you click \"Add Exception...\" and I recommend unchecking the permanent option (since the cert won't last very long anyway).\n\nCongratulations! You now have webpack-dev-server running! You can test it out by changing `src/main.js` or `src/foo.js`. When you save changes to either file, the webpage in your browser will refresh with the new bundle.\n\nThe final product is available to clone in [basic-webpack-no-loaders](https://github.com/samsch/basic-webpack-no-loaders).\n\n## Next steps\n\nWhat we have now is a production ready Javascript build system. To make it your own, you can replace, change, and remove the files in `src/`, just make sure that the `entry` property in `webpack.config.js` points to your entry file (some common files are `src/main.js`, `src/index.js`, and `lib/index.js`).\n\nThe most common extra configuration for Webpack is to include babel-loader with preset to compile modern Javascript to ES5 Javascript for browser compatibility. That will be explored in the [next post](https://samsch.org/2017/04/14/getting-started-with-webpack-part-2/).\n\nHappy coding!\n","slug":"getting-started-with-webpack","published":1,"updated":"2018-08-30T18:27:56.765Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckixl4zvx0008jku33um6qiia","content":"<p>Modern Javascript best practice is to use either ES modules or CommonJS modules for front end code. However, not all <a href=\"http://caniuse.com/#feat=es6-module\" target=\"_blank\" rel=\"external\">browsers currently support a module system</a> directly, so to allow this practice, we use a tool called a bundler, which parses modules and creates a single file containing the full source.</p>\n<p>There are a couple options for bundlers, but the popularity contest is largely being won by Webpack. There is some notoriety around Webpack, mostly due to the ability to create monstrous configurations for complex builds. However, Webpack itself is fairly straightforward, and this post will walk through the basic setup and configuration.</p>\n<blockquote>\n<p>In a hurry? The final product of this guide can be found in my <a href=\"https://github.com/samsch/basic-webpack-no-loaders\" target=\"_blank\" rel=\"external\">basic-webpack-no-loaders repository</a>.</p>\n</blockquote>\n<h2 id=\"Webpack-basics\"><a href=\"#Webpack-basics\" class=\"headerlink\" title=\"Webpack basics\"></a>Webpack basics</h2><p>The simplest usage of Webpack is very easy. Let’s get a basic project started.</p>\n<blockquote>\n<p>Don’t forget to reference the <a href=\"https://webpack.js.org/configuration/\" target=\"_blank\" rel=\"external\">Webpack documentation</a> for more details, and to explore the options that Webpack provides!</p>\n</blockquote>\n<h3 id=\"Prerequisites\"><a href=\"#Prerequisites\" class=\"headerlink\" title=\"Prerequisites\"></a>Prerequisites</h3><p>You need to have Node.js installed.</p>\n<p>For Linux and MacOS, the easiest way to install and work with Node is using nvm. Instructions for installing are on the <a href=\"https://github.com/creationix/nvm#installation\" target=\"_blank\" rel=\"external\">nvm project page</a>.</p>\n<blockquote>\n<p>If using Windows, you can download an installer from the <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external\">Node.js website</a>.</p>\n<p>The instructions are the same for Webpack in Windows, except you may need to use backslashes instead of slashes for paths on the command line. For example, <code>webpack src/main.js public/bundle.js</code> might need to be <code>webpack src\\main.js public\\bundle.js</code> in Windows.</p>\n<p>You can of course use Yarn instead of npm for all the command below. Just remember to use <code>yarn add -D &lt;package&gt;</code> instead of <code>npm install -D &lt;package&gt;</code>.</p>\n</blockquote>\n<h3 id=\"Create-a-new-project\"><a href=\"#Create-a-new-project\" class=\"headerlink\" title=\"Create a new project\"></a>Create a new project</h3><p>Make a new folder for your project (I’m using <code>basic-webpack</code>). Then open this folder in a terminal.</p>\n<p>Run <code>npm init</code>. It will prompt you for project details, but you can just hit enter for each option to use the default. In a real project, you would probably want to fill in actual details.</p>\n<p>Next run <code>npm install -D webpack</code>. This will install Webpack as a development dependency.</p>\n<h3 id=\"Add-source-code\"><a href=\"#Add-source-code\" class=\"headerlink\" title=\"Add source code\"></a>Add source code</h3><p>Let’s add some source code modules that we want to bundle!</p>\n<p>Create a <code>src/</code> folder in your project, and then create a <code>src/foo.js</code> file. Add the following to the file:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Ran foo()!'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> foo;</div></pre></td></tr></table></figure></p>\n<p>Then create a <code>src/main.js</code> file, with this content:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> foo <span class=\"keyword\">from</span> <span class=\"string\">'./foo'</span>;</div><div class=\"line\"></div><div class=\"line\">foo();</div></pre></td></tr></table></figure></p>\n<p>Now we can see that main.js is reliant on foo.js. Now we need to create a <em>bundle</em>, which is a single file with all the code in it, neatly packaged to be used in the browser.</p>\n<h3 id=\"Use-Webpack\"><a href=\"#Use-Webpack\" class=\"headerlink\" title=\"Use Webpack\"></a>Use Webpack</h3><p>The simplest way to use Webpack is from the command line. Webpack, like most runnable npm modules, can be installed globally so that you could just run <code>webpack &lt;options&gt;</code> directly. However, the best practice is to install locally to the project. So then to run Webpack, we either need to use <code>./node_modules/.bin/webpack</code> OR we can setup an <strong>npm script</strong>. We will be doing the latter.</p>\n<p>In your <code>package.json</code> file (which was created by <code>npm init</code> above), add a line under the <strong>scripts</strong> property like this:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">\"scripts\": &#123;</div><div class=\"line\">  \"webpack\": \"webpack\"</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure></p>\n<p>Now we can run Webpack with <code>npm run webpack -- &lt;options&gt;</code>.</p>\n<p>Webpack runs on the command line with the form <code>webpack &lt;entry&gt; &lt;output&gt;</code>. We want to output our bundle to <code>public/</code>, and <code>src/main.js</code> is our <em>entry</em> file.</p>\n<p>Run <code>npm run webpack -- src/main.js public/bundle.js</code>. (It will create the <code>public/</code> folder automatically if it doesn’t exist.)</p>\n<h3 id=\"Profit\"><a href=\"#Profit\" class=\"headerlink\" title=\"Profit!\"></a>Profit!</h3><p>That’s it! That’s all there is to running Webpack in it’s most basic form. You can change your <code>package.json</code> file to include the Weback command option so that you can just run <code>npm run webpack</code>. Change the line <code>&quot;webpack&quot;: &quot;webpack&quot;,</code> to be <code>&quot;webpack&quot;: &quot;webpack src/main.js public/bundle.js&quot;,</code>.</p>\n<h2 id=\"Actually…\"><a href=\"#Actually…\" class=\"headerlink\" title=\"Actually…\"></a>Actually…</h2><p>However, this isn’t the standard way to use Webpack. There are a couple missing features which we usually want. You can actually do most of this from the command line, but the recommended path is to use a Webpack config file.</p>\n<h3 id=\"Basic-config-driven-Webpack\"><a href=\"#Basic-config-driven-Webpack\" class=\"headerlink\" title=\"Basic config-driven Webpack\"></a>Basic config-driven Webpack</h3><p>If you changed your <code>package.json</code> file to include the paths in the Webpack script command, revert that change so that it’s just:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">\"scripts\": &#123;</div><div class=\"line\">  \"webpack\": \"webpack\"</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure></p>\n<p>Now create a <code>webpack.config.js</code> file in the project root, with these contents:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  entry: <span class=\"string\">'./src/main.js'</span>,</div><div class=\"line\">  output: &#123;</div><div class=\"line\">    filename: <span class=\"string\">'bundle.js'</span>,</div><div class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'public'</span>),</div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>This is the bare basics to do the same thing as the command line. While it is a bit more verbose, it also is fairly clear.</p>\n<p>Now you can run <code>npm run webpack</code>, and it will automatically find the config file (we used the default name) and build the bundle.</p>\n<h3 id=\"Setup-basic-development-and-production-modes\"><a href=\"#Setup-basic-development-and-production-modes\" class=\"headerlink\" title=\"Setup basic development and production modes\"></a>Setup basic development and production modes</h3><p>Webpack comes with some built-in development and production tool which can be enabled with command line options. Edit scripts in <code>package.json</code> again to be like:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">\"scripts\": &#123;</div><div class=\"line\">  \"dev\": \"webpack -d --watch\",</div><div class=\"line\">  \"build\": \"webpack -p\"</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure></p>\n<p>Now we can do a production build with <code>npm run build</code>. For development, we can run <code>npm run dev</code>, and it will re-compile any time a file changes which will affect the bundle.</p>\n<p>The <code>-d</code> and <code>-p</code> are shortcut options. <code>-d</code> enables sourcemaps and turns on debug mode for <em>loaders</em> (more on loaders later). <code>-p</code> sets the <code>NODE_ENV</code> environment variable to “production” and replaces usages of process.env.NODE_ENV with ‘“production”‘ in your code. <code>-p</code> also turns on UglifyJSPlugin, which does minification and dead-code removal. With these two combined, code such as the following will be removed in production builds:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(process.env.NODE_ENV !== <span class=\"string\">\"production\"</span>) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Debug mode!'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>The sourcemaps are not generated as a separate file by default. You can choose a different sourcemap output with a setting in the webpack config file. <a href=\"https://webpack.js.org/configuration/devtool/\" target=\"_blank\" rel=\"external\">Webpack devtool documentation</a>.</p>\n<h2 id=\"Using-the-bundle-and-automation\"><a href=\"#Using-the-bundle-and-automation\" class=\"headerlink\" title=\"Using the bundle, and automation!\"></a>Using the bundle, and automation!</h2><p>What we have now is all you need to bundle Javascript files in development and production. All that needed is a server to serve the Javascript bundle, and a page that includes it.</p>\n<p>In the <a href=\"https://github.com/samsch/basic-webpack-no-loaders\" target=\"_blank\" rel=\"external\">basic-webpack-no-loaders repo</a>, you can run <code>checkout basic-production-ready</code> to see the code as it should be if you followed along.</p>\n<p>A quick look at what we have:</p>\n<ul>\n<li>We can put ES module and CommonJS module source files in <code>src/</code>, and also include modules from <code>node_modules/</code> installed with npm or Yarn.</li>\n<li>We can do a development build on change with <code>npm run dev</code>, and we can create a production-ready bundle with <code>npm run build</code>.</li>\n</ul>\n<p>Our next step is to make the developer experience (DX) even better, by setting up webpack-dev-server.</p>\n<h3 id=\"webpack-dev-server\"><a href=\"#webpack-dev-server\" class=\"headerlink\" title=\"webpack-dev-server\"></a>webpack-dev-server</h3><p>Webpack-dev-server does two things: It acts as a static file server (by default), and it watches and bundles your source with some added code which will refresh your browser page when the source changes and the bundle is rebuilt.</p>\n<p>Install webpack-dev-server with <code>npm install webpack-dev-server</code>.</p>\n<p>Next add a start script to <code>package.json</code>:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">\"scripts\": &#123;</div><div class=\"line\">  \"start\": \"webpack-dev-server -d --open\",</div><div class=\"line\">  \"dev\": \"webpack -d --watch\",</div><div class=\"line\">  \"build\": \"webpack -p\"</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure></p>\n<p>If we had an <code>index.html</code> file in our project root, and it used a script with a source that pointed to <code>/bundle.js</code>, then we could just run <code>npm start</code> and serve that. However, we don’t really want our app to serve from the project root, we want to serve from the <code>public/</code> folder. Let’s add a bit of configuration to <code>webpack.config.js</code>:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  entry: <span class=\"string\">'./src/main.js'</span>,</div><div class=\"line\">  output: &#123;</div><div class=\"line\">    filename: <span class=\"string\">'bundle.js'</span>,</div><div class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'public'</span>),</div><div class=\"line\">  &#125;,</div><div class=\"line\">  devServer: &#123;</div><div class=\"line\">    contentBase: path.join(__dirname, <span class=\"string\">\"public\"</span>),</div><div class=\"line\">    https: <span class=\"literal\">true</span>,</div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>The https setting is optional. These days HTTPS is strongly preferred for <em>all</em> websites. This option will set the dev server to automatically create a self-signed cert, and open the page via with https. You can also set a cert, key, and ca file. Check the <a href=\"https://webpack.js.org/configuration/dev-server/#devserver-https\" target=\"_blank\" rel=\"external\">devServer documentation for instructions</a>.</p>\n</blockquote>\n<p>Next create <code>public/index.html</code>, and put this content in it:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Webpack bundle test page<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/bundle.js\"</span> <span class=\"attr\">defer</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app-body\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Waiting for Javascript...<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>That’s all we need, but to give us a slightly better first look, lets update <code>src/foo.js</code> to modify the html:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Ran foo()!'</span>);</div><div class=\"line\">  <span class=\"keyword\">const</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toDateString();</div><div class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'app-body'</span>).innerHTML = <span class=\"string\">`&lt;h1&gt;Hello, world!&lt;/h1&gt;&lt;p&gt;This is bundled Javascript! Today is: <span class=\"subst\">$&#123;date&#125;</span>&lt;/p&gt;`</span>;</div><div class=\"line\">  <span class=\"keyword\">if</span>(process.env.NODE_ENV !== <span class=\"string\">\"production\"</span>) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Debug mode!'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> foo;</div></pre></td></tr></table></figure></p>\n<p>Now with these changes, run <code>npm start</code>. This should open a new page in your browser with the above html.</p>\n<blockquote>\n<p>Since it will be using a self-signed cert, you will need to click through the “Advanced” option to allow it. In Chrome, you click “Proceed to <hostname> (unsafe)”, and in Firefox you click “Add Exception…” and I recommend unchecking the permanent option (since the cert won’t last very long anyway).</hostname></p>\n</blockquote>\n<p>Congratulations! You now have webpack-dev-server running! You can test it out by changing <code>src/main.js</code> or <code>src/foo.js</code>. When you save changes to either file, the webpage in your browser will refresh with the new bundle.</p>\n<p>The final product is available to clone in <a href=\"https://github.com/samsch/basic-webpack-no-loaders\" target=\"_blank\" rel=\"external\">basic-webpack-no-loaders</a>.</p>\n<h2 id=\"Next-steps\"><a href=\"#Next-steps\" class=\"headerlink\" title=\"Next steps\"></a>Next steps</h2><p>What we have now is a production ready Javascript build system. To make it your own, you can replace, change, and remove the files in <code>src/</code>, just make sure that the <code>entry</code> property in <code>webpack.config.js</code> points to your entry file (some common files are <code>src/main.js</code>, <code>src/index.js</code>, and <code>lib/index.js</code>).</p>\n<p>The most common extra configuration for Webpack is to include babel-loader with preset to compile modern Javascript to ES5 Javascript for browser compatibility. That will be explored in the <a href=\"https://samsch.org/2017/04/14/getting-started-with-webpack-part-2/\">next post</a>.</p>\n<p>Happy coding!</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Modern Javascript best practice is to use either ES modules or CommonJS modules for front end code. However, not all <a href=\"http://caniuse.com/#feat=es6-module\" target=\"_blank\" rel=\"external\">browsers currently support a module system</a> directly, so to allow this practice, we use a tool called a bundler, which parses modules and creates a single file containing the full source.</p>\n<p>There are a couple options for bundlers, but the popularity contest is largely being won by Webpack. There is some notoriety around Webpack, mostly due to the ability to create monstrous configurations for complex builds. However, Webpack itself is fairly straightforward, and this post will walk through the basic setup and configuration.</p>\n<blockquote>\n<p>In a hurry? The final product of this guide can be found in my <a href=\"https://github.com/samsch/basic-webpack-no-loaders\" target=\"_blank\" rel=\"external\">basic-webpack-no-loaders repository</a>.</p>\n</blockquote>\n<h2 id=\"Webpack-basics\"><a href=\"#Webpack-basics\" class=\"headerlink\" title=\"Webpack basics\"></a>Webpack basics</h2><p>The simplest usage of Webpack is very easy. Let’s get a basic project started.</p>\n<blockquote>\n<p>Don’t forget to reference the <a href=\"https://webpack.js.org/configuration/\" target=\"_blank\" rel=\"external\">Webpack documentation</a> for more details, and to explore the options that Webpack provides!</p>\n</blockquote>\n<h3 id=\"Prerequisites\"><a href=\"#Prerequisites\" class=\"headerlink\" title=\"Prerequisites\"></a>Prerequisites</h3><p>You need to have Node.js installed.</p>\n<p>For Linux and MacOS, the easiest way to install and work with Node is using nvm. Instructions for installing are on the <a href=\"https://github.com/creationix/nvm#installation\" target=\"_blank\" rel=\"external\">nvm project page</a>.</p>\n<blockquote>\n<p>If using Windows, you can download an installer from the <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external\">Node.js website</a>.</p>\n<p>The instructions are the same for Webpack in Windows, except you may need to use backslashes instead of slashes for paths on the command line. For example, <code>webpack src/main.js public/bundle.js</code> might need to be <code>webpack src\\main.js public\\bundle.js</code> in Windows.</p>\n<p>You can of course use Yarn instead of npm for all the command below. Just remember to use <code>yarn add -D &lt;package&gt;</code> instead of <code>npm install -D &lt;package&gt;</code>.</p>\n</blockquote>\n<h3 id=\"Create-a-new-project\"><a href=\"#Create-a-new-project\" class=\"headerlink\" title=\"Create a new project\"></a>Create a new project</h3><p>Make a new folder for your project (I’m using <code>basic-webpack</code>). Then open this folder in a terminal.</p>\n<p>Run <code>npm init</code>. It will prompt you for project details, but you can just hit enter for each option to use the default. In a real project, you would probably want to fill in actual details.</p>\n<p>Next run <code>npm install -D webpack</code>. This will install Webpack as a development dependency.</p>\n<h3 id=\"Add-source-code\"><a href=\"#Add-source-code\" class=\"headerlink\" title=\"Add source code\"></a>Add source code</h3><p>Let’s add some source code modules that we want to bundle!</p>\n<p>Create a <code>src/</code> folder in your project, and then create a <code>src/foo.js</code> file. Add the following to the file:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Ran foo()!'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> foo;</div></pre></td></tr></table></figure></p>\n<p>Then create a <code>src/main.js</code> file, with this content:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> foo <span class=\"keyword\">from</span> <span class=\"string\">'./foo'</span>;</div><div class=\"line\"></div><div class=\"line\">foo();</div></pre></td></tr></table></figure></p>\n<p>Now we can see that main.js is reliant on foo.js. Now we need to create a <em>bundle</em>, which is a single file with all the code in it, neatly packaged to be used in the browser.</p>\n<h3 id=\"Use-Webpack\"><a href=\"#Use-Webpack\" class=\"headerlink\" title=\"Use Webpack\"></a>Use Webpack</h3><p>The simplest way to use Webpack is from the command line. Webpack, like most runnable npm modules, can be installed globally so that you could just run <code>webpack &lt;options&gt;</code> directly. However, the best practice is to install locally to the project. So then to run Webpack, we either need to use <code>./node_modules/.bin/webpack</code> OR we can setup an <strong>npm script</strong>. We will be doing the latter.</p>\n<p>In your <code>package.json</code> file (which was created by <code>npm init</code> above), add a line under the <strong>scripts</strong> property like this:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">\"scripts\": &#123;</div><div class=\"line\">  \"webpack\": \"webpack\"</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure></p>\n<p>Now we can run Webpack with <code>npm run webpack -- &lt;options&gt;</code>.</p>\n<p>Webpack runs on the command line with the form <code>webpack &lt;entry&gt; &lt;output&gt;</code>. We want to output our bundle to <code>public/</code>, and <code>src/main.js</code> is our <em>entry</em> file.</p>\n<p>Run <code>npm run webpack -- src/main.js public/bundle.js</code>. (It will create the <code>public/</code> folder automatically if it doesn’t exist.)</p>\n<h3 id=\"Profit\"><a href=\"#Profit\" class=\"headerlink\" title=\"Profit!\"></a>Profit!</h3><p>That’s it! That’s all there is to running Webpack in it’s most basic form. You can change your <code>package.json</code> file to include the Weback command option so that you can just run <code>npm run webpack</code>. Change the line <code>&quot;webpack&quot;: &quot;webpack&quot;,</code> to be <code>&quot;webpack&quot;: &quot;webpack src/main.js public/bundle.js&quot;,</code>.</p>\n<h2 id=\"Actually…\"><a href=\"#Actually…\" class=\"headerlink\" title=\"Actually…\"></a>Actually…</h2><p>However, this isn’t the standard way to use Webpack. There are a couple missing features which we usually want. You can actually do most of this from the command line, but the recommended path is to use a Webpack config file.</p>\n<h3 id=\"Basic-config-driven-Webpack\"><a href=\"#Basic-config-driven-Webpack\" class=\"headerlink\" title=\"Basic config-driven Webpack\"></a>Basic config-driven Webpack</h3><p>If you changed your <code>package.json</code> file to include the paths in the Webpack script command, revert that change so that it’s just:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">\"scripts\": &#123;</div><div class=\"line\">  \"webpack\": \"webpack\"</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure></p>\n<p>Now create a <code>webpack.config.js</code> file in the project root, with these contents:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  entry: <span class=\"string\">'./src/main.js'</span>,</div><div class=\"line\">  output: &#123;</div><div class=\"line\">    filename: <span class=\"string\">'bundle.js'</span>,</div><div class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'public'</span>),</div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>This is the bare basics to do the same thing as the command line. While it is a bit more verbose, it also is fairly clear.</p>\n<p>Now you can run <code>npm run webpack</code>, and it will automatically find the config file (we used the default name) and build the bundle.</p>\n<h3 id=\"Setup-basic-development-and-production-modes\"><a href=\"#Setup-basic-development-and-production-modes\" class=\"headerlink\" title=\"Setup basic development and production modes\"></a>Setup basic development and production modes</h3><p>Webpack comes with some built-in development and production tool which can be enabled with command line options. Edit scripts in <code>package.json</code> again to be like:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">\"scripts\": &#123;</div><div class=\"line\">  \"dev\": \"webpack -d --watch\",</div><div class=\"line\">  \"build\": \"webpack -p\"</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure></p>\n<p>Now we can do a production build with <code>npm run build</code>. For development, we can run <code>npm run dev</code>, and it will re-compile any time a file changes which will affect the bundle.</p>\n<p>The <code>-d</code> and <code>-p</code> are shortcut options. <code>-d</code> enables sourcemaps and turns on debug mode for <em>loaders</em> (more on loaders later). <code>-p</code> sets the <code>NODE_ENV</code> environment variable to “production” and replaces usages of process.env.NODE_ENV with ‘“production”‘ in your code. <code>-p</code> also turns on UglifyJSPlugin, which does minification and dead-code removal. With these two combined, code such as the following will be removed in production builds:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(process.env.NODE_ENV !== <span class=\"string\">\"production\"</span>) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Debug mode!'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>The sourcemaps are not generated as a separate file by default. You can choose a different sourcemap output with a setting in the webpack config file. <a href=\"https://webpack.js.org/configuration/devtool/\" target=\"_blank\" rel=\"external\">Webpack devtool documentation</a>.</p>\n<h2 id=\"Using-the-bundle-and-automation\"><a href=\"#Using-the-bundle-and-automation\" class=\"headerlink\" title=\"Using the bundle, and automation!\"></a>Using the bundle, and automation!</h2><p>What we have now is all you need to bundle Javascript files in development and production. All that needed is a server to serve the Javascript bundle, and a page that includes it.</p>\n<p>In the <a href=\"https://github.com/samsch/basic-webpack-no-loaders\" target=\"_blank\" rel=\"external\">basic-webpack-no-loaders repo</a>, you can run <code>checkout basic-production-ready</code> to see the code as it should be if you followed along.</p>\n<p>A quick look at what we have:</p>\n<ul>\n<li>We can put ES module and CommonJS module source files in <code>src/</code>, and also include modules from <code>node_modules/</code> installed with npm or Yarn.</li>\n<li>We can do a development build on change with <code>npm run dev</code>, and we can create a production-ready bundle with <code>npm run build</code>.</li>\n</ul>\n<p>Our next step is to make the developer experience (DX) even better, by setting up webpack-dev-server.</p>\n<h3 id=\"webpack-dev-server\"><a href=\"#webpack-dev-server\" class=\"headerlink\" title=\"webpack-dev-server\"></a>webpack-dev-server</h3><p>Webpack-dev-server does two things: It acts as a static file server (by default), and it watches and bundles your source with some added code which will refresh your browser page when the source changes and the bundle is rebuilt.</p>\n<p>Install webpack-dev-server with <code>npm install webpack-dev-server</code>.</p>\n<p>Next add a start script to <code>package.json</code>:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">\"scripts\": &#123;</div><div class=\"line\">  \"start\": \"webpack-dev-server -d --open\",</div><div class=\"line\">  \"dev\": \"webpack -d --watch\",</div><div class=\"line\">  \"build\": \"webpack -p\"</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure></p>\n<p>If we had an <code>index.html</code> file in our project root, and it used a script with a source that pointed to <code>/bundle.js</code>, then we could just run <code>npm start</code> and serve that. However, we don’t really want our app to serve from the project root, we want to serve from the <code>public/</code> folder. Let’s add a bit of configuration to <code>webpack.config.js</code>:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  entry: <span class=\"string\">'./src/main.js'</span>,</div><div class=\"line\">  output: &#123;</div><div class=\"line\">    filename: <span class=\"string\">'bundle.js'</span>,</div><div class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'public'</span>),</div><div class=\"line\">  &#125;,</div><div class=\"line\">  devServer: &#123;</div><div class=\"line\">    contentBase: path.join(__dirname, <span class=\"string\">\"public\"</span>),</div><div class=\"line\">    https: <span class=\"literal\">true</span>,</div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>The https setting is optional. These days HTTPS is strongly preferred for <em>all</em> websites. This option will set the dev server to automatically create a self-signed cert, and open the page via with https. You can also set a cert, key, and ca file. Check the <a href=\"https://webpack.js.org/configuration/dev-server/#devserver-https\" target=\"_blank\" rel=\"external\">devServer documentation for instructions</a>.</p>\n</blockquote>\n<p>Next create <code>public/index.html</code>, and put this content in it:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Webpack bundle test page<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/bundle.js\"</span> <span class=\"attr\">defer</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app-body\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Waiting for Javascript...<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>That’s all we need, but to give us a slightly better first look, lets update <code>src/foo.js</code> to modify the html:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Ran foo()!'</span>);</div><div class=\"line\">  <span class=\"keyword\">const</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toDateString();</div><div class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'app-body'</span>).innerHTML = <span class=\"string\">`&lt;h1&gt;Hello, world!&lt;/h1&gt;&lt;p&gt;This is bundled Javascript! Today is: <span class=\"subst\">$&#123;date&#125;</span>&lt;/p&gt;`</span>;</div><div class=\"line\">  <span class=\"keyword\">if</span>(process.env.NODE_ENV !== <span class=\"string\">\"production\"</span>) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Debug mode!'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> foo;</div></pre></td></tr></table></figure></p>\n<p>Now with these changes, run <code>npm start</code>. This should open a new page in your browser with the above html.</p>\n<blockquote>\n<p>Since it will be using a self-signed cert, you will need to click through the “Advanced” option to allow it. In Chrome, you click “Proceed to <hostname> (unsafe)”, and in Firefox you click “Add Exception…” and I recommend unchecking the permanent option (since the cert won’t last very long anyway).</hostname></p>\n</blockquote>\n<p>Congratulations! You now have webpack-dev-server running! You can test it out by changing <code>src/main.js</code> or <code>src/foo.js</code>. When you save changes to either file, the webpage in your browser will refresh with the new bundle.</p>\n<p>The final product is available to clone in <a href=\"https://github.com/samsch/basic-webpack-no-loaders\" target=\"_blank\" rel=\"external\">basic-webpack-no-loaders</a>.</p>\n<h2 id=\"Next-steps\"><a href=\"#Next-steps\" class=\"headerlink\" title=\"Next steps\"></a>Next steps</h2><p>What we have now is a production ready Javascript build system. To make it your own, you can replace, change, and remove the files in <code>src/</code>, just make sure that the <code>entry</code> property in <code>webpack.config.js</code> points to your entry file (some common files are <code>src/main.js</code>, <code>src/index.js</code>, and <code>lib/index.js</code>).</p>\n<p>The most common extra configuration for Webpack is to include babel-loader with preset to compile modern Javascript to ES5 Javascript for browser compatibility. That will be explored in the <a href=\"https://samsch.org/2017/04/14/getting-started-with-webpack-part-2/\">next post</a>.</p>\n<p>Happy coding!</p>\n"},{"title":"Getting Started with Webpack - Part 2","date":"2017-04-14T14:45:02.000Z","_content":"In [Part 1](https://samsch.org/2017/04/08/getting-started-with-webpack/), we setup basic production ready functionality in Webpack. We can organize our code into modules, build them into a single file bundle, and have the build process run automatically, refreshing our project in a webpage.\n\nOur next step is to have our build system compile modern Javascript (ES2015, ES2016, ES2017) into code which can be run in current browsers (ES5). We also need to add in polyfills for some of the additional non-syntax language features.\n\nWe also will enable JSX compilation for use with React.\n\n## Loaders and our starting point\n\nWebpack has a couple ways to extend its functionality. There is a [plugin system](https://webpack.js.org/plugins/), which used for tools such as UglifyJS for code minification, and there is the [loader system](https://webpack.js.org/loaders/). Loaders allow you to pre-process files before they are added to the bundle.\n\nWe will use the final product of Part 1 as our starting point. You can clone the [basic-webpack-no-loaders](https://github.com/samsch/basic-webpack-no-loaders) repo to follow along, or if you followed Part 1, the project you ended up with.\n\n## Final result\n\nIf you don't want to build the whole thing, or want to look ahead, the final result is in [basic-webpack-react](https://github.com/samsch/basic-webpack-react).\n\n## Adding Babel\n\nOur first step is to add and configure Babel. Babel is a Javascript and near-Javascript compiler. The Webpack loader is called babel-loader, and depends on babel-core as a peer dependency. Install both with `npm install -D babel-core babel-loader`.\n\nNext we need to setup a babelrc file in the project root. This file configures the Babel plugins we need.\n\nTo setup this file, I used [@brigand](https://github.com/brigand)'s [config-wizard](https://brigand.github.io/config-wizard/?babelrc), with options \"Play it safe\", \"None/Other\", [\"IE11\", \"iOS\", \"Chrome\", \"Firefox\"]. This instructs us to install babel-preset-env with `npm install -D babel-preset-env`, and gives us our file content for `.babelrc`:\n```json\n{\n  \"presets\": [\n    [\n      \"env\",\n      {\n        \"targets\": {\n          \"browsers\": [\n            \"ie 11\",\n            \"last 2 Chrome versions\",\n            \"last 2 Firefox versions\",\n            \"last 2 iOS versions\"\n          ]\n        }\n      }\n    ]\n  ]\n}\n```\nNow we need to add babel-loader to `webpack.config.js`. We're adding a `modules` property with some options:\n```js\n  module: {\n    rules: [\n      {\n        test : /\\.js/,\n        include: path.resolve(__dirname, 'src/'),\n        use: ['babel-loader'],\n      },\n    ],\n  },\n```\n>[View diff of file change](https://gist.github.com/samsch/15a058bd059b1bfe57d2400003348736)\n\nWith these changes, we can now use the same commands as before (`npm start`, `npm run dev`, `npm run build`), and it will work just the same, except that now if we use ES2015/16/17 code, it will be compiled to ES5 Javascript.\n\n### Polyfills\n\nNow we need to add the Babel polyfill (which is actually core-js and regenerator). Install it with `npm install -D babel-polyfill`. There are a couple ways to include polyfills in your code. The simplest is to just add `import 'babel-polyfill';` to the top of your entry file (`src/main.js`). A slightly cleaner approach is to include them via webpack config, which also makes the polyfills part of the build, rather than part of your code. We need to change the `entry` property in `webpack.config.js` to be `entry: ['babel-polyfill', './src/main.js'],`.\n>[webpack.config.js diff](https://gist.github.com/samsch/0df1433b029dda87d73f092cf119d837)\n\n## Test modern to ES5 compilation\n\nLet's show that our code is being compiled properly. Change `srv/main.js` to be:\n```js\nimport foo from './foo';\n\nfoo();\n\nconst j = () => console.log('Babel compilation is working!');\n\nj();\n```\nIf we compile with `npm run build`, and search in the (minified) `public/bundle.js` for \"Babel compilation is working!\", we find `function(){console.log(\"Babel compilation is working!\")}`, which is using the `function` keyword rather than using an arrow function like our source.\n\n## React... and more!\n\nWhat we have now gives us great modern Javascript workflow, while supporting common browsers. Our next step takes us to features outside of Javascript. To work with React, most developers use JSX, which is an HTML-like language that compiles to Javascript. To add JSX support, all we need to do is install babel-preset-react, add it to `.babelrc`, and possibly make a minor change to our webpack config.\n\nFirst add babel-preset-react with `npm install -D babel-preset-react`. Then change `.babelrc` to be:\n```json\n{\n  \"presets\": [\n    [\n      \"env\",\n      {\n        \"targets\": {\n          \"browsers\": [\n            \"last 2 Chrome versions\",\n            \"last 2 Firefox versions\",\n            \"last 2 iOS versions\",\n            \"ie 11\"\n          ]\n        }\n      }\n    ],\n    \"react\"\n  ]\n}\n```\n>Generated with config-wizard similar to before, this time replacing \"None/Other\" with \"React\".\n\nWith just those changes, we can now compile JSX in our js files. Some developers prefer to use a different file extension for React components though: `.jsx`. We can support this by making a small change to our `test` line in `webpack.config.js`. Replace `test : /\\.js/,` with `test : /\\.jsx?/,`. Now Wepack will use babel-loader for `.js` and `.jsx` files.\n>[webpack config diff](https://gist.github.com/samsch/54abd031b6ca088abe652371c8dd8754)\n\n## Test React compilation\n\nTo see that we can now compile JSX, lets change `src/foo.js` to run some React code:\n```js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst foo = function() {\n  ReactDOM.render(\n    <div>\n      <h1>Hello, world!</h1>\n      <p>This was rendered with React.</p>\n    </div>,\n    document.getElementById('app-body')\n  );\n}\n\nexport default foo;\n```\nSince we're importing React and ReactDOM, we also need to install them, so run `npm install -D react react-dom`.\n\nNow we can run `npm start`, and we should see our \"Hello, world!\" and the rendered by React message.\n\n## Next steps\n\nWe have a fully functional Webpack and Babel workflow now, which supports modern Javascript and React. The final product can be found in [basic-webpack-react](https://github.com/samsch/basic-webpack-react).\n\nFor moving beyond what's here, there are many Webpack loaders, and more features which can't be covered in a basic guide. Some popular topics:\n- [Loading styles](https://webpack.js.org/loaders/#styling)\n- [Code splitting](https://webpack.js.org/guides/code-splitting-import/)\n- [Hot modules replacement (HMR)](https://webpack.js.org/guides/hmr-react/)\n\nHappy coding!\n","source":"_posts/2017-04-14-getting-started-with-webpack-part-2.md","raw":"---\ntitle: Getting Started with Webpack - Part 2\ndate: 2017-04-14 10:45:02\ntags:\n- React\n- Webpack\n- developer experience\n- js\n---\nIn [Part 1](https://samsch.org/2017/04/08/getting-started-with-webpack/), we setup basic production ready functionality in Webpack. We can organize our code into modules, build them into a single file bundle, and have the build process run automatically, refreshing our project in a webpage.\n\nOur next step is to have our build system compile modern Javascript (ES2015, ES2016, ES2017) into code which can be run in current browsers (ES5). We also need to add in polyfills for some of the additional non-syntax language features.\n\nWe also will enable JSX compilation for use with React.\n\n## Loaders and our starting point\n\nWebpack has a couple ways to extend its functionality. There is a [plugin system](https://webpack.js.org/plugins/), which used for tools such as UglifyJS for code minification, and there is the [loader system](https://webpack.js.org/loaders/). Loaders allow you to pre-process files before they are added to the bundle.\n\nWe will use the final product of Part 1 as our starting point. You can clone the [basic-webpack-no-loaders](https://github.com/samsch/basic-webpack-no-loaders) repo to follow along, or if you followed Part 1, the project you ended up with.\n\n## Final result\n\nIf you don't want to build the whole thing, or want to look ahead, the final result is in [basic-webpack-react](https://github.com/samsch/basic-webpack-react).\n\n## Adding Babel\n\nOur first step is to add and configure Babel. Babel is a Javascript and near-Javascript compiler. The Webpack loader is called babel-loader, and depends on babel-core as a peer dependency. Install both with `npm install -D babel-core babel-loader`.\n\nNext we need to setup a babelrc file in the project root. This file configures the Babel plugins we need.\n\nTo setup this file, I used [@brigand](https://github.com/brigand)'s [config-wizard](https://brigand.github.io/config-wizard/?babelrc), with options \"Play it safe\", \"None/Other\", [\"IE11\", \"iOS\", \"Chrome\", \"Firefox\"]. This instructs us to install babel-preset-env with `npm install -D babel-preset-env`, and gives us our file content for `.babelrc`:\n```json\n{\n  \"presets\": [\n    [\n      \"env\",\n      {\n        \"targets\": {\n          \"browsers\": [\n            \"ie 11\",\n            \"last 2 Chrome versions\",\n            \"last 2 Firefox versions\",\n            \"last 2 iOS versions\"\n          ]\n        }\n      }\n    ]\n  ]\n}\n```\nNow we need to add babel-loader to `webpack.config.js`. We're adding a `modules` property with some options:\n```js\n  module: {\n    rules: [\n      {\n        test : /\\.js/,\n        include: path.resolve(__dirname, 'src/'),\n        use: ['babel-loader'],\n      },\n    ],\n  },\n```\n>[View diff of file change](https://gist.github.com/samsch/15a058bd059b1bfe57d2400003348736)\n\nWith these changes, we can now use the same commands as before (`npm start`, `npm run dev`, `npm run build`), and it will work just the same, except that now if we use ES2015/16/17 code, it will be compiled to ES5 Javascript.\n\n### Polyfills\n\nNow we need to add the Babel polyfill (which is actually core-js and regenerator). Install it with `npm install -D babel-polyfill`. There are a couple ways to include polyfills in your code. The simplest is to just add `import 'babel-polyfill';` to the top of your entry file (`src/main.js`). A slightly cleaner approach is to include them via webpack config, which also makes the polyfills part of the build, rather than part of your code. We need to change the `entry` property in `webpack.config.js` to be `entry: ['babel-polyfill', './src/main.js'],`.\n>[webpack.config.js diff](https://gist.github.com/samsch/0df1433b029dda87d73f092cf119d837)\n\n## Test modern to ES5 compilation\n\nLet's show that our code is being compiled properly. Change `srv/main.js` to be:\n```js\nimport foo from './foo';\n\nfoo();\n\nconst j = () => console.log('Babel compilation is working!');\n\nj();\n```\nIf we compile with `npm run build`, and search in the (minified) `public/bundle.js` for \"Babel compilation is working!\", we find `function(){console.log(\"Babel compilation is working!\")}`, which is using the `function` keyword rather than using an arrow function like our source.\n\n## React... and more!\n\nWhat we have now gives us great modern Javascript workflow, while supporting common browsers. Our next step takes us to features outside of Javascript. To work with React, most developers use JSX, which is an HTML-like language that compiles to Javascript. To add JSX support, all we need to do is install babel-preset-react, add it to `.babelrc`, and possibly make a minor change to our webpack config.\n\nFirst add babel-preset-react with `npm install -D babel-preset-react`. Then change `.babelrc` to be:\n```json\n{\n  \"presets\": [\n    [\n      \"env\",\n      {\n        \"targets\": {\n          \"browsers\": [\n            \"last 2 Chrome versions\",\n            \"last 2 Firefox versions\",\n            \"last 2 iOS versions\",\n            \"ie 11\"\n          ]\n        }\n      }\n    ],\n    \"react\"\n  ]\n}\n```\n>Generated with config-wizard similar to before, this time replacing \"None/Other\" with \"React\".\n\nWith just those changes, we can now compile JSX in our js files. Some developers prefer to use a different file extension for React components though: `.jsx`. We can support this by making a small change to our `test` line in `webpack.config.js`. Replace `test : /\\.js/,` with `test : /\\.jsx?/,`. Now Wepack will use babel-loader for `.js` and `.jsx` files.\n>[webpack config diff](https://gist.github.com/samsch/54abd031b6ca088abe652371c8dd8754)\n\n## Test React compilation\n\nTo see that we can now compile JSX, lets change `src/foo.js` to run some React code:\n```js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst foo = function() {\n  ReactDOM.render(\n    <div>\n      <h1>Hello, world!</h1>\n      <p>This was rendered with React.</p>\n    </div>,\n    document.getElementById('app-body')\n  );\n}\n\nexport default foo;\n```\nSince we're importing React and ReactDOM, we also need to install them, so run `npm install -D react react-dom`.\n\nNow we can run `npm start`, and we should see our \"Hello, world!\" and the rendered by React message.\n\n## Next steps\n\nWe have a fully functional Webpack and Babel workflow now, which supports modern Javascript and React. The final product can be found in [basic-webpack-react](https://github.com/samsch/basic-webpack-react).\n\nFor moving beyond what's here, there are many Webpack loaders, and more features which can't be covered in a basic guide. Some popular topics:\n- [Loading styles](https://webpack.js.org/loaders/#styling)\n- [Code splitting](https://webpack.js.org/guides/code-splitting-import/)\n- [Hot modules replacement (HMR)](https://webpack.js.org/guides/hmr-react/)\n\nHappy coding!\n","slug":"getting-started-with-webpack-part-2","published":1,"updated":"2018-08-30T18:30:26.450Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckixl4zvy0009jku3q40jj1ek","content":"<p>In <a href=\"https://samsch.org/2017/04/08/getting-started-with-webpack/\">Part 1</a>, we setup basic production ready functionality in Webpack. We can organize our code into modules, build them into a single file bundle, and have the build process run automatically, refreshing our project in a webpage.</p>\n<p>Our next step is to have our build system compile modern Javascript (ES2015, ES2016, ES2017) into code which can be run in current browsers (ES5). We also need to add in polyfills for some of the additional non-syntax language features.</p>\n<p>We also will enable JSX compilation for use with React.</p>\n<h2 id=\"Loaders-and-our-starting-point\"><a href=\"#Loaders-and-our-starting-point\" class=\"headerlink\" title=\"Loaders and our starting point\"></a>Loaders and our starting point</h2><p>Webpack has a couple ways to extend its functionality. There is a <a href=\"https://webpack.js.org/plugins/\" target=\"_blank\" rel=\"external\">plugin system</a>, which used for tools such as UglifyJS for code minification, and there is the <a href=\"https://webpack.js.org/loaders/\" target=\"_blank\" rel=\"external\">loader system</a>. Loaders allow you to pre-process files before they are added to the bundle.</p>\n<p>We will use the final product of Part 1 as our starting point. You can clone the <a href=\"https://github.com/samsch/basic-webpack-no-loaders\" target=\"_blank\" rel=\"external\">basic-webpack-no-loaders</a> repo to follow along, or if you followed Part 1, the project you ended up with.</p>\n<h2 id=\"Final-result\"><a href=\"#Final-result\" class=\"headerlink\" title=\"Final result\"></a>Final result</h2><p>If you don’t want to build the whole thing, or want to look ahead, the final result is in <a href=\"https://github.com/samsch/basic-webpack-react\" target=\"_blank\" rel=\"external\">basic-webpack-react</a>.</p>\n<h2 id=\"Adding-Babel\"><a href=\"#Adding-Babel\" class=\"headerlink\" title=\"Adding Babel\"></a>Adding Babel</h2><p>Our first step is to add and configure Babel. Babel is a Javascript and near-Javascript compiler. The Webpack loader is called babel-loader, and depends on babel-core as a peer dependency. Install both with <code>npm install -D babel-core babel-loader</code>.</p>\n<p>Next we need to setup a babelrc file in the project root. This file configures the Babel plugins we need.</p>\n<p>To setup this file, I used <a href=\"https://github.com/brigand\" target=\"_blank\" rel=\"external\">@brigand</a>‘s <a href=\"https://brigand.github.io/config-wizard/?babelrc\" target=\"_blank\" rel=\"external\">config-wizard</a>, with options “Play it safe”, “None/Other”, [“IE11”, “iOS”, “Chrome”, “Firefox”]. This instructs us to install babel-preset-env with <code>npm install -D babel-preset-env</code>, and gives us our file content for <code>.babelrc</code>:<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"presets\"</span>: [</div><div class=\"line\">    [</div><div class=\"line\">      <span class=\"string\">\"env\"</span>,</div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"attr\">\"targets\"</span>: &#123;</div><div class=\"line\">          <span class=\"attr\">\"browsers\"</span>: [</div><div class=\"line\">            <span class=\"string\">\"ie 11\"</span>,</div><div class=\"line\">            <span class=\"string\">\"last 2 Chrome versions\"</span>,</div><div class=\"line\">            <span class=\"string\">\"last 2 Firefox versions\"</span>,</div><div class=\"line\">            <span class=\"string\">\"last 2 iOS versions\"</span></div><div class=\"line\">          ]</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Now we need to add babel-loader to <code>webpack.config.js</code>. We’re adding a <code>modules</code> property with some options:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>: &#123;</div><div class=\"line\">  rules: [</div><div class=\"line\">    &#123;</div><div class=\"line\">      test : <span class=\"regexp\">/\\.js/</span>,</div><div class=\"line\">      include: path.resolve(__dirname, <span class=\"string\">'src/'</span>),</div><div class=\"line\">      use: [<span class=\"string\">'babel-loader'</span>],</div><div class=\"line\">    &#125;,</div><div class=\"line\">  ],</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p><a href=\"https://gist.github.com/samsch/15a058bd059b1bfe57d2400003348736\" target=\"_blank\" rel=\"external\">View diff of file change</a></p>\n</blockquote>\n<p>With these changes, we can now use the same commands as before (<code>npm start</code>, <code>npm run dev</code>, <code>npm run build</code>), and it will work just the same, except that now if we use ES2015/16/17 code, it will be compiled to ES5 Javascript.</p>\n<h3 id=\"Polyfills\"><a href=\"#Polyfills\" class=\"headerlink\" title=\"Polyfills\"></a>Polyfills</h3><p>Now we need to add the Babel polyfill (which is actually core-js and regenerator). Install it with <code>npm install -D babel-polyfill</code>. There are a couple ways to include polyfills in your code. The simplest is to just add <code>import &#39;babel-polyfill&#39;;</code> to the top of your entry file (<code>src/main.js</code>). A slightly cleaner approach is to include them via webpack config, which also makes the polyfills part of the build, rather than part of your code. We need to change the <code>entry</code> property in <code>webpack.config.js</code> to be <code>entry: [&#39;babel-polyfill&#39;, &#39;./src/main.js&#39;],</code>.</p>\n<blockquote>\n<p><a href=\"https://gist.github.com/samsch/0df1433b029dda87d73f092cf119d837\" target=\"_blank\" rel=\"external\">webpack.config.js diff</a></p>\n</blockquote>\n<h2 id=\"Test-modern-to-ES5-compilation\"><a href=\"#Test-modern-to-ES5-compilation\" class=\"headerlink\" title=\"Test modern to ES5 compilation\"></a>Test modern to ES5 compilation</h2><p>Let’s show that our code is being compiled properly. Change <code>srv/main.js</code> to be:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> foo <span class=\"keyword\">from</span> <span class=\"string\">'./foo'</span>;</div><div class=\"line\"></div><div class=\"line\">foo();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> j = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'Babel compilation is working!'</span>);</div><div class=\"line\"></div><div class=\"line\">j();</div></pre></td></tr></table></figure></p>\n<p>If we compile with <code>npm run build</code>, and search in the (minified) <code>public/bundle.js</code> for “Babel compilation is working!”, we find <code>function(){console.log(&quot;Babel compilation is working!&quot;)}</code>, which is using the <code>function</code> keyword rather than using an arrow function like our source.</p>\n<h2 id=\"React…-and-more\"><a href=\"#React…-and-more\" class=\"headerlink\" title=\"React… and more!\"></a>React… and more!</h2><p>What we have now gives us great modern Javascript workflow, while supporting common browsers. Our next step takes us to features outside of Javascript. To work with React, most developers use JSX, which is an HTML-like language that compiles to Javascript. To add JSX support, all we need to do is install babel-preset-react, add it to <code>.babelrc</code>, and possibly make a minor change to our webpack config.</p>\n<p>First add babel-preset-react with <code>npm install -D babel-preset-react</code>. Then change <code>.babelrc</code> to be:<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"presets\"</span>: [</div><div class=\"line\">    [</div><div class=\"line\">      <span class=\"string\">\"env\"</span>,</div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"attr\">\"targets\"</span>: &#123;</div><div class=\"line\">          <span class=\"attr\">\"browsers\"</span>: [</div><div class=\"line\">            <span class=\"string\">\"last 2 Chrome versions\"</span>,</div><div class=\"line\">            <span class=\"string\">\"last 2 Firefox versions\"</span>,</div><div class=\"line\">            <span class=\"string\">\"last 2 iOS versions\"</span>,</div><div class=\"line\">            <span class=\"string\">\"ie 11\"</span></div><div class=\"line\">          ]</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"string\">\"react\"</span></div><div class=\"line\">  ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>Generated with config-wizard similar to before, this time replacing “None/Other” with “React”.</p>\n</blockquote>\n<p>With just those changes, we can now compile JSX in our js files. Some developers prefer to use a different file extension for React components though: <code>.jsx</code>. We can support this by making a small change to our <code>test</code> line in <code>webpack.config.js</code>. Replace <code>test : /\\.js/,</code> with <code>test : /\\.jsx?/,</code>. Now Wepack will use babel-loader for <code>.js</code> and <code>.jsx</code> files.</p>\n<blockquote>\n<p><a href=\"https://gist.github.com/samsch/54abd031b6ca088abe652371c8dd8754\" target=\"_blank\" rel=\"external\">webpack config diff</a></p>\n</blockquote>\n<h2 id=\"Test-React-compilation\"><a href=\"#Test-React-compilation\" class=\"headerlink\" title=\"Test React compilation\"></a>Test React compilation</h2><p>To see that we can now compile JSX, lets change <code>src/foo.js</code> to run some React code:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  ReactDOM.render(</div><div class=\"line\">    &lt;div&gt;</div><div class=\"line\">      &lt;h1&gt;Hello, world!<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></div><div class=\"line\">      &lt;p&gt;This was rendered <span class=\"keyword\">with</span> React.&lt;<span class=\"regexp\">/p&gt;</span></div><div class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;,</div><div class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'app-body'</span>)</div><div class=\"line\">  );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> foo;</div></pre></td></tr></table></figure></p>\n<p>Since we’re importing React and ReactDOM, we also need to install them, so run <code>npm install -D react react-dom</code>.</p>\n<p>Now we can run <code>npm start</code>, and we should see our “Hello, world!” and the rendered by React message.</p>\n<h2 id=\"Next-steps\"><a href=\"#Next-steps\" class=\"headerlink\" title=\"Next steps\"></a>Next steps</h2><p>We have a fully functional Webpack and Babel workflow now, which supports modern Javascript and React. The final product can be found in <a href=\"https://github.com/samsch/basic-webpack-react\" target=\"_blank\" rel=\"external\">basic-webpack-react</a>.</p>\n<p>For moving beyond what’s here, there are many Webpack loaders, and more features which can’t be covered in a basic guide. Some popular topics:</p>\n<ul>\n<li><a href=\"https://webpack.js.org/loaders/#styling\" target=\"_blank\" rel=\"external\">Loading styles</a></li>\n<li><a href=\"https://webpack.js.org/guides/code-splitting-import/\" target=\"_blank\" rel=\"external\">Code splitting</a></li>\n<li><a href=\"https://webpack.js.org/guides/hmr-react/\" target=\"_blank\" rel=\"external\">Hot modules replacement (HMR)</a></li>\n</ul>\n<p>Happy coding!</p>\n","site":{"data":{}},"excerpt":"","more":"<p>In <a href=\"https://samsch.org/2017/04/08/getting-started-with-webpack/\">Part 1</a>, we setup basic production ready functionality in Webpack. We can organize our code into modules, build them into a single file bundle, and have the build process run automatically, refreshing our project in a webpage.</p>\n<p>Our next step is to have our build system compile modern Javascript (ES2015, ES2016, ES2017) into code which can be run in current browsers (ES5). We also need to add in polyfills for some of the additional non-syntax language features.</p>\n<p>We also will enable JSX compilation for use with React.</p>\n<h2 id=\"Loaders-and-our-starting-point\"><a href=\"#Loaders-and-our-starting-point\" class=\"headerlink\" title=\"Loaders and our starting point\"></a>Loaders and our starting point</h2><p>Webpack has a couple ways to extend its functionality. There is a <a href=\"https://webpack.js.org/plugins/\" target=\"_blank\" rel=\"external\">plugin system</a>, which used for tools such as UglifyJS for code minification, and there is the <a href=\"https://webpack.js.org/loaders/\" target=\"_blank\" rel=\"external\">loader system</a>. Loaders allow you to pre-process files before they are added to the bundle.</p>\n<p>We will use the final product of Part 1 as our starting point. You can clone the <a href=\"https://github.com/samsch/basic-webpack-no-loaders\" target=\"_blank\" rel=\"external\">basic-webpack-no-loaders</a> repo to follow along, or if you followed Part 1, the project you ended up with.</p>\n<h2 id=\"Final-result\"><a href=\"#Final-result\" class=\"headerlink\" title=\"Final result\"></a>Final result</h2><p>If you don’t want to build the whole thing, or want to look ahead, the final result is in <a href=\"https://github.com/samsch/basic-webpack-react\" target=\"_blank\" rel=\"external\">basic-webpack-react</a>.</p>\n<h2 id=\"Adding-Babel\"><a href=\"#Adding-Babel\" class=\"headerlink\" title=\"Adding Babel\"></a>Adding Babel</h2><p>Our first step is to add and configure Babel. Babel is a Javascript and near-Javascript compiler. The Webpack loader is called babel-loader, and depends on babel-core as a peer dependency. Install both with <code>npm install -D babel-core babel-loader</code>.</p>\n<p>Next we need to setup a babelrc file in the project root. This file configures the Babel plugins we need.</p>\n<p>To setup this file, I used <a href=\"https://github.com/brigand\" target=\"_blank\" rel=\"external\">@brigand</a>‘s <a href=\"https://brigand.github.io/config-wizard/?babelrc\" target=\"_blank\" rel=\"external\">config-wizard</a>, with options “Play it safe”, “None/Other”, [“IE11”, “iOS”, “Chrome”, “Firefox”]. This instructs us to install babel-preset-env with <code>npm install -D babel-preset-env</code>, and gives us our file content for <code>.babelrc</code>:<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"presets\"</span>: [</div><div class=\"line\">    [</div><div class=\"line\">      <span class=\"string\">\"env\"</span>,</div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"attr\">\"targets\"</span>: &#123;</div><div class=\"line\">          <span class=\"attr\">\"browsers\"</span>: [</div><div class=\"line\">            <span class=\"string\">\"ie 11\"</span>,</div><div class=\"line\">            <span class=\"string\">\"last 2 Chrome versions\"</span>,</div><div class=\"line\">            <span class=\"string\">\"last 2 Firefox versions\"</span>,</div><div class=\"line\">            <span class=\"string\">\"last 2 iOS versions\"</span></div><div class=\"line\">          ]</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Now we need to add babel-loader to <code>webpack.config.js</code>. We’re adding a <code>modules</code> property with some options:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>: &#123;</div><div class=\"line\">  rules: [</div><div class=\"line\">    &#123;</div><div class=\"line\">      test : <span class=\"regexp\">/\\.js/</span>,</div><div class=\"line\">      include: path.resolve(__dirname, <span class=\"string\">'src/'</span>),</div><div class=\"line\">      use: [<span class=\"string\">'babel-loader'</span>],</div><div class=\"line\">    &#125;,</div><div class=\"line\">  ],</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p><a href=\"https://gist.github.com/samsch/15a058bd059b1bfe57d2400003348736\" target=\"_blank\" rel=\"external\">View diff of file change</a></p>\n</blockquote>\n<p>With these changes, we can now use the same commands as before (<code>npm start</code>, <code>npm run dev</code>, <code>npm run build</code>), and it will work just the same, except that now if we use ES2015/16/17 code, it will be compiled to ES5 Javascript.</p>\n<h3 id=\"Polyfills\"><a href=\"#Polyfills\" class=\"headerlink\" title=\"Polyfills\"></a>Polyfills</h3><p>Now we need to add the Babel polyfill (which is actually core-js and regenerator). Install it with <code>npm install -D babel-polyfill</code>. There are a couple ways to include polyfills in your code. The simplest is to just add <code>import &#39;babel-polyfill&#39;;</code> to the top of your entry file (<code>src/main.js</code>). A slightly cleaner approach is to include them via webpack config, which also makes the polyfills part of the build, rather than part of your code. We need to change the <code>entry</code> property in <code>webpack.config.js</code> to be <code>entry: [&#39;babel-polyfill&#39;, &#39;./src/main.js&#39;],</code>.</p>\n<blockquote>\n<p><a href=\"https://gist.github.com/samsch/0df1433b029dda87d73f092cf119d837\" target=\"_blank\" rel=\"external\">webpack.config.js diff</a></p>\n</blockquote>\n<h2 id=\"Test-modern-to-ES5-compilation\"><a href=\"#Test-modern-to-ES5-compilation\" class=\"headerlink\" title=\"Test modern to ES5 compilation\"></a>Test modern to ES5 compilation</h2><p>Let’s show that our code is being compiled properly. Change <code>srv/main.js</code> to be:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> foo <span class=\"keyword\">from</span> <span class=\"string\">'./foo'</span>;</div><div class=\"line\"></div><div class=\"line\">foo();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> j = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'Babel compilation is working!'</span>);</div><div class=\"line\"></div><div class=\"line\">j();</div></pre></td></tr></table></figure></p>\n<p>If we compile with <code>npm run build</code>, and search in the (minified) <code>public/bundle.js</code> for “Babel compilation is working!”, we find <code>function(){console.log(&quot;Babel compilation is working!&quot;)}</code>, which is using the <code>function</code> keyword rather than using an arrow function like our source.</p>\n<h2 id=\"React…-and-more\"><a href=\"#React…-and-more\" class=\"headerlink\" title=\"React… and more!\"></a>React… and more!</h2><p>What we have now gives us great modern Javascript workflow, while supporting common browsers. Our next step takes us to features outside of Javascript. To work with React, most developers use JSX, which is an HTML-like language that compiles to Javascript. To add JSX support, all we need to do is install babel-preset-react, add it to <code>.babelrc</code>, and possibly make a minor change to our webpack config.</p>\n<p>First add babel-preset-react with <code>npm install -D babel-preset-react</code>. Then change <code>.babelrc</code> to be:<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"presets\"</span>: [</div><div class=\"line\">    [</div><div class=\"line\">      <span class=\"string\">\"env\"</span>,</div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"attr\">\"targets\"</span>: &#123;</div><div class=\"line\">          <span class=\"attr\">\"browsers\"</span>: [</div><div class=\"line\">            <span class=\"string\">\"last 2 Chrome versions\"</span>,</div><div class=\"line\">            <span class=\"string\">\"last 2 Firefox versions\"</span>,</div><div class=\"line\">            <span class=\"string\">\"last 2 iOS versions\"</span>,</div><div class=\"line\">            <span class=\"string\">\"ie 11\"</span></div><div class=\"line\">          ]</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"string\">\"react\"</span></div><div class=\"line\">  ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>Generated with config-wizard similar to before, this time replacing “None/Other” with “React”.</p>\n</blockquote>\n<p>With just those changes, we can now compile JSX in our js files. Some developers prefer to use a different file extension for React components though: <code>.jsx</code>. We can support this by making a small change to our <code>test</code> line in <code>webpack.config.js</code>. Replace <code>test : /\\.js/,</code> with <code>test : /\\.jsx?/,</code>. Now Wepack will use babel-loader for <code>.js</code> and <code>.jsx</code> files.</p>\n<blockquote>\n<p><a href=\"https://gist.github.com/samsch/54abd031b6ca088abe652371c8dd8754\" target=\"_blank\" rel=\"external\">webpack config diff</a></p>\n</blockquote>\n<h2 id=\"Test-React-compilation\"><a href=\"#Test-React-compilation\" class=\"headerlink\" title=\"Test React compilation\"></a>Test React compilation</h2><p>To see that we can now compile JSX, lets change <code>src/foo.js</code> to run some React code:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  ReactDOM.render(</div><div class=\"line\">    &lt;div&gt;</div><div class=\"line\">      &lt;h1&gt;Hello, world!<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></div><div class=\"line\">      &lt;p&gt;This was rendered <span class=\"keyword\">with</span> React.&lt;<span class=\"regexp\">/p&gt;</span></div><div class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;,</div><div class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'app-body'</span>)</div><div class=\"line\">  );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> foo;</div></pre></td></tr></table></figure></p>\n<p>Since we’re importing React and ReactDOM, we also need to install them, so run <code>npm install -D react react-dom</code>.</p>\n<p>Now we can run <code>npm start</code>, and we should see our “Hello, world!” and the rendered by React message.</p>\n<h2 id=\"Next-steps\"><a href=\"#Next-steps\" class=\"headerlink\" title=\"Next steps\"></a>Next steps</h2><p>We have a fully functional Webpack and Babel workflow now, which supports modern Javascript and React. The final product can be found in <a href=\"https://github.com/samsch/basic-webpack-react\" target=\"_blank\" rel=\"external\">basic-webpack-react</a>.</p>\n<p>For moving beyond what’s here, there are many Webpack loaders, and more features which can’t be covered in a basic guide. Some popular topics:</p>\n<ul>\n<li><a href=\"https://webpack.js.org/loaders/#styling\" target=\"_blank\" rel=\"external\">Loading styles</a></li>\n<li><a href=\"https://webpack.js.org/guides/code-splitting-import/\" target=\"_blank\" rel=\"external\">Code splitting</a></li>\n<li><a href=\"https://webpack.js.org/guides/hmr-react/\" target=\"_blank\" rel=\"external\">Hot modules replacement (HMR)</a></li>\n</ul>\n<p>Happy coding!</p>\n"},{"title":"Getting Started with React","date":"2017-04-21T22:36:00.000Z","_content":"This will be the fast course to get a productive React development flow going. The only real prerequisite (besides a working computer and internet connection) is having a recent version of Node.js installed (as written, this is version 7.9.0, and LTS 6.10.2).\n\nWhat this guide does not do is teach you Javascript or React. This just gets the environment in place.\n\n## Let's go!\nFirst thing to do is create your new project folder (I'll be using `react-project` in this guide), and run `npm init`. The requested information doesn't directly impact what we are going to be doing, so use whatever values you want.\n\nWe need an html page to attach our app to, so create a `public/` folder, and inside, create `index.html`. Paste this content into it:\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Basic React App</title>\n</head>\n<body>\n    <div id=\"app\"></div>\n    <script src=\"bundle.js\"></script>\n</body>\n</html>\n```\nIf you are looking at this and saying, \"man, that's a pretty sparse web page\", well, you're right. For a \"real\" app, you are going to want to put your extra meta tags in, maybe Google Analytics, a link to your favicon, and whatever else you need. We'll get to the content next.\n\n### Application source\n\nCreate a `src/` folder in the root of your project. All of your project specific source will be in this folder. For now, just create a `main.js` file in `src/`, and copy these contents into it:\n```js\nimport React from 'react';\nimport ReactDOM  from 'react-dom';\n\nReactDOM.render(\n    <h1>Hello, world!</h1>,\n    document.getElementById('app')\n);\n```\n\nSo now your project folder should look like this:\n```\n- react-project\n |- package.json\n |- src/\n | |- main.js\n |- public/\n   |- index.html\n```\n\nWell, we can see from above that we need at least a few dependencies from npm installed, so lets get started on those.\n\nRun `npm install --save react react-dom`.\n\nThe `react` package is the ReactJS library, and `react-dom` is a sister library which lets you render a React virtual DOM to the real DOM.\n\nThat actually covers the entire source of the application. Now all we need to do is build it.\n\n### Setting up Webpack\n\nSo, we primarily need two tools for building a React application: Webpack, and Babel.\n\nBabel is a Javascript compiler (sometimes called a transpiler). It takes JSX and modern (ES2015, ES2016, and beyond) Javascript syntax, and compiles it to ES5 Javascript, which allows your modern code to run in older browsers.\n\n>The compiled code potentially can work with even IE8 (with some extra effort). However, IE9 is the oldest browser which \"normally\" works. In 2017, IE11 and Android Browser are the targets of primary concern.\n\nWebpack is a module bundler. You give it an entry point file which uses ES Modules or CommonJS (which is the same syntax that Node uses for its modules), and it finds and \"bundles\" all the required files into a single file, which you can then include in your web page.\n\nSo, lets install Webpack and Babel. Run `npm install --save-dev webpack babel-core babel-loader babel-polyfill`. Wait, what is babel-loader? Webpack plugins which change the bundled code are called loaders. babel-loader is then the Webpack plugin which allows Babel to be run against the files to be bundled. And babel-polyfill? That's to fill in additions to Javascript in ES2015+ that do not require new syntax, such as methods like `Object.includes` and objects like `Promise`.\n\n\"That's it right? now we just run `webpack` and we're done, right?\" Not quite.\n\nOur next step is to configure webpack. Technically, we could forgo configuring, and just use command line arguments to the Webpack cli interface. That would look something like `webpack src/main.js public/bundle.js --module-bind 'js=babel'`. However, using a configuration file is much more expressive, gives you more options, and is easier to maintain. So create `webpack.config.js` in the root of your project, and copy this into it:\n```js\nconst webpack = require('webpack');\nconst path = require('path');\n\nconst BUILD_DIR = path.resolve(__dirname, 'public');\nconst APP_DIR = path.resolve(__dirname, 'src/');\n\nconst config = {\n    entry: ['babel-polyfill', APP_DIR + '/main.js'],\n    output: {\n        path: BUILD_DIR,\n        filename: 'bundle.js'\n    },\n    module : {\n        rules : [\n            {\n                test : /\\.jsx?/,\n                include : APP_DIR,\n                use : 'babel-loader',\n            }\n        ]\n    },\n};\n\nmodule.exports = config;\n```\nWow, that's a lot of configuration for a simple app! Let's take a closer look though. The first two lines are just requiring Webpack and the Node \"path\" module, and the next two lines are just setting some constants.\n\nAfter that we have the actual configuration for Webpack. One nice point to note is that Webpack's configuration file is a Javascript file, not JSON like many others are (allowing comments, trailing commas, etc). In our configuration we set the `entry` property, which is the file that Webpack starts at (more on that in a moment); the `output`, which is where Webpack saves the compiled code; and the `module` property.\n\nThe `entry` configuration can take a string, array, or object. If you use a string, it should point at the single file that starts your application. If you use an array, Webpack will concatenate the files. Using an object allows you to have multiple entry points, which is for building multiple separate apps. In our case, we need our main.js file and babel-polyfill (which is loaded first).\n\nOur `module` property has a `rules` property, which is an array of the defined loaders. For now, we are just defining babel-loader. `test` is a regex to match against file extensions. I'm using a pattern which matches `.js` and `.jsx` files. You could also choose to set it to only compile files with the JSX extension, by using `/\\.jsx/`, or if you decide not to use .jsx at all, just use `/\\.js/` to .js files. The `include` property tells Webpack that you only want to compile files in a specific folder. This is because you should never need to compile files from `node_modules`, since libraries should already be compiled with Babel (if they needed to be). This only stops Webpack from running Babel on files outside of APP_DIR, it doesn't stop Webpack from bundling those files into the output. The `use` property defines our loader, which is Babel.\n\nThe last line is simply exporting the configuration. By default, when Webpack runs, it uses `webpack.config.js` if it exists.\n\nAnd that's it for our Webpack configuration. Now we just need to add our command to package.json:\n```json\n{\n  ...\n  \"scripts\": {\n    ...\n    \"dev\": \"webpack -d --watch\",\n    \"build\": \"webpack -p\"\n  },\n  ...\n}\n```\nWe add two npm scripts, \"dev\" and \"build\". \"dev\" will run Webpack with \"-d --watch\", which sets webpack in debug mode (more verbose, and outputs code maps for the browser), and in watch mode, which means it continuously runs, re-compiling whenever a bundled file changes. \"build\" runs Webpack with \"-p\", which enables production mode. In production mode, the output is uglified (using Uglify), and any instances of `process.env.NODE_ENV` are replaced with `\"production\"`. That last part is important because it allows Uglify to remove React's internal debugging tools (which lets it run faster).\n\n### Setup Babel\n\nOk, we're almost there. We have everything in place except for a little bit of Babel configuration. This one is easy. Create `.babelrc` in your project root, and copy this into it:\n```json\n{\n    \"presets\" : [\"latest\", \"react\"]\n}\n```\nWhat this does is tell Babel to compile ES2015+ and JSX to ES5 Javascript. These presets don't come with Babel, so install them with `npm install --save-dev babel-preset-latest babel-preset-react`.\n\nThis is the simple approach to the Babel config. For a more explicit configuration (such as for targeting ES2015 compatible browsers), check out @brigand's [config-wizard](https://brigand.github.io/config-wizard/?babelrc).\n\n### Run!\n\nThat pretty much covers it. And now you know why the React workflow is notorious for being difficult to setup. While it's not actually that complex, there are many steps to the process, at least the first time through.\n\nSo, finally, to start your development environment, run `npm run dev`. You should see some output from Webpack, and two more files should appear in `public/`: `bundle.js` and `bundle.js.map`.\n\nNow you just need a server to get these files into your browser. My go-to mini-server is `http-server`, available with npm. I install very few npm packages globally, but this is one. Install it with `npm install -g http-server`, then run it from your project root with `http-server public`. Now you should be able to visit `localhost:8080` in your browser, and see the web app you just created!\n\n## Just give me the final product already\n\n[Here it is, the whole thing wrapped up in a Github Repository.](https://github.com/samsch/basic-react)\n","source":"_posts/2017-04-21-getting-started-with-react.md","raw":"---\ntitle: Getting Started with React\ndate: 2017-04-21 18:36:00\ntags:\n- React\n- Webpack\n- developer experience\n- js\n---\nThis will be the fast course to get a productive React development flow going. The only real prerequisite (besides a working computer and internet connection) is having a recent version of Node.js installed (as written, this is version 7.9.0, and LTS 6.10.2).\n\nWhat this guide does not do is teach you Javascript or React. This just gets the environment in place.\n\n## Let's go!\nFirst thing to do is create your new project folder (I'll be using `react-project` in this guide), and run `npm init`. The requested information doesn't directly impact what we are going to be doing, so use whatever values you want.\n\nWe need an html page to attach our app to, so create a `public/` folder, and inside, create `index.html`. Paste this content into it:\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Basic React App</title>\n</head>\n<body>\n    <div id=\"app\"></div>\n    <script src=\"bundle.js\"></script>\n</body>\n</html>\n```\nIf you are looking at this and saying, \"man, that's a pretty sparse web page\", well, you're right. For a \"real\" app, you are going to want to put your extra meta tags in, maybe Google Analytics, a link to your favicon, and whatever else you need. We'll get to the content next.\n\n### Application source\n\nCreate a `src/` folder in the root of your project. All of your project specific source will be in this folder. For now, just create a `main.js` file in `src/`, and copy these contents into it:\n```js\nimport React from 'react';\nimport ReactDOM  from 'react-dom';\n\nReactDOM.render(\n    <h1>Hello, world!</h1>,\n    document.getElementById('app')\n);\n```\n\nSo now your project folder should look like this:\n```\n- react-project\n |- package.json\n |- src/\n | |- main.js\n |- public/\n   |- index.html\n```\n\nWell, we can see from above that we need at least a few dependencies from npm installed, so lets get started on those.\n\nRun `npm install --save react react-dom`.\n\nThe `react` package is the ReactJS library, and `react-dom` is a sister library which lets you render a React virtual DOM to the real DOM.\n\nThat actually covers the entire source of the application. Now all we need to do is build it.\n\n### Setting up Webpack\n\nSo, we primarily need two tools for building a React application: Webpack, and Babel.\n\nBabel is a Javascript compiler (sometimes called a transpiler). It takes JSX and modern (ES2015, ES2016, and beyond) Javascript syntax, and compiles it to ES5 Javascript, which allows your modern code to run in older browsers.\n\n>The compiled code potentially can work with even IE8 (with some extra effort). However, IE9 is the oldest browser which \"normally\" works. In 2017, IE11 and Android Browser are the targets of primary concern.\n\nWebpack is a module bundler. You give it an entry point file which uses ES Modules or CommonJS (which is the same syntax that Node uses for its modules), and it finds and \"bundles\" all the required files into a single file, which you can then include in your web page.\n\nSo, lets install Webpack and Babel. Run `npm install --save-dev webpack babel-core babel-loader babel-polyfill`. Wait, what is babel-loader? Webpack plugins which change the bundled code are called loaders. babel-loader is then the Webpack plugin which allows Babel to be run against the files to be bundled. And babel-polyfill? That's to fill in additions to Javascript in ES2015+ that do not require new syntax, such as methods like `Object.includes` and objects like `Promise`.\n\n\"That's it right? now we just run `webpack` and we're done, right?\" Not quite.\n\nOur next step is to configure webpack. Technically, we could forgo configuring, and just use command line arguments to the Webpack cli interface. That would look something like `webpack src/main.js public/bundle.js --module-bind 'js=babel'`. However, using a configuration file is much more expressive, gives you more options, and is easier to maintain. So create `webpack.config.js` in the root of your project, and copy this into it:\n```js\nconst webpack = require('webpack');\nconst path = require('path');\n\nconst BUILD_DIR = path.resolve(__dirname, 'public');\nconst APP_DIR = path.resolve(__dirname, 'src/');\n\nconst config = {\n    entry: ['babel-polyfill', APP_DIR + '/main.js'],\n    output: {\n        path: BUILD_DIR,\n        filename: 'bundle.js'\n    },\n    module : {\n        rules : [\n            {\n                test : /\\.jsx?/,\n                include : APP_DIR,\n                use : 'babel-loader',\n            }\n        ]\n    },\n};\n\nmodule.exports = config;\n```\nWow, that's a lot of configuration for a simple app! Let's take a closer look though. The first two lines are just requiring Webpack and the Node \"path\" module, and the next two lines are just setting some constants.\n\nAfter that we have the actual configuration for Webpack. One nice point to note is that Webpack's configuration file is a Javascript file, not JSON like many others are (allowing comments, trailing commas, etc). In our configuration we set the `entry` property, which is the file that Webpack starts at (more on that in a moment); the `output`, which is where Webpack saves the compiled code; and the `module` property.\n\nThe `entry` configuration can take a string, array, or object. If you use a string, it should point at the single file that starts your application. If you use an array, Webpack will concatenate the files. Using an object allows you to have multiple entry points, which is for building multiple separate apps. In our case, we need our main.js file and babel-polyfill (which is loaded first).\n\nOur `module` property has a `rules` property, which is an array of the defined loaders. For now, we are just defining babel-loader. `test` is a regex to match against file extensions. I'm using a pattern which matches `.js` and `.jsx` files. You could also choose to set it to only compile files with the JSX extension, by using `/\\.jsx/`, or if you decide not to use .jsx at all, just use `/\\.js/` to .js files. The `include` property tells Webpack that you only want to compile files in a specific folder. This is because you should never need to compile files from `node_modules`, since libraries should already be compiled with Babel (if they needed to be). This only stops Webpack from running Babel on files outside of APP_DIR, it doesn't stop Webpack from bundling those files into the output. The `use` property defines our loader, which is Babel.\n\nThe last line is simply exporting the configuration. By default, when Webpack runs, it uses `webpack.config.js` if it exists.\n\nAnd that's it for our Webpack configuration. Now we just need to add our command to package.json:\n```json\n{\n  ...\n  \"scripts\": {\n    ...\n    \"dev\": \"webpack -d --watch\",\n    \"build\": \"webpack -p\"\n  },\n  ...\n}\n```\nWe add two npm scripts, \"dev\" and \"build\". \"dev\" will run Webpack with \"-d --watch\", which sets webpack in debug mode (more verbose, and outputs code maps for the browser), and in watch mode, which means it continuously runs, re-compiling whenever a bundled file changes. \"build\" runs Webpack with \"-p\", which enables production mode. In production mode, the output is uglified (using Uglify), and any instances of `process.env.NODE_ENV` are replaced with `\"production\"`. That last part is important because it allows Uglify to remove React's internal debugging tools (which lets it run faster).\n\n### Setup Babel\n\nOk, we're almost there. We have everything in place except for a little bit of Babel configuration. This one is easy. Create `.babelrc` in your project root, and copy this into it:\n```json\n{\n    \"presets\" : [\"latest\", \"react\"]\n}\n```\nWhat this does is tell Babel to compile ES2015+ and JSX to ES5 Javascript. These presets don't come with Babel, so install them with `npm install --save-dev babel-preset-latest babel-preset-react`.\n\nThis is the simple approach to the Babel config. For a more explicit configuration (such as for targeting ES2015 compatible browsers), check out @brigand's [config-wizard](https://brigand.github.io/config-wizard/?babelrc).\n\n### Run!\n\nThat pretty much covers it. And now you know why the React workflow is notorious for being difficult to setup. While it's not actually that complex, there are many steps to the process, at least the first time through.\n\nSo, finally, to start your development environment, run `npm run dev`. You should see some output from Webpack, and two more files should appear in `public/`: `bundle.js` and `bundle.js.map`.\n\nNow you just need a server to get these files into your browser. My go-to mini-server is `http-server`, available with npm. I install very few npm packages globally, but this is one. Install it with `npm install -g http-server`, then run it from your project root with `http-server public`. Now you should be able to visit `localhost:8080` in your browser, and see the web app you just created!\n\n## Just give me the final product already\n\n[Here it is, the whole thing wrapped up in a Github Repository.](https://github.com/samsch/basic-react)\n","slug":"getting-started-with-react","published":1,"updated":"2017-04-21T22:40:42.265Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckixl4zvz000bjku32ar0th46","content":"<p>This will be the fast course to get a productive React development flow going. The only real prerequisite (besides a working computer and internet connection) is having a recent version of Node.js installed (as written, this is version 7.9.0, and LTS 6.10.2).</p>\n<p>What this guide does not do is teach you Javascript or React. This just gets the environment in place.</p>\n<h2 id=\"Let’s-go\"><a href=\"#Let’s-go\" class=\"headerlink\" title=\"Let’s go!\"></a>Let’s go!</h2><p>First thing to do is create your new project folder (I’ll be using <code>react-project</code> in this guide), and run <code>npm init</code>. The requested information doesn’t directly impact what we are going to be doing, so use whatever values you want.</p>\n<p>We need an html page to attach our app to, so create a <code>public/</code> folder, and inside, create <code>index.html</code>. Paste this content into it:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Basic React App<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"bundle.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>If you are looking at this and saying, “man, that’s a pretty sparse web page”, well, you’re right. For a “real” app, you are going to want to put your extra meta tags in, maybe Google Analytics, a link to your favicon, and whatever else you need. We’ll get to the content next.</p>\n<h3 id=\"Application-source\"><a href=\"#Application-source\" class=\"headerlink\" title=\"Application source\"></a>Application source</h3><p>Create a <code>src/</code> folder in the root of your project. All of your project specific source will be in this folder. For now, just create a <code>main.js</code> file in <code>src/</code>, and copy these contents into it:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> ReactDOM  <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>;</div><div class=\"line\"></div><div class=\"line\">ReactDOM.render(</div><div class=\"line\">    &lt;h1&gt;Hello, world!<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>,</div><div class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'app'</span>)</div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n<p>So now your project folder should look like this:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">- react-project</div><div class=\"line\"> |- package.json</div><div class=\"line\"> |- src/</div><div class=\"line\"> | |- main.js</div><div class=\"line\"> |- public/</div><div class=\"line\">   |- index.html</div></pre></td></tr></table></figure></p>\n<p>Well, we can see from above that we need at least a few dependencies from npm installed, so lets get started on those.</p>\n<p>Run <code>npm install --save react react-dom</code>.</p>\n<p>The <code>react</code> package is the ReactJS library, and <code>react-dom</code> is a sister library which lets you render a React virtual DOM to the real DOM.</p>\n<p>That actually covers the entire source of the application. Now all we need to do is build it.</p>\n<h3 id=\"Setting-up-Webpack\"><a href=\"#Setting-up-Webpack\" class=\"headerlink\" title=\"Setting up Webpack\"></a>Setting up Webpack</h3><p>So, we primarily need two tools for building a React application: Webpack, and Babel.</p>\n<p>Babel is a Javascript compiler (sometimes called a transpiler). It takes JSX and modern (ES2015, ES2016, and beyond) Javascript syntax, and compiles it to ES5 Javascript, which allows your modern code to run in older browsers.</p>\n<blockquote>\n<p>The compiled code potentially can work with even IE8 (with some extra effort). However, IE9 is the oldest browser which “normally” works. In 2017, IE11 and Android Browser are the targets of primary concern.</p>\n</blockquote>\n<p>Webpack is a module bundler. You give it an entry point file which uses ES Modules or CommonJS (which is the same syntax that Node uses for its modules), and it finds and “bundles” all the required files into a single file, which you can then include in your web page.</p>\n<p>So, lets install Webpack and Babel. Run <code>npm install --save-dev webpack babel-core babel-loader babel-polyfill</code>. Wait, what is babel-loader? Webpack plugins which change the bundled code are called loaders. babel-loader is then the Webpack plugin which allows Babel to be run against the files to be bundled. And babel-polyfill? That’s to fill in additions to Javascript in ES2015+ that do not require new syntax, such as methods like <code>Object.includes</code> and objects like <code>Promise</code>.</p>\n<p>“That’s it right? now we just run <code>webpack</code> and we’re done, right?” Not quite.</p>\n<p>Our next step is to configure webpack. Technically, we could forgo configuring, and just use command line arguments to the Webpack cli interface. That would look something like <code>webpack src/main.js public/bundle.js --module-bind &#39;js=babel&#39;</code>. However, using a configuration file is much more expressive, gives you more options, and is easier to maintain. So create <code>webpack.config.js</code> in the root of your project, and copy this into it:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> BUILD_DIR = path.resolve(__dirname, <span class=\"string\">'public'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> APP_DIR = path.resolve(__dirname, <span class=\"string\">'src/'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> config = &#123;</div><div class=\"line\">    entry: [<span class=\"string\">'babel-polyfill'</span>, APP_DIR + <span class=\"string\">'/main.js'</span>],</div><div class=\"line\">    output: &#123;</div><div class=\"line\">        path: BUILD_DIR,</div><div class=\"line\">        filename: <span class=\"string\">'bundle.js'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"built_in\">module</span> : &#123;</div><div class=\"line\">        rules : [</div><div class=\"line\">            &#123;</div><div class=\"line\">                test : <span class=\"regexp\">/\\.jsx?/</span>,</div><div class=\"line\">                include : APP_DIR,</div><div class=\"line\">                use : <span class=\"string\">'babel-loader'</span>,</div><div class=\"line\">            &#125;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;,</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = config;</div></pre></td></tr></table></figure></p>\n<p>Wow, that’s a lot of configuration for a simple app! Let’s take a closer look though. The first two lines are just requiring Webpack and the Node “path” module, and the next two lines are just setting some constants.</p>\n<p>After that we have the actual configuration for Webpack. One nice point to note is that Webpack’s configuration file is a Javascript file, not JSON like many others are (allowing comments, trailing commas, etc). In our configuration we set the <code>entry</code> property, which is the file that Webpack starts at (more on that in a moment); the <code>output</code>, which is where Webpack saves the compiled code; and the <code>module</code> property.</p>\n<p>The <code>entry</code> configuration can take a string, array, or object. If you use a string, it should point at the single file that starts your application. If you use an array, Webpack will concatenate the files. Using an object allows you to have multiple entry points, which is for building multiple separate apps. In our case, we need our main.js file and babel-polyfill (which is loaded first).</p>\n<p>Our <code>module</code> property has a <code>rules</code> property, which is an array of the defined loaders. For now, we are just defining babel-loader. <code>test</code> is a regex to match against file extensions. I’m using a pattern which matches <code>.js</code> and <code>.jsx</code> files. You could also choose to set it to only compile files with the JSX extension, by using <code>/\\.jsx/</code>, or if you decide not to use .jsx at all, just use <code>/\\.js/</code> to .js files. The <code>include</code> property tells Webpack that you only want to compile files in a specific folder. This is because you should never need to compile files from <code>node_modules</code>, since libraries should already be compiled with Babel (if they needed to be). This only stops Webpack from running Babel on files outside of APP_DIR, it doesn’t stop Webpack from bundling those files into the output. The <code>use</code> property defines our loader, which is Babel.</p>\n<p>The last line is simply exporting the configuration. By default, when Webpack runs, it uses <code>webpack.config.js</code> if it exists.</p>\n<p>And that’s it for our Webpack configuration. Now we just need to add our command to package.json:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  ...</div><div class=\"line\">  \"scripts\": &#123;</div><div class=\"line\">    ...</div><div class=\"line\">    \"dev\": \"webpack -d --watch\",</div><div class=\"line\">    \"build\": \"webpack -p\"</div><div class=\"line\">  &#125;,</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>We add two npm scripts, “dev” and “build”. “dev” will run Webpack with “-d –watch”, which sets webpack in debug mode (more verbose, and outputs code maps for the browser), and in watch mode, which means it continuously runs, re-compiling whenever a bundled file changes. “build” runs Webpack with “-p”, which enables production mode. In production mode, the output is uglified (using Uglify), and any instances of <code>process.env.NODE_ENV</code> are replaced with <code>&quot;production&quot;</code>. That last part is important because it allows Uglify to remove React’s internal debugging tools (which lets it run faster).</p>\n<h3 id=\"Setup-Babel\"><a href=\"#Setup-Babel\" class=\"headerlink\" title=\"Setup Babel\"></a>Setup Babel</h3><p>Ok, we’re almost there. We have everything in place except for a little bit of Babel configuration. This one is easy. Create <code>.babelrc</code> in your project root, and copy this into it:<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"presets\"</span> : [<span class=\"string\">\"latest\"</span>, <span class=\"string\">\"react\"</span>]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>What this does is tell Babel to compile ES2015+ and JSX to ES5 Javascript. These presets don’t come with Babel, so install them with <code>npm install --save-dev babel-preset-latest babel-preset-react</code>.</p>\n<p>This is the simple approach to the Babel config. For a more explicit configuration (such as for targeting ES2015 compatible browsers), check out @brigand’s <a href=\"https://brigand.github.io/config-wizard/?babelrc\" target=\"_blank\" rel=\"external\">config-wizard</a>.</p>\n<h3 id=\"Run\"><a href=\"#Run\" class=\"headerlink\" title=\"Run!\"></a>Run!</h3><p>That pretty much covers it. And now you know why the React workflow is notorious for being difficult to setup. While it’s not actually that complex, there are many steps to the process, at least the first time through.</p>\n<p>So, finally, to start your development environment, run <code>npm run dev</code>. You should see some output from Webpack, and two more files should appear in <code>public/</code>: <code>bundle.js</code> and <code>bundle.js.map</code>.</p>\n<p>Now you just need a server to get these files into your browser. My go-to mini-server is <code>http-server</code>, available with npm. I install very few npm packages globally, but this is one. Install it with <code>npm install -g http-server</code>, then run it from your project root with <code>http-server public</code>. Now you should be able to visit <code>localhost:8080</code> in your browser, and see the web app you just created!</p>\n<h2 id=\"Just-give-me-the-final-product-already\"><a href=\"#Just-give-me-the-final-product-already\" class=\"headerlink\" title=\"Just give me the final product already\"></a>Just give me the final product already</h2><p><a href=\"https://github.com/samsch/basic-react\" target=\"_blank\" rel=\"external\">Here it is, the whole thing wrapped up in a Github Repository.</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>This will be the fast course to get a productive React development flow going. The only real prerequisite (besides a working computer and internet connection) is having a recent version of Node.js installed (as written, this is version 7.9.0, and LTS 6.10.2).</p>\n<p>What this guide does not do is teach you Javascript or React. This just gets the environment in place.</p>\n<h2 id=\"Let’s-go\"><a href=\"#Let’s-go\" class=\"headerlink\" title=\"Let’s go!\"></a>Let’s go!</h2><p>First thing to do is create your new project folder (I’ll be using <code>react-project</code> in this guide), and run <code>npm init</code>. The requested information doesn’t directly impact what we are going to be doing, so use whatever values you want.</p>\n<p>We need an html page to attach our app to, so create a <code>public/</code> folder, and inside, create <code>index.html</code>. Paste this content into it:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Basic React App<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"bundle.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>If you are looking at this and saying, “man, that’s a pretty sparse web page”, well, you’re right. For a “real” app, you are going to want to put your extra meta tags in, maybe Google Analytics, a link to your favicon, and whatever else you need. We’ll get to the content next.</p>\n<h3 id=\"Application-source\"><a href=\"#Application-source\" class=\"headerlink\" title=\"Application source\"></a>Application source</h3><p>Create a <code>src/</code> folder in the root of your project. All of your project specific source will be in this folder. For now, just create a <code>main.js</code> file in <code>src/</code>, and copy these contents into it:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> ReactDOM  <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>;</div><div class=\"line\"></div><div class=\"line\">ReactDOM.render(</div><div class=\"line\">    &lt;h1&gt;Hello, world!<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>,</div><div class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'app'</span>)</div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n<p>So now your project folder should look like this:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">- react-project</div><div class=\"line\"> |- package.json</div><div class=\"line\"> |- src/</div><div class=\"line\"> | |- main.js</div><div class=\"line\"> |- public/</div><div class=\"line\">   |- index.html</div></pre></td></tr></table></figure></p>\n<p>Well, we can see from above that we need at least a few dependencies from npm installed, so lets get started on those.</p>\n<p>Run <code>npm install --save react react-dom</code>.</p>\n<p>The <code>react</code> package is the ReactJS library, and <code>react-dom</code> is a sister library which lets you render a React virtual DOM to the real DOM.</p>\n<p>That actually covers the entire source of the application. Now all we need to do is build it.</p>\n<h3 id=\"Setting-up-Webpack\"><a href=\"#Setting-up-Webpack\" class=\"headerlink\" title=\"Setting up Webpack\"></a>Setting up Webpack</h3><p>So, we primarily need two tools for building a React application: Webpack, and Babel.</p>\n<p>Babel is a Javascript compiler (sometimes called a transpiler). It takes JSX and modern (ES2015, ES2016, and beyond) Javascript syntax, and compiles it to ES5 Javascript, which allows your modern code to run in older browsers.</p>\n<blockquote>\n<p>The compiled code potentially can work with even IE8 (with some extra effort). However, IE9 is the oldest browser which “normally” works. In 2017, IE11 and Android Browser are the targets of primary concern.</p>\n</blockquote>\n<p>Webpack is a module bundler. You give it an entry point file which uses ES Modules or CommonJS (which is the same syntax that Node uses for its modules), and it finds and “bundles” all the required files into a single file, which you can then include in your web page.</p>\n<p>So, lets install Webpack and Babel. Run <code>npm install --save-dev webpack babel-core babel-loader babel-polyfill</code>. Wait, what is babel-loader? Webpack plugins which change the bundled code are called loaders. babel-loader is then the Webpack plugin which allows Babel to be run against the files to be bundled. And babel-polyfill? That’s to fill in additions to Javascript in ES2015+ that do not require new syntax, such as methods like <code>Object.includes</code> and objects like <code>Promise</code>.</p>\n<p>“That’s it right? now we just run <code>webpack</code> and we’re done, right?” Not quite.</p>\n<p>Our next step is to configure webpack. Technically, we could forgo configuring, and just use command line arguments to the Webpack cli interface. That would look something like <code>webpack src/main.js public/bundle.js --module-bind &#39;js=babel&#39;</code>. However, using a configuration file is much more expressive, gives you more options, and is easier to maintain. So create <code>webpack.config.js</code> in the root of your project, and copy this into it:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> BUILD_DIR = path.resolve(__dirname, <span class=\"string\">'public'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> APP_DIR = path.resolve(__dirname, <span class=\"string\">'src/'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> config = &#123;</div><div class=\"line\">    entry: [<span class=\"string\">'babel-polyfill'</span>, APP_DIR + <span class=\"string\">'/main.js'</span>],</div><div class=\"line\">    output: &#123;</div><div class=\"line\">        path: BUILD_DIR,</div><div class=\"line\">        filename: <span class=\"string\">'bundle.js'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"built_in\">module</span> : &#123;</div><div class=\"line\">        rules : [</div><div class=\"line\">            &#123;</div><div class=\"line\">                test : <span class=\"regexp\">/\\.jsx?/</span>,</div><div class=\"line\">                include : APP_DIR,</div><div class=\"line\">                use : <span class=\"string\">'babel-loader'</span>,</div><div class=\"line\">            &#125;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;,</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = config;</div></pre></td></tr></table></figure></p>\n<p>Wow, that’s a lot of configuration for a simple app! Let’s take a closer look though. The first two lines are just requiring Webpack and the Node “path” module, and the next two lines are just setting some constants.</p>\n<p>After that we have the actual configuration for Webpack. One nice point to note is that Webpack’s configuration file is a Javascript file, not JSON like many others are (allowing comments, trailing commas, etc). In our configuration we set the <code>entry</code> property, which is the file that Webpack starts at (more on that in a moment); the <code>output</code>, which is where Webpack saves the compiled code; and the <code>module</code> property.</p>\n<p>The <code>entry</code> configuration can take a string, array, or object. If you use a string, it should point at the single file that starts your application. If you use an array, Webpack will concatenate the files. Using an object allows you to have multiple entry points, which is for building multiple separate apps. In our case, we need our main.js file and babel-polyfill (which is loaded first).</p>\n<p>Our <code>module</code> property has a <code>rules</code> property, which is an array of the defined loaders. For now, we are just defining babel-loader. <code>test</code> is a regex to match against file extensions. I’m using a pattern which matches <code>.js</code> and <code>.jsx</code> files. You could also choose to set it to only compile files with the JSX extension, by using <code>/\\.jsx/</code>, or if you decide not to use .jsx at all, just use <code>/\\.js/</code> to .js files. The <code>include</code> property tells Webpack that you only want to compile files in a specific folder. This is because you should never need to compile files from <code>node_modules</code>, since libraries should already be compiled with Babel (if they needed to be). This only stops Webpack from running Babel on files outside of APP_DIR, it doesn’t stop Webpack from bundling those files into the output. The <code>use</code> property defines our loader, which is Babel.</p>\n<p>The last line is simply exporting the configuration. By default, when Webpack runs, it uses <code>webpack.config.js</code> if it exists.</p>\n<p>And that’s it for our Webpack configuration. Now we just need to add our command to package.json:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  ...</div><div class=\"line\">  \"scripts\": &#123;</div><div class=\"line\">    ...</div><div class=\"line\">    \"dev\": \"webpack -d --watch\",</div><div class=\"line\">    \"build\": \"webpack -p\"</div><div class=\"line\">  &#125;,</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>We add two npm scripts, “dev” and “build”. “dev” will run Webpack with “-d –watch”, which sets webpack in debug mode (more verbose, and outputs code maps for the browser), and in watch mode, which means it continuously runs, re-compiling whenever a bundled file changes. “build” runs Webpack with “-p”, which enables production mode. In production mode, the output is uglified (using Uglify), and any instances of <code>process.env.NODE_ENV</code> are replaced with <code>&quot;production&quot;</code>. That last part is important because it allows Uglify to remove React’s internal debugging tools (which lets it run faster).</p>\n<h3 id=\"Setup-Babel\"><a href=\"#Setup-Babel\" class=\"headerlink\" title=\"Setup Babel\"></a>Setup Babel</h3><p>Ok, we’re almost there. We have everything in place except for a little bit of Babel configuration. This one is easy. Create <code>.babelrc</code> in your project root, and copy this into it:<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"presets\"</span> : [<span class=\"string\">\"latest\"</span>, <span class=\"string\">\"react\"</span>]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>What this does is tell Babel to compile ES2015+ and JSX to ES5 Javascript. These presets don’t come with Babel, so install them with <code>npm install --save-dev babel-preset-latest babel-preset-react</code>.</p>\n<p>This is the simple approach to the Babel config. For a more explicit configuration (such as for targeting ES2015 compatible browsers), check out @brigand’s <a href=\"https://brigand.github.io/config-wizard/?babelrc\" target=\"_blank\" rel=\"external\">config-wizard</a>.</p>\n<h3 id=\"Run\"><a href=\"#Run\" class=\"headerlink\" title=\"Run!\"></a>Run!</h3><p>That pretty much covers it. And now you know why the React workflow is notorious for being difficult to setup. While it’s not actually that complex, there are many steps to the process, at least the first time through.</p>\n<p>So, finally, to start your development environment, run <code>npm run dev</code>. You should see some output from Webpack, and two more files should appear in <code>public/</code>: <code>bundle.js</code> and <code>bundle.js.map</code>.</p>\n<p>Now you just need a server to get these files into your browser. My go-to mini-server is <code>http-server</code>, available with npm. I install very few npm packages globally, but this is one. Install it with <code>npm install -g http-server</code>, then run it from your project root with <code>http-server public</code>. Now you should be able to visit <code>localhost:8080</code> in your browser, and see the web app you just created!</p>\n<h2 id=\"Just-give-me-the-final-product-already\"><a href=\"#Just-give-me-the-final-product-already\" class=\"headerlink\" title=\"Just give me the final product already\"></a>Just give me the final product already</h2><p><a href=\"https://github.com/samsch/basic-react\" target=\"_blank\" rel=\"external\">Here it is, the whole thing wrapped up in a Github Repository.</a></p>\n"},{"title":"How to Add css-loader to Webpack","date":"2017-07-15T01:16:00.000Z","_content":"One of the benefits of using Webpack is that is allows you to load non-JavaScript files using the standard JavaScript import statements. Specifically, this is regularly used to load stylesheets on a per-module basis.\n\n> The final results can be found in a [branch from the base repo](https://github.com/samsch/basic-webpack-react/tree/css-loader-extract-text-plugin).\n\n# What we need to get started\nOur baseline is a working Webpack project. A good starting point is my [basic-webpack-react tutorial results](https://github.com/samsch/basic-webpack-react). Run `git clone https://github.com/samsch/basic-webpack-react.git`, `cd basic-webpack-react`, and `npm install`.\n\n# Loaders for styles\nLoading css in a useful way requires either two Webpack loaders, or a loader and a plugin. The easier setup to get started with is using `style-loader` and `css-loader`.\n  - [style-loader](https://webpack.js.org/loaders/style-loader/) takes an imported css file, and makes it output as a `<style>` element with the css from the file.\n  - [css-loader](https://webpack.js.org/loaders/css-loader/) parses a css file for `@import`, `url()`, and translates those into something Webpack can understand to import.\n\nWith these, you can have imports in your JavaScript modules like:\n```js\nimport './style.css';\n```\nWebpack will take that stylesheet -- and anything it `@import`s -- and include JavaScript in your bundle to put it in `<style>` tags in the output when the app starts.\n\nThe downside of this method is that styles can't be cached by the browser separately. Later, we'll use the other method for a better production setup.\n\n# Configuration\nFirst install the loaders by running `npm install -D style-loader css-loader`.\n\nThen we need to modify [webpack.config.js](https://github.com/samsch/basic-webpack-react/blob/f57ca65db1bb8462a9415a065a628b52163b34d0/webpack.config.js). Add the new loader rule to the `rules` property as shown below.\n```diff\n   module: {\n     rules: [\n       {\n         test : /\\.jsx?/,\n         include: path.resolve(__dirname, 'src/'),\n         use: ['babel-loader'],\n       },\n+      {\n+        test: /\\.css$/,\n+        use: [ 'style-loader', 'css-loader' ]\n+      },\n     ],\n   },\n```\n\nThat's it! Now you can run `npm start`, and it will act exactly as before, but it's ready to import css files.\n\n# Add some test styles\nLet's add `import './style.css'` to the top of `src/foo.js`.\n```diff\n+import './style.css';\n+\n import React from 'react';\n import ReactDOM from 'react-dom';\n \n const foo = function() {\n```\nThe running Webpack process throws and error because style.css isn't found. So let's add `src/style.css`:\n```css\nh1 {\n  border-bottom: solid 2px gray;\n}\n```\nNow Webpack compiles, and the page should refresh with a border applied to the h1 tag.\n\nLet's add an imported style. Make `src/paragraph.css`:\n```css\np {\n  background: #ddd;\n  padding: 1rem;\n}\n```\n\nAnd add an import line to `src/style.css`:\n```diff\n+@import \"paragraph.css\";\n+\n h1 {\n   border-bottom: solid 2px gray;\n }\n```\n> Note that we can use \"paragraph.css\" here, rather than \"./paragraph.css\" which Webpack would normally need for relative files. To import a file from an npm package, you can use a `~` prefix, like `~some-css-package/dist/style.css`.\n\nNow we have css styles imported from our modules, and css import bundling!\n\n# Separate style sheets\nThe above system actually works pretty well for smaller projects and development. But for larger projects and production, we often want separate stylesheets for caching.\n\nTo pull our styles into a new file, we use `extract-text-webpack-plugin`, so install that with `npm i -D extract-text-webpack-plugin`, and remove `style-loader` with `npm remove style-loader`. We need to make a couple changes in `webpack.config.js`.\n\nAt the top of the file:\n```diff\n const path = require('path');\n+const ExtractTextPlugin = require(\"extract-text-webpack-plugin\");\n \n module.exports = {\n   entry: ['babel-polyfill', './src/main.js'],\n```\nAnd near the end of the file:\n```diff\n       {\n         test : /\\.jsx?/,\n         include: path.resolve(__dirname, 'src/'),\n         use: ['babel-loader'],\n       },\n       {\n         test: /\\.css$/,\n-        use: [ 'style-loader', 'css-loader' ]\n+        use: ExtractTextPlugin.extract({\n+          use: 'css-loader',\n+        }),\n       },\n     ],\n   },\n+  plugins: [\n+    new ExtractTextPlugin({\n+      filename: 'style.css',\n+      allChunks: true,\n+    }),\n+  ],\n };\n```\nNow if we re-run `npm start`, we don't have our styles anymore! This is because the styles output into a new file, which isn't automatically loaded. So we add a stylesheet link in `public/index.html`:\n```diff\n   <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n   <title>Webpack bundle test page</title>\n+  <link rel=\"stylesheet\" href=\"/style.css\">\n   <script src=\"/bundle.js\" defer></script>\n </head>\n```\nRefresh the page and your styles are back. If you check the network requests tab in your browser, you can see the stylesheet was loaded in separately.\n\nThis is now a mostly production-ready stylesheet management system. \n> The main pain-point for this configuration now is that files always have the same name, which means that you would need to do external versioning to bust the browser file cache. Fixing this is possible with a Webpack plugin, but it's a bit out of scope for this guide.\n\nThe final results can be seen as a [branch of the base repo](https://github.com/samsch/basic-webpack-react/tree/css-loader-extract-text-plugin).\n","source":"_posts/2017-07-14-how-to-add-css-loader-to-webpack.md","raw":"---\ntitle: How to Add css-loader to Webpack\ndate: 2017-07-14 21:16:00\ntags:\n  - webpack\n  - React\n  - css\n  - css-loader\n---\nOne of the benefits of using Webpack is that is allows you to load non-JavaScript files using the standard JavaScript import statements. Specifically, this is regularly used to load stylesheets on a per-module basis.\n\n> The final results can be found in a [branch from the base repo](https://github.com/samsch/basic-webpack-react/tree/css-loader-extract-text-plugin).\n\n# What we need to get started\nOur baseline is a working Webpack project. A good starting point is my [basic-webpack-react tutorial results](https://github.com/samsch/basic-webpack-react). Run `git clone https://github.com/samsch/basic-webpack-react.git`, `cd basic-webpack-react`, and `npm install`.\n\n# Loaders for styles\nLoading css in a useful way requires either two Webpack loaders, or a loader and a plugin. The easier setup to get started with is using `style-loader` and `css-loader`.\n  - [style-loader](https://webpack.js.org/loaders/style-loader/) takes an imported css file, and makes it output as a `<style>` element with the css from the file.\n  - [css-loader](https://webpack.js.org/loaders/css-loader/) parses a css file for `@import`, `url()`, and translates those into something Webpack can understand to import.\n\nWith these, you can have imports in your JavaScript modules like:\n```js\nimport './style.css';\n```\nWebpack will take that stylesheet -- and anything it `@import`s -- and include JavaScript in your bundle to put it in `<style>` tags in the output when the app starts.\n\nThe downside of this method is that styles can't be cached by the browser separately. Later, we'll use the other method for a better production setup.\n\n# Configuration\nFirst install the loaders by running `npm install -D style-loader css-loader`.\n\nThen we need to modify [webpack.config.js](https://github.com/samsch/basic-webpack-react/blob/f57ca65db1bb8462a9415a065a628b52163b34d0/webpack.config.js). Add the new loader rule to the `rules` property as shown below.\n```diff\n   module: {\n     rules: [\n       {\n         test : /\\.jsx?/,\n         include: path.resolve(__dirname, 'src/'),\n         use: ['babel-loader'],\n       },\n+      {\n+        test: /\\.css$/,\n+        use: [ 'style-loader', 'css-loader' ]\n+      },\n     ],\n   },\n```\n\nThat's it! Now you can run `npm start`, and it will act exactly as before, but it's ready to import css files.\n\n# Add some test styles\nLet's add `import './style.css'` to the top of `src/foo.js`.\n```diff\n+import './style.css';\n+\n import React from 'react';\n import ReactDOM from 'react-dom';\n \n const foo = function() {\n```\nThe running Webpack process throws and error because style.css isn't found. So let's add `src/style.css`:\n```css\nh1 {\n  border-bottom: solid 2px gray;\n}\n```\nNow Webpack compiles, and the page should refresh with a border applied to the h1 tag.\n\nLet's add an imported style. Make `src/paragraph.css`:\n```css\np {\n  background: #ddd;\n  padding: 1rem;\n}\n```\n\nAnd add an import line to `src/style.css`:\n```diff\n+@import \"paragraph.css\";\n+\n h1 {\n   border-bottom: solid 2px gray;\n }\n```\n> Note that we can use \"paragraph.css\" here, rather than \"./paragraph.css\" which Webpack would normally need for relative files. To import a file from an npm package, you can use a `~` prefix, like `~some-css-package/dist/style.css`.\n\nNow we have css styles imported from our modules, and css import bundling!\n\n# Separate style sheets\nThe above system actually works pretty well for smaller projects and development. But for larger projects and production, we often want separate stylesheets for caching.\n\nTo pull our styles into a new file, we use `extract-text-webpack-plugin`, so install that with `npm i -D extract-text-webpack-plugin`, and remove `style-loader` with `npm remove style-loader`. We need to make a couple changes in `webpack.config.js`.\n\nAt the top of the file:\n```diff\n const path = require('path');\n+const ExtractTextPlugin = require(\"extract-text-webpack-plugin\");\n \n module.exports = {\n   entry: ['babel-polyfill', './src/main.js'],\n```\nAnd near the end of the file:\n```diff\n       {\n         test : /\\.jsx?/,\n         include: path.resolve(__dirname, 'src/'),\n         use: ['babel-loader'],\n       },\n       {\n         test: /\\.css$/,\n-        use: [ 'style-loader', 'css-loader' ]\n+        use: ExtractTextPlugin.extract({\n+          use: 'css-loader',\n+        }),\n       },\n     ],\n   },\n+  plugins: [\n+    new ExtractTextPlugin({\n+      filename: 'style.css',\n+      allChunks: true,\n+    }),\n+  ],\n };\n```\nNow if we re-run `npm start`, we don't have our styles anymore! This is because the styles output into a new file, which isn't automatically loaded. So we add a stylesheet link in `public/index.html`:\n```diff\n   <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n   <title>Webpack bundle test page</title>\n+  <link rel=\"stylesheet\" href=\"/style.css\">\n   <script src=\"/bundle.js\" defer></script>\n </head>\n```\nRefresh the page and your styles are back. If you check the network requests tab in your browser, you can see the stylesheet was loaded in separately.\n\nThis is now a mostly production-ready stylesheet management system. \n> The main pain-point for this configuration now is that files always have the same name, which means that you would need to do external versioning to bust the browser file cache. Fixing this is possible with a Webpack plugin, but it's a bit out of scope for this guide.\n\nThe final results can be seen as a [branch of the base repo](https://github.com/samsch/basic-webpack-react/tree/css-loader-extract-text-plugin).\n","slug":"how-to-add-css-loader-to-webpack","published":1,"updated":"2019-07-24T18:17:12.084Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckixl4zvz000cjku398kve0cd","content":"<p>One of the benefits of using Webpack is that is allows you to load non-JavaScript files using the standard JavaScript import statements. Specifically, this is regularly used to load stylesheets on a per-module basis.</p>\n<blockquote>\n<p>The final results can be found in a <a href=\"https://github.com/samsch/basic-webpack-react/tree/css-loader-extract-text-plugin\" target=\"_blank\" rel=\"external\">branch from the base repo</a>.</p>\n</blockquote>\n<h1 id=\"What-we-need-to-get-started\"><a href=\"#What-we-need-to-get-started\" class=\"headerlink\" title=\"What we need to get started\"></a>What we need to get started</h1><p>Our baseline is a working Webpack project. A good starting point is my <a href=\"https://github.com/samsch/basic-webpack-react\" target=\"_blank\" rel=\"external\">basic-webpack-react tutorial results</a>. Run <code>git clone https://github.com/samsch/basic-webpack-react.git</code>, <code>cd basic-webpack-react</code>, and <code>npm install</code>.</p>\n<h1 id=\"Loaders-for-styles\"><a href=\"#Loaders-for-styles\" class=\"headerlink\" title=\"Loaders for styles\"></a>Loaders for styles</h1><p>Loading css in a useful way requires either two Webpack loaders, or a loader and a plugin. The easier setup to get started with is using <code>style-loader</code> and <code>css-loader</code>.</p>\n<ul>\n<li><a href=\"https://webpack.js.org/loaders/style-loader/\" target=\"_blank\" rel=\"external\">style-loader</a> takes an imported css file, and makes it output as a <code>&lt;style&gt;</code> element with the css from the file.</li>\n<li><a href=\"https://webpack.js.org/loaders/css-loader/\" target=\"_blank\" rel=\"external\">css-loader</a> parses a css file for <code>@import</code>, <code>url()</code>, and translates those into something Webpack can understand to import.</li>\n</ul>\n<p>With these, you can have imports in your JavaScript modules like:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./style.css'</span>;</div></pre></td></tr></table></figure></p>\n<p>Webpack will take that stylesheet – and anything it <code>@import</code>s – and include JavaScript in your bundle to put it in <code>&lt;style&gt;</code> tags in the output when the app starts.</p>\n<p>The downside of this method is that styles can’t be cached by the browser separately. Later, we’ll use the other method for a better production setup.</p>\n<h1 id=\"Configuration\"><a href=\"#Configuration\" class=\"headerlink\" title=\"Configuration\"></a>Configuration</h1><p>First install the loaders by running <code>npm install -D style-loader css-loader</code>.</p>\n<p>Then we need to modify <a href=\"https://github.com/samsch/basic-webpack-react/blob/f57ca65db1bb8462a9415a065a628b52163b34d0/webpack.config.js\" target=\"_blank\" rel=\"external\">webpack.config.js</a>. Add the new loader rule to the <code>rules</code> property as shown below.<br><figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">   module: &#123;</div><div class=\"line\">     rules: [</div><div class=\"line\">       &#123;</div><div class=\"line\">         test : /\\.jsx?/,</div><div class=\"line\">         include: path.resolve(__dirname, 'src/'),</div><div class=\"line\">         use: ['babel-loader'],</div><div class=\"line\">       &#125;,</div><div class=\"line\"><span class=\"addition\">+      &#123;</span></div><div class=\"line\"><span class=\"addition\">+        test: /\\.css$/,</span></div><div class=\"line\"><span class=\"addition\">+        use: [ 'style-loader', 'css-loader' ]</span></div><div class=\"line\"><span class=\"addition\">+      &#125;,</span></div><div class=\"line\">     ],</div><div class=\"line\">   &#125;,</div></pre></td></tr></table></figure></p>\n<p>That’s it! Now you can run <code>npm start</code>, and it will act exactly as before, but it’s ready to import css files.</p>\n<h1 id=\"Add-some-test-styles\"><a href=\"#Add-some-test-styles\" class=\"headerlink\" title=\"Add some test styles\"></a>Add some test styles</h1><p>Let’s add <code>import &#39;./style.css&#39;</code> to the top of <code>src/foo.js</code>.<br><figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"addition\">+import './style.css';</span></div><div class=\"line\"><span class=\"addition\">+</span></div><div class=\"line\"> import React from 'react';</div><div class=\"line\"> import ReactDOM from 'react-dom';</div><div class=\"line\"> </div><div class=\"line\"> const foo = function() &#123;</div></pre></td></tr></table></figure></p>\n<p>The running Webpack process throws and error because style.css isn’t found. So let’s add <code>src/style.css</code>:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">h1</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">border-bottom</span>: solid <span class=\"number\">2px</span> gray;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Now Webpack compiles, and the page should refresh with a border applied to the h1 tag.</p>\n<p>Let’s add an imported style. Make <code>src/paragraph.css</code>:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">p</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#ddd</span>;</div><div class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">1rem</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>And add an import line to <code>src/style.css</code>:<br><figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"addition\">+@import \"paragraph.css\";</span></div><div class=\"line\"><span class=\"addition\">+</span></div><div class=\"line\"> h1 &#123;</div><div class=\"line\">   border-bottom: solid 2px gray;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>Note that we can use “paragraph.css” here, rather than “./paragraph.css” which Webpack would normally need for relative files. To import a file from an npm package, you can use a <code>~</code> prefix, like <code>~some-css-package/dist/style.css</code>.</p>\n</blockquote>\n<p>Now we have css styles imported from our modules, and css import bundling!</p>\n<h1 id=\"Separate-style-sheets\"><a href=\"#Separate-style-sheets\" class=\"headerlink\" title=\"Separate style sheets\"></a>Separate style sheets</h1><p>The above system actually works pretty well for smaller projects and development. But for larger projects and production, we often want separate stylesheets for caching.</p>\n<p>To pull our styles into a new file, we use <code>extract-text-webpack-plugin</code>, so install that with <code>npm i -D extract-text-webpack-plugin</code>, and remove <code>style-loader</code> with <code>npm remove style-loader</code>. We need to make a couple changes in <code>webpack.config.js</code>.</p>\n<p>At the top of the file:<br><figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"> const path = require('path');</div><div class=\"line\"><span class=\"addition\">+const ExtractTextPlugin = require(\"extract-text-webpack-plugin\");</span></div><div class=\"line\"> </div><div class=\"line\"> module.exports = &#123;</div><div class=\"line\">   entry: ['babel-polyfill', './src/main.js'],</div></pre></td></tr></table></figure></p>\n<p>And near the end of the file:<br><figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">       &#123;</div><div class=\"line\">         test : /\\.jsx?/,</div><div class=\"line\">         include: path.resolve(__dirname, 'src/'),</div><div class=\"line\">         use: ['babel-loader'],</div><div class=\"line\">       &#125;,</div><div class=\"line\">       &#123;</div><div class=\"line\">         test: /\\.css$/,</div><div class=\"line\"><span class=\"deletion\">-        use: [ 'style-loader', 'css-loader' ]</span></div><div class=\"line\"><span class=\"addition\">+        use: ExtractTextPlugin.extract(&#123;</span></div><div class=\"line\"><span class=\"addition\">+          use: 'css-loader',</span></div><div class=\"line\"><span class=\"addition\">+        &#125;),</span></div><div class=\"line\">       &#125;,</div><div class=\"line\">     ],</div><div class=\"line\">   &#125;,</div><div class=\"line\"><span class=\"addition\">+  plugins: [</span></div><div class=\"line\"><span class=\"addition\">+    new ExtractTextPlugin(&#123;</span></div><div class=\"line\"><span class=\"addition\">+      filename: 'style.css',</span></div><div class=\"line\"><span class=\"addition\">+      allChunks: true,</span></div><div class=\"line\"><span class=\"addition\">+    &#125;),</span></div><div class=\"line\"><span class=\"addition\">+  ],</span></div><div class=\"line\"> &#125;;</div></pre></td></tr></table></figure></p>\n<p>Now if we re-run <code>npm start</code>, we don’t have our styles anymore! This is because the styles output into a new file, which isn’t automatically loaded. So we add a stylesheet link in <code>public/index.html</code>:<br><figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">   &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt;</div><div class=\"line\">   &lt;title&gt;Webpack bundle test page&lt;/title&gt;</div><div class=\"line\"><span class=\"addition\">+  &lt;link rel=\"stylesheet\" href=\"/style.css\"&gt;</span></div><div class=\"line\">   &lt;script src=\"/bundle.js\" defer&gt;&lt;/script&gt;</div><div class=\"line\"> &lt;/head&gt;</div></pre></td></tr></table></figure></p>\n<p>Refresh the page and your styles are back. If you check the network requests tab in your browser, you can see the stylesheet was loaded in separately.</p>\n<p>This is now a mostly production-ready stylesheet management system. </p>\n<blockquote>\n<p>The main pain-point for this configuration now is that files always have the same name, which means that you would need to do external versioning to bust the browser file cache. Fixing this is possible with a Webpack plugin, but it’s a bit out of scope for this guide.</p>\n</blockquote>\n<p>The final results can be seen as a <a href=\"https://github.com/samsch/basic-webpack-react/tree/css-loader-extract-text-plugin\" target=\"_blank\" rel=\"external\">branch of the base repo</a>.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>One of the benefits of using Webpack is that is allows you to load non-JavaScript files using the standard JavaScript import statements. Specifically, this is regularly used to load stylesheets on a per-module basis.</p>\n<blockquote>\n<p>The final results can be found in a <a href=\"https://github.com/samsch/basic-webpack-react/tree/css-loader-extract-text-plugin\" target=\"_blank\" rel=\"external\">branch from the base repo</a>.</p>\n</blockquote>\n<h1 id=\"What-we-need-to-get-started\"><a href=\"#What-we-need-to-get-started\" class=\"headerlink\" title=\"What we need to get started\"></a>What we need to get started</h1><p>Our baseline is a working Webpack project. A good starting point is my <a href=\"https://github.com/samsch/basic-webpack-react\" target=\"_blank\" rel=\"external\">basic-webpack-react tutorial results</a>. Run <code>git clone https://github.com/samsch/basic-webpack-react.git</code>, <code>cd basic-webpack-react</code>, and <code>npm install</code>.</p>\n<h1 id=\"Loaders-for-styles\"><a href=\"#Loaders-for-styles\" class=\"headerlink\" title=\"Loaders for styles\"></a>Loaders for styles</h1><p>Loading css in a useful way requires either two Webpack loaders, or a loader and a plugin. The easier setup to get started with is using <code>style-loader</code> and <code>css-loader</code>.</p>\n<ul>\n<li><a href=\"https://webpack.js.org/loaders/style-loader/\" target=\"_blank\" rel=\"external\">style-loader</a> takes an imported css file, and makes it output as a <code>&lt;style&gt;</code> element with the css from the file.</li>\n<li><a href=\"https://webpack.js.org/loaders/css-loader/\" target=\"_blank\" rel=\"external\">css-loader</a> parses a css file for <code>@import</code>, <code>url()</code>, and translates those into something Webpack can understand to import.</li>\n</ul>\n<p>With these, you can have imports in your JavaScript modules like:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./style.css'</span>;</div></pre></td></tr></table></figure></p>\n<p>Webpack will take that stylesheet – and anything it <code>@import</code>s – and include JavaScript in your bundle to put it in <code>&lt;style&gt;</code> tags in the output when the app starts.</p>\n<p>The downside of this method is that styles can’t be cached by the browser separately. Later, we’ll use the other method for a better production setup.</p>\n<h1 id=\"Configuration\"><a href=\"#Configuration\" class=\"headerlink\" title=\"Configuration\"></a>Configuration</h1><p>First install the loaders by running <code>npm install -D style-loader css-loader</code>.</p>\n<p>Then we need to modify <a href=\"https://github.com/samsch/basic-webpack-react/blob/f57ca65db1bb8462a9415a065a628b52163b34d0/webpack.config.js\" target=\"_blank\" rel=\"external\">webpack.config.js</a>. Add the new loader rule to the <code>rules</code> property as shown below.<br><figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">   module: &#123;</div><div class=\"line\">     rules: [</div><div class=\"line\">       &#123;</div><div class=\"line\">         test : /\\.jsx?/,</div><div class=\"line\">         include: path.resolve(__dirname, 'src/'),</div><div class=\"line\">         use: ['babel-loader'],</div><div class=\"line\">       &#125;,</div><div class=\"line\"><span class=\"addition\">+      &#123;</span></div><div class=\"line\"><span class=\"addition\">+        test: /\\.css$/,</span></div><div class=\"line\"><span class=\"addition\">+        use: [ 'style-loader', 'css-loader' ]</span></div><div class=\"line\"><span class=\"addition\">+      &#125;,</span></div><div class=\"line\">     ],</div><div class=\"line\">   &#125;,</div></pre></td></tr></table></figure></p>\n<p>That’s it! Now you can run <code>npm start</code>, and it will act exactly as before, but it’s ready to import css files.</p>\n<h1 id=\"Add-some-test-styles\"><a href=\"#Add-some-test-styles\" class=\"headerlink\" title=\"Add some test styles\"></a>Add some test styles</h1><p>Let’s add <code>import &#39;./style.css&#39;</code> to the top of <code>src/foo.js</code>.<br><figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"addition\">+import './style.css';</span></div><div class=\"line\"><span class=\"addition\">+</span></div><div class=\"line\"> import React from 'react';</div><div class=\"line\"> import ReactDOM from 'react-dom';</div><div class=\"line\"> </div><div class=\"line\"> const foo = function() &#123;</div></pre></td></tr></table></figure></p>\n<p>The running Webpack process throws and error because style.css isn’t found. So let’s add <code>src/style.css</code>:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">h1</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">border-bottom</span>: solid <span class=\"number\">2px</span> gray;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Now Webpack compiles, and the page should refresh with a border applied to the h1 tag.</p>\n<p>Let’s add an imported style. Make <code>src/paragraph.css</code>:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">p</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#ddd</span>;</div><div class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">1rem</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>And add an import line to <code>src/style.css</code>:<br><figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"addition\">+@import \"paragraph.css\";</span></div><div class=\"line\"><span class=\"addition\">+</span></div><div class=\"line\"> h1 &#123;</div><div class=\"line\">   border-bottom: solid 2px gray;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>Note that we can use “paragraph.css” here, rather than “./paragraph.css” which Webpack would normally need for relative files. To import a file from an npm package, you can use a <code>~</code> prefix, like <code>~some-css-package/dist/style.css</code>.</p>\n</blockquote>\n<p>Now we have css styles imported from our modules, and css import bundling!</p>\n<h1 id=\"Separate-style-sheets\"><a href=\"#Separate-style-sheets\" class=\"headerlink\" title=\"Separate style sheets\"></a>Separate style sheets</h1><p>The above system actually works pretty well for smaller projects and development. But for larger projects and production, we often want separate stylesheets for caching.</p>\n<p>To pull our styles into a new file, we use <code>extract-text-webpack-plugin</code>, so install that with <code>npm i -D extract-text-webpack-plugin</code>, and remove <code>style-loader</code> with <code>npm remove style-loader</code>. We need to make a couple changes in <code>webpack.config.js</code>.</p>\n<p>At the top of the file:<br><figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"> const path = require('path');</div><div class=\"line\"><span class=\"addition\">+const ExtractTextPlugin = require(\"extract-text-webpack-plugin\");</span></div><div class=\"line\"> </div><div class=\"line\"> module.exports = &#123;</div><div class=\"line\">   entry: ['babel-polyfill', './src/main.js'],</div></pre></td></tr></table></figure></p>\n<p>And near the end of the file:<br><figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">       &#123;</div><div class=\"line\">         test : /\\.jsx?/,</div><div class=\"line\">         include: path.resolve(__dirname, 'src/'),</div><div class=\"line\">         use: ['babel-loader'],</div><div class=\"line\">       &#125;,</div><div class=\"line\">       &#123;</div><div class=\"line\">         test: /\\.css$/,</div><div class=\"line\"><span class=\"deletion\">-        use: [ 'style-loader', 'css-loader' ]</span></div><div class=\"line\"><span class=\"addition\">+        use: ExtractTextPlugin.extract(&#123;</span></div><div class=\"line\"><span class=\"addition\">+          use: 'css-loader',</span></div><div class=\"line\"><span class=\"addition\">+        &#125;),</span></div><div class=\"line\">       &#125;,</div><div class=\"line\">     ],</div><div class=\"line\">   &#125;,</div><div class=\"line\"><span class=\"addition\">+  plugins: [</span></div><div class=\"line\"><span class=\"addition\">+    new ExtractTextPlugin(&#123;</span></div><div class=\"line\"><span class=\"addition\">+      filename: 'style.css',</span></div><div class=\"line\"><span class=\"addition\">+      allChunks: true,</span></div><div class=\"line\"><span class=\"addition\">+    &#125;),</span></div><div class=\"line\"><span class=\"addition\">+  ],</span></div><div class=\"line\"> &#125;;</div></pre></td></tr></table></figure></p>\n<p>Now if we re-run <code>npm start</code>, we don’t have our styles anymore! This is because the styles output into a new file, which isn’t automatically loaded. So we add a stylesheet link in <code>public/index.html</code>:<br><figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">   &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt;</div><div class=\"line\">   &lt;title&gt;Webpack bundle test page&lt;/title&gt;</div><div class=\"line\"><span class=\"addition\">+  &lt;link rel=\"stylesheet\" href=\"/style.css\"&gt;</span></div><div class=\"line\">   &lt;script src=\"/bundle.js\" defer&gt;&lt;/script&gt;</div><div class=\"line\"> &lt;/head&gt;</div></pre></td></tr></table></figure></p>\n<p>Refresh the page and your styles are back. If you check the network requests tab in your browser, you can see the stylesheet was loaded in separately.</p>\n<p>This is now a mostly production-ready stylesheet management system. </p>\n<blockquote>\n<p>The main pain-point for this configuration now is that files always have the same name, which means that you would need to do external versioning to bust the browser file cache. Fixing this is possible with a Webpack plugin, but it’s a bit out of scope for this guide.</p>\n</blockquote>\n<p>The final results can be seen as a <a href=\"https://github.com/samsch/basic-webpack-react/tree/css-loader-extract-text-plugin\" target=\"_blank\" rel=\"external\">branch of the base repo</a>.</p>\n"},{"title":"State Terminology","date":"2017-08-29T13:20:37.000Z","_content":"What does someone mean when they say \"state\" in React contexts? Glad you asked! Unfortunately, it's not something with a simple answer. I can break \"state\" into at least five different meanings, all of which are used in documentation, IRC chats, forums posts, and elsewhere.\n\n### General state\nThe general idea of \"state\", is the remembered events, data, and user interactions of the application. It is the part of an application which can change. For a longer definition, check out [State \\(computer science\\)](https://en.wikipedia.org/wiki/State_%28computer_science%29) on Wikipedia.\n\n### Application state\nA subset of the general state in an app is the \"application state\". This is data relevant to the actual functionality of the application. It may have properties including form data, current user info, and lists of data.\n\n### View state\nAnother subset of the general state is \"view state\". This is data which is used in the user interface to improve or change the user experience. This state is never relevant to the application, such that it is possible to have the exact same application functionality without any view state<sup>[1](#view-state-removed)</sup>. Included types of information in the view state may be whether a dropdown is open, the current page, or a selected theme.\n\n### Component state\nThis is where some confusion usually starts to set in. Many users (including blog, documentation, forum post, and real-time chat authors) also use \"state\" to refer to the built-in state handling functionality in `React.Component` (and `React.PureComponent`) classes. This functionality is not itself actual \"state\", but is actually a type of \"store\". \"Component state\" is just a tool, and it allows you to store any type of state.\n\n### \\<store\\> state (e.g., \"Redux state\")\nIn contrast to using \"state\" to refer to \"component state\", it's also used to refer specifically to state stored in other types of state stores. Currently, a popular state store is Redux, but this also applies to any external store (Mobx, Backbone, other Flux implementations). Sometimes, users will use \"application state\" to refer to state stored outside of React \"component state\".\n\n## The Right Way\nOf course, The Right Way doesn't exist. Nobody wants to explicitly type \"application state\" or \"component state\" all the time, even though that would allow much less ambiguity.\n\nWhen communicating with someone, I recommend verifying what they mean when they say \"state\" if it might be ambiguous, and being explicit at least once in a while yourself to help others understand you.\n\n> <a name=\"view-state-removed\">1.</a> Generally this is true, but in most circumstances having a stateless user interface would require vast changes to an application or website, including moving everything into a single page and replacing dropdowns with different types of UIs (radio buttons, checkbox lists, etc). Even then, trying to remove some state such as mouse and scroll position would make it very difficult to maintain the same application functionality. To have a **perfectly** stateless UI for a stateful app would be very difficult or impossible.\n","source":"_posts/2017-08-29-state-terminology.md","raw":"---\ntitle: State Terminology\ndate: 2017-08-29 09:20:37\ntags:\n- React\n- state\n- patterns\n- js\n---\nWhat does someone mean when they say \"state\" in React contexts? Glad you asked! Unfortunately, it's not something with a simple answer. I can break \"state\" into at least five different meanings, all of which are used in documentation, IRC chats, forums posts, and elsewhere.\n\n### General state\nThe general idea of \"state\", is the remembered events, data, and user interactions of the application. It is the part of an application which can change. For a longer definition, check out [State \\(computer science\\)](https://en.wikipedia.org/wiki/State_%28computer_science%29) on Wikipedia.\n\n### Application state\nA subset of the general state in an app is the \"application state\". This is data relevant to the actual functionality of the application. It may have properties including form data, current user info, and lists of data.\n\n### View state\nAnother subset of the general state is \"view state\". This is data which is used in the user interface to improve or change the user experience. This state is never relevant to the application, such that it is possible to have the exact same application functionality without any view state<sup>[1](#view-state-removed)</sup>. Included types of information in the view state may be whether a dropdown is open, the current page, or a selected theme.\n\n### Component state\nThis is where some confusion usually starts to set in. Many users (including blog, documentation, forum post, and real-time chat authors) also use \"state\" to refer to the built-in state handling functionality in `React.Component` (and `React.PureComponent`) classes. This functionality is not itself actual \"state\", but is actually a type of \"store\". \"Component state\" is just a tool, and it allows you to store any type of state.\n\n### \\<store\\> state (e.g., \"Redux state\")\nIn contrast to using \"state\" to refer to \"component state\", it's also used to refer specifically to state stored in other types of state stores. Currently, a popular state store is Redux, but this also applies to any external store (Mobx, Backbone, other Flux implementations). Sometimes, users will use \"application state\" to refer to state stored outside of React \"component state\".\n\n## The Right Way\nOf course, The Right Way doesn't exist. Nobody wants to explicitly type \"application state\" or \"component state\" all the time, even though that would allow much less ambiguity.\n\nWhen communicating with someone, I recommend verifying what they mean when they say \"state\" if it might be ambiguous, and being explicit at least once in a while yourself to help others understand you.\n\n> <a name=\"view-state-removed\">1.</a> Generally this is true, but in most circumstances having a stateless user interface would require vast changes to an application or website, including moving everything into a single page and replacing dropdowns with different types of UIs (radio buttons, checkbox lists, etc). Even then, trying to remove some state such as mouse and scroll position would make it very difficult to maintain the same application functionality. To have a **perfectly** stateless UI for a stateful app would be very difficult or impossible.\n","slug":"state-terminology","published":1,"updated":"2017-08-29T14:19:21.569Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckixl4zw0000ejku33ekv4rjc","content":"<p>What does someone mean when they say “state” in React contexts? Glad you asked! Unfortunately, it’s not something with a simple answer. I can break “state” into at least five different meanings, all of which are used in documentation, IRC chats, forums posts, and elsewhere.</p>\n<h3 id=\"General-state\"><a href=\"#General-state\" class=\"headerlink\" title=\"General state\"></a>General state</h3><p>The general idea of “state”, is the remembered events, data, and user interactions of the application. It is the part of an application which can change. For a longer definition, check out <a href=\"https://en.wikipedia.org/wiki/State_%28computer_science%29\" target=\"_blank\" rel=\"external\">State (computer science)</a> on Wikipedia.</p>\n<h3 id=\"Application-state\"><a href=\"#Application-state\" class=\"headerlink\" title=\"Application state\"></a>Application state</h3><p>A subset of the general state in an app is the “application state”. This is data relevant to the actual functionality of the application. It may have properties including form data, current user info, and lists of data.</p>\n<h3 id=\"View-state\"><a href=\"#View-state\" class=\"headerlink\" title=\"View state\"></a>View state</h3><p>Another subset of the general state is “view state”. This is data which is used in the user interface to improve or change the user experience. This state is never relevant to the application, such that it is possible to have the exact same application functionality without any view state<sup><a href=\"#view-state-removed\">1</a></sup>. Included types of information in the view state may be whether a dropdown is open, the current page, or a selected theme.</p>\n<h3 id=\"Component-state\"><a href=\"#Component-state\" class=\"headerlink\" title=\"Component state\"></a>Component state</h3><p>This is where some confusion usually starts to set in. Many users (including blog, documentation, forum post, and real-time chat authors) also use “state” to refer to the built-in state handling functionality in <code>React.Component</code> (and <code>React.PureComponent</code>) classes. This functionality is not itself actual “state”, but is actually a type of “store”. “Component state” is just a tool, and it allows you to store any type of state.</p>\n<h3 id=\"state-e-g-“Redux-state”\"><a href=\"#state-e-g-“Redux-state”\" class=\"headerlink\" title=\"\\ state (e.g., “Redux state”)\"></a>\\<store\\> state (e.g., “Redux state”)</store\\></h3><p>In contrast to using “state” to refer to “component state”, it’s also used to refer specifically to state stored in other types of state stores. Currently, a popular state store is Redux, but this also applies to any external store (Mobx, Backbone, other Flux implementations). Sometimes, users will use “application state” to refer to state stored outside of React “component state”.</p>\n<h2 id=\"The-Right-Way\"><a href=\"#The-Right-Way\" class=\"headerlink\" title=\"The Right Way\"></a>The Right Way</h2><p>Of course, The Right Way doesn’t exist. Nobody wants to explicitly type “application state” or “component state” all the time, even though that would allow much less ambiguity.</p>\n<p>When communicating with someone, I recommend verifying what they mean when they say “state” if it might be ambiguous, and being explicit at least once in a while yourself to help others understand you.</p>\n<blockquote>\n<p><a name=\"view-state-removed\">1.</a> Generally this is true, but in most circumstances having a stateless user interface would require vast changes to an application or website, including moving everything into a single page and replacing dropdowns with different types of UIs (radio buttons, checkbox lists, etc). Even then, trying to remove some state such as mouse and scroll position would make it very difficult to maintain the same application functionality. To have a <strong>perfectly</strong> stateless UI for a stateful app would be very difficult or impossible.</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>What does someone mean when they say “state” in React contexts? Glad you asked! Unfortunately, it’s not something with a simple answer. I can break “state” into at least five different meanings, all of which are used in documentation, IRC chats, forums posts, and elsewhere.</p>\n<h3 id=\"General-state\"><a href=\"#General-state\" class=\"headerlink\" title=\"General state\"></a>General state</h3><p>The general idea of “state”, is the remembered events, data, and user interactions of the application. It is the part of an application which can change. For a longer definition, check out <a href=\"https://en.wikipedia.org/wiki/State_%28computer_science%29\" target=\"_blank\" rel=\"external\">State (computer science)</a> on Wikipedia.</p>\n<h3 id=\"Application-state\"><a href=\"#Application-state\" class=\"headerlink\" title=\"Application state\"></a>Application state</h3><p>A subset of the general state in an app is the “application state”. This is data relevant to the actual functionality of the application. It may have properties including form data, current user info, and lists of data.</p>\n<h3 id=\"View-state\"><a href=\"#View-state\" class=\"headerlink\" title=\"View state\"></a>View state</h3><p>Another subset of the general state is “view state”. This is data which is used in the user interface to improve or change the user experience. This state is never relevant to the application, such that it is possible to have the exact same application functionality without any view state<sup><a href=\"#view-state-removed\">1</a></sup>. Included types of information in the view state may be whether a dropdown is open, the current page, or a selected theme.</p>\n<h3 id=\"Component-state\"><a href=\"#Component-state\" class=\"headerlink\" title=\"Component state\"></a>Component state</h3><p>This is where some confusion usually starts to set in. Many users (including blog, documentation, forum post, and real-time chat authors) also use “state” to refer to the built-in state handling functionality in <code>React.Component</code> (and <code>React.PureComponent</code>) classes. This functionality is not itself actual “state”, but is actually a type of “store”. “Component state” is just a tool, and it allows you to store any type of state.</p>\n<h3 id=\"state-e-g-“Redux-state”\"><a href=\"#state-e-g-“Redux-state”\" class=\"headerlink\" title=\"\\ state (e.g., “Redux state”)\"></a>\\<store\\> state (e.g., “Redux state”)</store\\></h3><p>In contrast to using “state” to refer to “component state”, it’s also used to refer specifically to state stored in other types of state stores. Currently, a popular state store is Redux, but this also applies to any external store (Mobx, Backbone, other Flux implementations). Sometimes, users will use “application state” to refer to state stored outside of React “component state”.</p>\n<h2 id=\"The-Right-Way\"><a href=\"#The-Right-Way\" class=\"headerlink\" title=\"The Right Way\"></a>The Right Way</h2><p>Of course, The Right Way doesn’t exist. Nobody wants to explicitly type “application state” or “component state” all the time, even though that would allow much less ambiguity.</p>\n<p>When communicating with someone, I recommend verifying what they mean when they say “state” if it might be ambiguous, and being explicit at least once in a while yourself to help others understand you.</p>\n<blockquote>\n<p><a name=\"view-state-removed\">1.</a> Generally this is true, but in most circumstances having a stateless user interface would require vast changes to an application or website, including moving everything into a single page and replacing dropdowns with different types of UIs (radio buttons, checkbox lists, etc). Even then, trying to remove some state such as mouse and scroll position would make it very difficult to maintain the same application functionality. To have a <strong>perfectly</strong> stateless UI for a stateful app would be very difficult or impossible.</p>\n</blockquote>\n"},{"title":"Sci-fi Prop Project","date":"2017-12-11T13:47:48.000Z","_content":"\n![circuit on breadboard](/assets/sci-fi-prop-project/real-board-vertical.jpg)\n\n<div style=\"text-align: center\"><iframe style=\"max-width: 100%;height: 560px\" src=\"https://www.youtube-nocookie.com/embed/tnfEZ7pGT8Y\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></div>\n\n## What is it?\nI wanted to build a \"laser gun\" module to install in a Nerf blaster shell. The module would connect to the trigger to fire, and have motion/gesture sensing for additional functionality (such as reloading).\n\n## Development hardware\n### BOM\n#### Important parts\n\nThese are the pieces which actually make up the functionality.\n\n- Arduino Nano - *or cheap clone*\n- Pololu Minu IMU - *v1, but any should work*\n- 3x LEDs - *can be any desired types, or any other output driven by a high pin*\n- Speaker\n- 2x momentary switches\n\n#### Passives and drivers\n\nThis is the stuff to support the above parts. Change as needed.\n\nLEDs\n- 3x 220 ohm resistor - *I tend to use 220ohm, since I have a lot and it's about right for most LEDs*\n\nSwitches\n- 2x 10k ohm resistor - *for pull-ups*\n- 2x .1uf capacity - *for debounce*\n\nSpeaker\n- 1x 10k ohm resistor - *for speaker driver pin*\n- PN2222 transitor - *speaker driver*\n\n### Schematic\n\n![Layout of circuit](/assets/sci-fi-prop-project/schemeit-project.png)\n\n## Software \n\nThe software I used is the latest version of the Arduino IDE for Linux, VSCode, and the libraries for the Pololu Mini IMU.\n\n- [Arduino IDE](https://www.arduino.cc/en/Main/Software)\n- [VSCode](https://code.visualstudio.com/)\n- [l3g-arduino](https://github.com/pololu/l3g-arduino)\n- [lsm303-arduino](https://github.com/pololu/lsm303-arduino)\n\nTo use VSCode, you must check the *External editor* option in the Arduino IDE preferences.\n\n## Program V1\n\nI started by running the library examples for the accelerometer/magnetometer and gyro chips on the IMU. From there, and extracted the necessary pieces to start building my own functionality.\n\nSome of the basic code for accelerometer and gyro access:\n\n```c++\n#include <Wire.h>\n#include <LSM303.h>\n#include <L3G.h>\n\nL3G gyro;\nLSM303 acc;\n\nvoid setup() {\n  Wire.begin();\n\n  if (!gyro.init()) {\n    // Failure message\n    // Serial.println(\"Failed to autodetect gyro type!\");\n    while (1);\n  }\n\n  gyro.enableDefault();\n  acc.init();\n  acc.enableDefault();\n\n  // Disable magnetometer\n  acc.writeMagReg(0x02, 0b00000011);\n  // Change accelerometer scale to +-4g (default is +-2g)\n  acc.writeAccReg(0x23, 0b00010000);\n}\n\n// global gyro/acc values\nchar gx = 0;\nchar gy = 0;\nchar gz = 0;\nchar ax = 0;\nchar ay = 0;\nchar az = 0;\n\nvoid loop() {\n  delay(50);\n\n  gyro.read();\n  acc.read();\n\n  // This project only needs low resolution, so divide by 255 for a signed 8bit value\n  gx = gyro.g.x / 255;\n  gy = gyro.g.y / 255;\n  gz = gyro.g.z / 255;\n  ax = acc.a.x / 255;\n  ay = acc.a.y / 255;\n  // Invert the z scale so that it shows a positive value for \"up\"\n  az = -acc.a.z / 255;\n\n  // Use values\n}\n```\n\nSome basic steps from here to the full program included adding the simple firing code, with a global ammo count; adding a state machine-like logic which allows the program to be in READY, NEED_RELOAD, RELOADING, and other states; adding helper functions to handle sound effects; and setting up a non-blocking pause.\n\n[The full version 1 source.](https://gist.github.com/samsch/1174d95057e0ee701ebe1a534c929fd6)\n\n## How it works\n\nAfter a short startup, the module plays tone, then moves to the READY state.\n\nWhile READY, you can press the trigger button to fire shots. You can also press the mode button to change between rapid-fire and single-fire modes. In single-fire mode (one short beep), each trigger pull only fires once (semi-automatic) with a longer laser sound. In rapid-fire mode (two short beeps), the modules fire continuous short laser sounds while the trigger is pressed.\n\nOnce out of ammo, the module switches to NEED_RELOAD. From here, you can still change modes, but attempting to fire simply makes and out of ammo sound. To reload, you rotate in the positive direction along the Y axis to 90deg (from vertical). Once there the module goes into RELOADING.\n\nIn RELOADING, the modules makes a short two beep reloading sound, then starts ticking up the ammo count. You can interrupt the reload by rotating the module away from 90deg to the side. The ammo count will continue to rise until either MAX\\_AMMO is achieved, or the reload is interrupted. Once either of these happens, the module returns to READY state (or NEED\\_RELOAD if interrupted before any ammo is added).\n\n### Notes\n\n- The reloading state has a fairly wide (around 25-30deg from center) tolerance for the \"90deg\" position. This allows for much easier use than a smaller threshold, and allows the module to be jostled more, which can be important for something like a blaster prop.\n- The reloading state can only be entered from NEED_RELOAD, which itself can only be entered by emptying the ammo count. So while you can do a partial reload from empty, you can't reload until you run out of ammo.\n  - I'm not sure if I consider this a feature or a bug yet, so it may change.\n- The orientation of the Y axis depends on how the modules is mounted. At the moment, I'm assuming it would be such that reloading requires rotating the blaster along it's \"barrel\", with the top moving to the right side as you look down the blaster.\n- The sound effects are very basic. More complex sounds can be created, but the `tone()` method provided by the Arduino library is rather basic on it's own. It is limited to producing a single-frequency square wave.","source":"_posts/2017-12-11-sci-fi-prop-project.md","raw":"---\ntitle: Sci-fi Prop Project\ndate: 2017-12-11 08:47:48\ntags:\n  - arduino\n  - cos-play\n  - sound\n---\n\n![circuit on breadboard](/assets/sci-fi-prop-project/real-board-vertical.jpg)\n\n<div style=\"text-align: center\"><iframe style=\"max-width: 100%;height: 560px\" src=\"https://www.youtube-nocookie.com/embed/tnfEZ7pGT8Y\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></div>\n\n## What is it?\nI wanted to build a \"laser gun\" module to install in a Nerf blaster shell. The module would connect to the trigger to fire, and have motion/gesture sensing for additional functionality (such as reloading).\n\n## Development hardware\n### BOM\n#### Important parts\n\nThese are the pieces which actually make up the functionality.\n\n- Arduino Nano - *or cheap clone*\n- Pololu Minu IMU - *v1, but any should work*\n- 3x LEDs - *can be any desired types, or any other output driven by a high pin*\n- Speaker\n- 2x momentary switches\n\n#### Passives and drivers\n\nThis is the stuff to support the above parts. Change as needed.\n\nLEDs\n- 3x 220 ohm resistor - *I tend to use 220ohm, since I have a lot and it's about right for most LEDs*\n\nSwitches\n- 2x 10k ohm resistor - *for pull-ups*\n- 2x .1uf capacity - *for debounce*\n\nSpeaker\n- 1x 10k ohm resistor - *for speaker driver pin*\n- PN2222 transitor - *speaker driver*\n\n### Schematic\n\n![Layout of circuit](/assets/sci-fi-prop-project/schemeit-project.png)\n\n## Software \n\nThe software I used is the latest version of the Arduino IDE for Linux, VSCode, and the libraries for the Pololu Mini IMU.\n\n- [Arduino IDE](https://www.arduino.cc/en/Main/Software)\n- [VSCode](https://code.visualstudio.com/)\n- [l3g-arduino](https://github.com/pololu/l3g-arduino)\n- [lsm303-arduino](https://github.com/pololu/lsm303-arduino)\n\nTo use VSCode, you must check the *External editor* option in the Arduino IDE preferences.\n\n## Program V1\n\nI started by running the library examples for the accelerometer/magnetometer and gyro chips on the IMU. From there, and extracted the necessary pieces to start building my own functionality.\n\nSome of the basic code for accelerometer and gyro access:\n\n```c++\n#include <Wire.h>\n#include <LSM303.h>\n#include <L3G.h>\n\nL3G gyro;\nLSM303 acc;\n\nvoid setup() {\n  Wire.begin();\n\n  if (!gyro.init()) {\n    // Failure message\n    // Serial.println(\"Failed to autodetect gyro type!\");\n    while (1);\n  }\n\n  gyro.enableDefault();\n  acc.init();\n  acc.enableDefault();\n\n  // Disable magnetometer\n  acc.writeMagReg(0x02, 0b00000011);\n  // Change accelerometer scale to +-4g (default is +-2g)\n  acc.writeAccReg(0x23, 0b00010000);\n}\n\n// global gyro/acc values\nchar gx = 0;\nchar gy = 0;\nchar gz = 0;\nchar ax = 0;\nchar ay = 0;\nchar az = 0;\n\nvoid loop() {\n  delay(50);\n\n  gyro.read();\n  acc.read();\n\n  // This project only needs low resolution, so divide by 255 for a signed 8bit value\n  gx = gyro.g.x / 255;\n  gy = gyro.g.y / 255;\n  gz = gyro.g.z / 255;\n  ax = acc.a.x / 255;\n  ay = acc.a.y / 255;\n  // Invert the z scale so that it shows a positive value for \"up\"\n  az = -acc.a.z / 255;\n\n  // Use values\n}\n```\n\nSome basic steps from here to the full program included adding the simple firing code, with a global ammo count; adding a state machine-like logic which allows the program to be in READY, NEED_RELOAD, RELOADING, and other states; adding helper functions to handle sound effects; and setting up a non-blocking pause.\n\n[The full version 1 source.](https://gist.github.com/samsch/1174d95057e0ee701ebe1a534c929fd6)\n\n## How it works\n\nAfter a short startup, the module plays tone, then moves to the READY state.\n\nWhile READY, you can press the trigger button to fire shots. You can also press the mode button to change between rapid-fire and single-fire modes. In single-fire mode (one short beep), each trigger pull only fires once (semi-automatic) with a longer laser sound. In rapid-fire mode (two short beeps), the modules fire continuous short laser sounds while the trigger is pressed.\n\nOnce out of ammo, the module switches to NEED_RELOAD. From here, you can still change modes, but attempting to fire simply makes and out of ammo sound. To reload, you rotate in the positive direction along the Y axis to 90deg (from vertical). Once there the module goes into RELOADING.\n\nIn RELOADING, the modules makes a short two beep reloading sound, then starts ticking up the ammo count. You can interrupt the reload by rotating the module away from 90deg to the side. The ammo count will continue to rise until either MAX\\_AMMO is achieved, or the reload is interrupted. Once either of these happens, the module returns to READY state (or NEED\\_RELOAD if interrupted before any ammo is added).\n\n### Notes\n\n- The reloading state has a fairly wide (around 25-30deg from center) tolerance for the \"90deg\" position. This allows for much easier use than a smaller threshold, and allows the module to be jostled more, which can be important for something like a blaster prop.\n- The reloading state can only be entered from NEED_RELOAD, which itself can only be entered by emptying the ammo count. So while you can do a partial reload from empty, you can't reload until you run out of ammo.\n  - I'm not sure if I consider this a feature or a bug yet, so it may change.\n- The orientation of the Y axis depends on how the modules is mounted. At the moment, I'm assuming it would be such that reloading requires rotating the blaster along it's \"barrel\", with the top moving to the right side as you look down the blaster.\n- The sound effects are very basic. More complex sounds can be created, but the `tone()` method provided by the Arduino library is rather basic on it's own. It is limited to producing a single-frequency square wave.","slug":"sci-fi-prop-project","published":1,"updated":"2020-12-20T21:21:19.548Z","_id":"ckixl4zw1000fjku3do7efm9p","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/assets/sci-fi-prop-project/real-board-vertical.jpg\" alt=\"circuit on breadboard\"></p>\n<div style=\"text-align: center\"><iframe style=\"max-width: 100%;height: 560px\" src=\"https://www.youtube-nocookie.com/embed/tnfEZ7pGT8Y\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></div>\n\n<h2 id=\"What-is-it\"><a href=\"#What-is-it\" class=\"headerlink\" title=\"What is it?\"></a>What is it?</h2><p>I wanted to build a “laser gun” module to install in a Nerf blaster shell. The module would connect to the trigger to fire, and have motion/gesture sensing for additional functionality (such as reloading).</p>\n<h2 id=\"Development-hardware\"><a href=\"#Development-hardware\" class=\"headerlink\" title=\"Development hardware\"></a>Development hardware</h2><h3 id=\"BOM\"><a href=\"#BOM\" class=\"headerlink\" title=\"BOM\"></a>BOM</h3><h4 id=\"Important-parts\"><a href=\"#Important-parts\" class=\"headerlink\" title=\"Important parts\"></a>Important parts</h4><p>These are the pieces which actually make up the functionality.</p>\n<ul>\n<li>Arduino Nano - <em>or cheap clone</em></li>\n<li>Pololu Minu IMU - <em>v1, but any should work</em></li>\n<li>3x LEDs - <em>can be any desired types, or any other output driven by a high pin</em></li>\n<li>Speaker</li>\n<li>2x momentary switches</li>\n</ul>\n<h4 id=\"Passives-and-drivers\"><a href=\"#Passives-and-drivers\" class=\"headerlink\" title=\"Passives and drivers\"></a>Passives and drivers</h4><p>This is the stuff to support the above parts. Change as needed.</p>\n<p>LEDs</p>\n<ul>\n<li>3x 220 ohm resistor - <em>I tend to use 220ohm, since I have a lot and it’s about right for most LEDs</em></li>\n</ul>\n<p>Switches</p>\n<ul>\n<li>2x 10k ohm resistor - <em>for pull-ups</em></li>\n<li>2x .1uf capacity - <em>for debounce</em></li>\n</ul>\n<p>Speaker</p>\n<ul>\n<li>1x 10k ohm resistor - <em>for speaker driver pin</em></li>\n<li>PN2222 transitor - <em>speaker driver</em></li>\n</ul>\n<h3 id=\"Schematic\"><a href=\"#Schematic\" class=\"headerlink\" title=\"Schematic\"></a>Schematic</h3><p><img src=\"/assets/sci-fi-prop-project/schemeit-project.png\" alt=\"Layout of circuit\"></p>\n<h2 id=\"Software\"><a href=\"#Software\" class=\"headerlink\" title=\"Software\"></a>Software</h2><p>The software I used is the latest version of the Arduino IDE for Linux, VSCode, and the libraries for the Pololu Mini IMU.</p>\n<ul>\n<li><a href=\"https://www.arduino.cc/en/Main/Software\">Arduino IDE</a></li>\n<li><a href=\"https://code.visualstudio.com/\">VSCode</a></li>\n<li><a href=\"https://github.com/pololu/l3g-arduino\">l3g-arduino</a></li>\n<li><a href=\"https://github.com/pololu/lsm303-arduino\">lsm303-arduino</a></li>\n</ul>\n<p>To use VSCode, you must check the <em>External editor</em> option in the Arduino IDE preferences.</p>\n<h2 id=\"Program-V1\"><a href=\"#Program-V1\" class=\"headerlink\" title=\"Program V1\"></a>Program V1</h2><p>I started by running the library examples for the accelerometer/magnetometer and gyro chips on the IMU. From there, and extracted the necessary pieces to start building my own functionality.</p>\n<p>Some of the basic code for accelerometer and gyro access:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;Wire.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;LSM303.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;L3G.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">L3G gyro;</span><br><span class=\"line\">LSM303 acc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setup</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  Wire.begin();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!gyro.init()) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Failure message</span></span><br><span class=\"line\">    <span class=\"comment\">// Serial.println(&quot;Failed to autodetect gyro type!&quot;);</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  gyro.enableDefault();</span><br><span class=\"line\">  acc.init();</span><br><span class=\"line\">  acc.enableDefault();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Disable magnetometer</span></span><br><span class=\"line\">  acc.writeMagReg(<span class=\"number\">0x02</span>, <span class=\"number\">0b00000011</span>);</span><br><span class=\"line\">  <span class=\"comment\">// Change accelerometer scale to +-4g (default is +-2g)</span></span><br><span class=\"line\">  acc.writeAccReg(<span class=\"number\">0x23</span>, <span class=\"number\">0b00010000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// global gyro/acc values</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> gx = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> gy = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> gz = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> ax = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> ay = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> az = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">loop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  delay(<span class=\"number\">50</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  gyro.read();</span><br><span class=\"line\">  acc.read();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// This project only needs low resolution, so divide by 255 for a signed 8bit value</span></span><br><span class=\"line\">  gx = gyro.g.x / <span class=\"number\">255</span>;</span><br><span class=\"line\">  gy = gyro.g.y / <span class=\"number\">255</span>;</span><br><span class=\"line\">  gz = gyro.g.z / <span class=\"number\">255</span>;</span><br><span class=\"line\">  ax = acc.a.x / <span class=\"number\">255</span>;</span><br><span class=\"line\">  ay = acc.a.y / <span class=\"number\">255</span>;</span><br><span class=\"line\">  <span class=\"comment\">// Invert the z scale so that it shows a positive value for &quot;up&quot;</span></span><br><span class=\"line\">  az = -acc.a.z / <span class=\"number\">255</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Use values</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Some basic steps from here to the full program included adding the simple firing code, with a global ammo count; adding a state machine-like logic which allows the program to be in READY, NEED_RELOAD, RELOADING, and other states; adding helper functions to handle sound effects; and setting up a non-blocking pause.</p>\n<p><a href=\"https://gist.github.com/samsch/1174d95057e0ee701ebe1a534c929fd6\">The full version 1 source.</a></p>\n<h2 id=\"How-it-works\"><a href=\"#How-it-works\" class=\"headerlink\" title=\"How it works\"></a>How it works</h2><p>After a short startup, the module plays tone, then moves to the READY state.</p>\n<p>While READY, you can press the trigger button to fire shots. You can also press the mode button to change between rapid-fire and single-fire modes. In single-fire mode (one short beep), each trigger pull only fires once (semi-automatic) with a longer laser sound. In rapid-fire mode (two short beeps), the modules fire continuous short laser sounds while the trigger is pressed.</p>\n<p>Once out of ammo, the module switches to NEED_RELOAD. From here, you can still change modes, but attempting to fire simply makes and out of ammo sound. To reload, you rotate in the positive direction along the Y axis to 90deg (from vertical). Once there the module goes into RELOADING.</p>\n<p>In RELOADING, the modules makes a short two beep reloading sound, then starts ticking up the ammo count. You can interrupt the reload by rotating the module away from 90deg to the side. The ammo count will continue to rise until either MAX_AMMO is achieved, or the reload is interrupted. Once either of these happens, the module returns to READY state (or NEED_RELOAD if interrupted before any ammo is added).</p>\n<h3 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h3><ul>\n<li>The reloading state has a fairly wide (around 25-30deg from center) tolerance for the “90deg” position. This allows for much easier use than a smaller threshold, and allows the module to be jostled more, which can be important for something like a blaster prop.</li>\n<li>The reloading state can only be entered from NEED_RELOAD, which itself can only be entered by emptying the ammo count. So while you can do a partial reload from empty, you can’t reload until you run out of ammo.<ul>\n<li>I’m not sure if I consider this a feature or a bug yet, so it may change.</li>\n</ul>\n</li>\n<li>The orientation of the Y axis depends on how the modules is mounted. At the moment, I’m assuming it would be such that reloading requires rotating the blaster along it’s “barrel”, with the top moving to the right side as you look down the blaster.</li>\n<li>The sound effects are very basic. More complex sounds can be created, but the <code>tone()</code> method provided by the Arduino library is rather basic on it’s own. It is limited to producing a single-frequency square wave.</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/assets/sci-fi-prop-project/real-board-vertical.jpg\" alt=\"circuit on breadboard\"></p>\n<div style=\"text-align: center\"><iframe style=\"max-width: 100%;height: 560px\" src=\"https://www.youtube-nocookie.com/embed/tnfEZ7pGT8Y\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></div>\n\n<h2 id=\"What-is-it\"><a href=\"#What-is-it\" class=\"headerlink\" title=\"What is it?\"></a>What is it?</h2><p>I wanted to build a “laser gun” module to install in a Nerf blaster shell. The module would connect to the trigger to fire, and have motion/gesture sensing for additional functionality (such as reloading).</p>\n<h2 id=\"Development-hardware\"><a href=\"#Development-hardware\" class=\"headerlink\" title=\"Development hardware\"></a>Development hardware</h2><h3 id=\"BOM\"><a href=\"#BOM\" class=\"headerlink\" title=\"BOM\"></a>BOM</h3><h4 id=\"Important-parts\"><a href=\"#Important-parts\" class=\"headerlink\" title=\"Important parts\"></a>Important parts</h4><p>These are the pieces which actually make up the functionality.</p>\n<ul>\n<li>Arduino Nano - <em>or cheap clone</em></li>\n<li>Pololu Minu IMU - <em>v1, but any should work</em></li>\n<li>3x LEDs - <em>can be any desired types, or any other output driven by a high pin</em></li>\n<li>Speaker</li>\n<li>2x momentary switches</li>\n</ul>\n<h4 id=\"Passives-and-drivers\"><a href=\"#Passives-and-drivers\" class=\"headerlink\" title=\"Passives and drivers\"></a>Passives and drivers</h4><p>This is the stuff to support the above parts. Change as needed.</p>\n<p>LEDs</p>\n<ul>\n<li>3x 220 ohm resistor - <em>I tend to use 220ohm, since I have a lot and it’s about right for most LEDs</em></li>\n</ul>\n<p>Switches</p>\n<ul>\n<li>2x 10k ohm resistor - <em>for pull-ups</em></li>\n<li>2x .1uf capacity - <em>for debounce</em></li>\n</ul>\n<p>Speaker</p>\n<ul>\n<li>1x 10k ohm resistor - <em>for speaker driver pin</em></li>\n<li>PN2222 transitor - <em>speaker driver</em></li>\n</ul>\n<h3 id=\"Schematic\"><a href=\"#Schematic\" class=\"headerlink\" title=\"Schematic\"></a>Schematic</h3><p><img src=\"/assets/sci-fi-prop-project/schemeit-project.png\" alt=\"Layout of circuit\"></p>\n<h2 id=\"Software\"><a href=\"#Software\" class=\"headerlink\" title=\"Software\"></a>Software</h2><p>The software I used is the latest version of the Arduino IDE for Linux, VSCode, and the libraries for the Pololu Mini IMU.</p>\n<ul>\n<li><a href=\"https://www.arduino.cc/en/Main/Software\">Arduino IDE</a></li>\n<li><a href=\"https://code.visualstudio.com/\">VSCode</a></li>\n<li><a href=\"https://github.com/pololu/l3g-arduino\">l3g-arduino</a></li>\n<li><a href=\"https://github.com/pololu/lsm303-arduino\">lsm303-arduino</a></li>\n</ul>\n<p>To use VSCode, you must check the <em>External editor</em> option in the Arduino IDE preferences.</p>\n<h2 id=\"Program-V1\"><a href=\"#Program-V1\" class=\"headerlink\" title=\"Program V1\"></a>Program V1</h2><p>I started by running the library examples for the accelerometer/magnetometer and gyro chips on the IMU. From there, and extracted the necessary pieces to start building my own functionality.</p>\n<p>Some of the basic code for accelerometer and gyro access:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;Wire.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;LSM303.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;L3G.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">L3G gyro;</span><br><span class=\"line\">LSM303 acc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setup</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  Wire.begin();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!gyro.init()) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Failure message</span></span><br><span class=\"line\">    <span class=\"comment\">// Serial.println(&quot;Failed to autodetect gyro type!&quot;);</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  gyro.enableDefault();</span><br><span class=\"line\">  acc.init();</span><br><span class=\"line\">  acc.enableDefault();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Disable magnetometer</span></span><br><span class=\"line\">  acc.writeMagReg(<span class=\"number\">0x02</span>, <span class=\"number\">0b00000011</span>);</span><br><span class=\"line\">  <span class=\"comment\">// Change accelerometer scale to +-4g (default is +-2g)</span></span><br><span class=\"line\">  acc.writeAccReg(<span class=\"number\">0x23</span>, <span class=\"number\">0b00010000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// global gyro/acc values</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> gx = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> gy = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> gz = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> ax = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> ay = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> az = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">loop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  delay(<span class=\"number\">50</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  gyro.read();</span><br><span class=\"line\">  acc.read();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// This project only needs low resolution, so divide by 255 for a signed 8bit value</span></span><br><span class=\"line\">  gx = gyro.g.x / <span class=\"number\">255</span>;</span><br><span class=\"line\">  gy = gyro.g.y / <span class=\"number\">255</span>;</span><br><span class=\"line\">  gz = gyro.g.z / <span class=\"number\">255</span>;</span><br><span class=\"line\">  ax = acc.a.x / <span class=\"number\">255</span>;</span><br><span class=\"line\">  ay = acc.a.y / <span class=\"number\">255</span>;</span><br><span class=\"line\">  <span class=\"comment\">// Invert the z scale so that it shows a positive value for &quot;up&quot;</span></span><br><span class=\"line\">  az = -acc.a.z / <span class=\"number\">255</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Use values</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Some basic steps from here to the full program included adding the simple firing code, with a global ammo count; adding a state machine-like logic which allows the program to be in READY, NEED_RELOAD, RELOADING, and other states; adding helper functions to handle sound effects; and setting up a non-blocking pause.</p>\n<p><a href=\"https://gist.github.com/samsch/1174d95057e0ee701ebe1a534c929fd6\">The full version 1 source.</a></p>\n<h2 id=\"How-it-works\"><a href=\"#How-it-works\" class=\"headerlink\" title=\"How it works\"></a>How it works</h2><p>After a short startup, the module plays tone, then moves to the READY state.</p>\n<p>While READY, you can press the trigger button to fire shots. You can also press the mode button to change between rapid-fire and single-fire modes. In single-fire mode (one short beep), each trigger pull only fires once (semi-automatic) with a longer laser sound. In rapid-fire mode (two short beeps), the modules fire continuous short laser sounds while the trigger is pressed.</p>\n<p>Once out of ammo, the module switches to NEED_RELOAD. From here, you can still change modes, but attempting to fire simply makes and out of ammo sound. To reload, you rotate in the positive direction along the Y axis to 90deg (from vertical). Once there the module goes into RELOADING.</p>\n<p>In RELOADING, the modules makes a short two beep reloading sound, then starts ticking up the ammo count. You can interrupt the reload by rotating the module away from 90deg to the side. The ammo count will continue to rise until either MAX_AMMO is achieved, or the reload is interrupted. Once either of these happens, the module returns to READY state (or NEED_RELOAD if interrupted before any ammo is added).</p>\n<h3 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h3><ul>\n<li>The reloading state has a fairly wide (around 25-30deg from center) tolerance for the “90deg” position. This allows for much easier use than a smaller threshold, and allows the module to be jostled more, which can be important for something like a blaster prop.</li>\n<li>The reloading state can only be entered from NEED_RELOAD, which itself can only be entered by emptying the ammo count. So while you can do a partial reload from empty, you can’t reload until you run out of ammo.<ul>\n<li>I’m not sure if I consider this a feature or a bug yet, so it may change.</li>\n</ul>\n</li>\n<li>The orientation of the Y axis depends on how the modules is mounted. At the moment, I’m assuming it would be such that reloading requires rotating the blaster along it’s “barrel”, with the top moving to the right side as you look down the blaster.</li>\n<li>The sound effects are very basic. More complex sounds can be created, but the <code>tone()</code> method provided by the Arduino library is rather basic on it’s own. It is limited to producing a single-frequency square wave.</li>\n</ul>\n"},{"title":"Using the Web Audio API","date":"2018-03-04T16:00:29.000Z","_content":"Have you ever wanted to make some noise in your browser? I wanted to generate some sound effects, and it made me curious about what tools are available in the browser.\n\nWhat I found is the [Web Audio API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API). I'm going to show how to play basic sounds, and lay the groundwork for building more advanced sound generators.\n\n> All examples can be directly pasted into [jsfiddle](https://jsfiddle.net/) and run. The first couple are just JavaScript, but the others use a short bit of HTML. I'm running these in Firefox, but Chrome and Edge should also work fine. Webkit-based browsers may not work, and IE has no support.\n\nThe WebAudio API is built around a \"node\" system. It somewhat parallels how you would connect sound modules or effects pedals together in real life.\n\nThe base object you need to work with is the [AudioContext](https://developer.mozilla.org/en-US/docs/Web/API/AudioContext), created with `new AudioContext()` (or `new webkitAudioContext()` for Webkit-based browsers). This context object has factory methods to create the other nodes you use.\n\n## Basic sound output\n\nHere's how you output a simple tone (**Warning**, this is rather loud if run directly):\n```js\nconst audioContext = new (window.AudioContext || window.webkitAudioContext)();\nconst oscillator = audioContext.createOscillator();\noscillator.connect(audioContext.destination);\noscillator.frequency.setValueAtTime(440, audioContext.currentTime);\noscillator.start();\nwindow.setTimeout(() => {\n\toscillator.stop();\n}, 1000);\n```\nWe already learned about the audioContext, and the rest is fairly straightforward as well. The `audioContext.createOscillator()` creates an [OscillatorNode](https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode) instance, which generates a tone. OscillatorNodes has [AudioParam](https://developer.mozilla.org/en-US/docs/Web/API/AudioParam) properties to control frequency (directly, and via a \"detune\" value, which seems to be more suitable for note-based music generation) and wave-shape.\n\nOscillatorNode implement [AudioNode](https://developer.mozilla.org/en-US/docs/Web/API/AudioNode), which is the base class. AudioNodes use the AudioParam interface for properties, which gives controls like `setValueAtTime()` used above. So an oscillator has a `frequency` property which has the AudioParam properties and methods for reading and writing. You can't write to the frequency property directly (you can-ish, because it's JavaScript, but it won't \"work\"), instead you read from `oscillator.frequency.value`, and you can either write to the `value` property or use the time-based methods such as `.setValueAtTime()`. Generally, using the time-based methods is better, because they will overwrite any value written to the value property directly.\n\nTo use the output of an AudioNode, you call the `.connect()` method and pass the target, which can be another AudioNode, an AudioParam (for dynamic input), or `audioContext.destination` which represents the browser's sound output (speakers, headphones). We connect our oscillator to audioContext.destination so we can hear the output.\n\nWe call `.setValueAtTime()` with `440` and `audioContext.currentTime`, which says we want a frequency of 440hz, and we want that to be applied *now*. To sets value in the future, you add time in seconds to the currentTime value.\n\nTo start the oscillator sound output we call `.start()`. After a 1 second we stop the output with `.stop()`. These are not start/pause controls like you might expect. Once you call `.stop()`, an OscillatorNode can not be re-started. For repeatedly doing something, you either need to use multiple oscillators, or use a single oscillator and disconnect it's output or set the output volume to zero using a [GainNode](https://developer.mozilla.org/en-US/docs/Web/API/GainNode) before the destination.\n\n## Fixing the volume problem\nBy default, the oscillator output is rather loud. Lets fix that by adding a GainNode.\n```js\nconst audioContext = new (window.AudioContext || window.webkitAudioContext)();\nconst volume = audioContext.createGain();\nvolume.connect(audioContext.destination);\nvolume.gain.setValueAtTime(.2, audioContext.currentTime);\nconst oscillator = audioContext.createOscillator();\noscillator.connect(volume);\noscillator.frequency.setValueAtTime(440, audioContext.currentTime);\noscillator.start();\nwindow.setTimeout(() => {\n\toscillator.stop();\n}, 1000);\n```\nNow, instead of connecting the oscillator to the output directly, we connect it to a GainNode which then connects to the destination. The GainNode has a gain AudioParam which takes a float value and multiplies the amplitude. So a value of 1 would be no change, .5 would be half, and 2 would be double. .2 (or 20%) makes for a fairly reasonable volume.\n\n## Doing something more interesting\nLets make a button that plays a sound!\n\n```html\n<!-- HTML -->\n<button id=\"play-sound\">Play Sound</button>\n```\n```js\n// JavaScript\nconst audioContext = new (window.AudioContext || window.webkitAudioContext)();\nconst volume = audioContext.createGain();\nvolume.connect(audioContext.destination);\nvolume.gain.setValueAtTime(.2, audioContext.currentTime);\n\nconst button = document.getElementById('play-sound');\n\nbutton.addEventListener('click', () => {\n  const oscillator = audioContext.createOscillator();\n  oscillator.connect(volume);\n  oscillator.frequency.setValueAtTime(440, audioContext.currentTime);\n  oscillator.start();\n  window.setTimeout(() => {\n    oscillator.stop();\n    oscillator.disconnect();\n  }, 500);\n});\n```\nOur button click handler creates a new oscillator, connects it, sets the frequency, starts it, and then stops and disconnects it after 500ms.\n\nThis is the basis for how you play sounds on a trigger. Just create your oscillator, play it, and destroy it. Notice that if you click the button again before the sound stops, it does create a new oscillator and plays them both, which you can usually hear as a louder sound.\n\n## Exciting sounds\nSo far, we've only made boring single-frequency sounds. Lets do something a bit more interesting. If we just wanted to change the pitch played on the button press, that would be as simple as changing \"440\" to the desired frequency. This could be set from a dynamic input as well.\n\nMore interesting would be to play a series of sounds. Lets make a varying wave-form.\n\nThe html will be the same as above, with this JavaScript:\n```js\nconst audioContext = new (window.AudioContext || window.webkitAudioContext)();\nconst volume = audioContext.createGain();\nvolume.connect(audioContext.destination);\nvolume.gain.setValueAtTime(.2, audioContext.currentTime);\n\nconst button = document.getElementById('play-sound');\n\nconst frequencyList = [];\nfor (let i = 0; i < 1000; i++) {\n\tfrequencyList.push(Math.sin(i * Math.PI / 100) * 100 + 400);\n}\n\nbutton.addEventListener('click', () => {\n  const oscillator = audioContext.createOscillator();\n  oscillator.connect(volume);\n  frequencyList.forEach((frequency, time) => {\n  \toscillator.frequency.setValueAtTime(frequency, audioContext.currentTime + time*.001);\n  });\n  oscillator.start();\n  window.setTimeout(() => {\n    oscillator.stop();\n  }, 1000);\n});\n```\nInstead of just setting a frequency and calling it done, we run over an array of 1000 frequency values, setting them at intervals of 1ms so that we get a (to human perception) smooth variation of pitch. Any AudioParams can be set like this, so you can create arrays of frequency and volume (gain) values to play over time.\n\n## More!\nNaturally, this is just the tip of the iceberg. Besides gain and oscillators, you can do other types of filtering and effects, including reverberation, delays, and distortion; you can use microphone input and uploaded audio files; and you can even do visualizations of the waveform output. A good place to start for more in-depth study is the [MDN Web Audio API Guide](https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API). Especially look through the types of AudioNodes listed in *Related pages for Web Audio API*.\n","source":"_posts/2018-03-04-using-the-web-audio-api.md","raw":"---\ntitle: Using the Web Audio API\ndate: 2018-03-04 11:00:29\ntags:\n- js\n- Web API\n---\nHave you ever wanted to make some noise in your browser? I wanted to generate some sound effects, and it made me curious about what tools are available in the browser.\n\nWhat I found is the [Web Audio API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API). I'm going to show how to play basic sounds, and lay the groundwork for building more advanced sound generators.\n\n> All examples can be directly pasted into [jsfiddle](https://jsfiddle.net/) and run. The first couple are just JavaScript, but the others use a short bit of HTML. I'm running these in Firefox, but Chrome and Edge should also work fine. Webkit-based browsers may not work, and IE has no support.\n\nThe WebAudio API is built around a \"node\" system. It somewhat parallels how you would connect sound modules or effects pedals together in real life.\n\nThe base object you need to work with is the [AudioContext](https://developer.mozilla.org/en-US/docs/Web/API/AudioContext), created with `new AudioContext()` (or `new webkitAudioContext()` for Webkit-based browsers). This context object has factory methods to create the other nodes you use.\n\n## Basic sound output\n\nHere's how you output a simple tone (**Warning**, this is rather loud if run directly):\n```js\nconst audioContext = new (window.AudioContext || window.webkitAudioContext)();\nconst oscillator = audioContext.createOscillator();\noscillator.connect(audioContext.destination);\noscillator.frequency.setValueAtTime(440, audioContext.currentTime);\noscillator.start();\nwindow.setTimeout(() => {\n\toscillator.stop();\n}, 1000);\n```\nWe already learned about the audioContext, and the rest is fairly straightforward as well. The `audioContext.createOscillator()` creates an [OscillatorNode](https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode) instance, which generates a tone. OscillatorNodes has [AudioParam](https://developer.mozilla.org/en-US/docs/Web/API/AudioParam) properties to control frequency (directly, and via a \"detune\" value, which seems to be more suitable for note-based music generation) and wave-shape.\n\nOscillatorNode implement [AudioNode](https://developer.mozilla.org/en-US/docs/Web/API/AudioNode), which is the base class. AudioNodes use the AudioParam interface for properties, which gives controls like `setValueAtTime()` used above. So an oscillator has a `frequency` property which has the AudioParam properties and methods for reading and writing. You can't write to the frequency property directly (you can-ish, because it's JavaScript, but it won't \"work\"), instead you read from `oscillator.frequency.value`, and you can either write to the `value` property or use the time-based methods such as `.setValueAtTime()`. Generally, using the time-based methods is better, because they will overwrite any value written to the value property directly.\n\nTo use the output of an AudioNode, you call the `.connect()` method and pass the target, which can be another AudioNode, an AudioParam (for dynamic input), or `audioContext.destination` which represents the browser's sound output (speakers, headphones). We connect our oscillator to audioContext.destination so we can hear the output.\n\nWe call `.setValueAtTime()` with `440` and `audioContext.currentTime`, which says we want a frequency of 440hz, and we want that to be applied *now*. To sets value in the future, you add time in seconds to the currentTime value.\n\nTo start the oscillator sound output we call `.start()`. After a 1 second we stop the output with `.stop()`. These are not start/pause controls like you might expect. Once you call `.stop()`, an OscillatorNode can not be re-started. For repeatedly doing something, you either need to use multiple oscillators, or use a single oscillator and disconnect it's output or set the output volume to zero using a [GainNode](https://developer.mozilla.org/en-US/docs/Web/API/GainNode) before the destination.\n\n## Fixing the volume problem\nBy default, the oscillator output is rather loud. Lets fix that by adding a GainNode.\n```js\nconst audioContext = new (window.AudioContext || window.webkitAudioContext)();\nconst volume = audioContext.createGain();\nvolume.connect(audioContext.destination);\nvolume.gain.setValueAtTime(.2, audioContext.currentTime);\nconst oscillator = audioContext.createOscillator();\noscillator.connect(volume);\noscillator.frequency.setValueAtTime(440, audioContext.currentTime);\noscillator.start();\nwindow.setTimeout(() => {\n\toscillator.stop();\n}, 1000);\n```\nNow, instead of connecting the oscillator to the output directly, we connect it to a GainNode which then connects to the destination. The GainNode has a gain AudioParam which takes a float value and multiplies the amplitude. So a value of 1 would be no change, .5 would be half, and 2 would be double. .2 (or 20%) makes for a fairly reasonable volume.\n\n## Doing something more interesting\nLets make a button that plays a sound!\n\n```html\n<!-- HTML -->\n<button id=\"play-sound\">Play Sound</button>\n```\n```js\n// JavaScript\nconst audioContext = new (window.AudioContext || window.webkitAudioContext)();\nconst volume = audioContext.createGain();\nvolume.connect(audioContext.destination);\nvolume.gain.setValueAtTime(.2, audioContext.currentTime);\n\nconst button = document.getElementById('play-sound');\n\nbutton.addEventListener('click', () => {\n  const oscillator = audioContext.createOscillator();\n  oscillator.connect(volume);\n  oscillator.frequency.setValueAtTime(440, audioContext.currentTime);\n  oscillator.start();\n  window.setTimeout(() => {\n    oscillator.stop();\n    oscillator.disconnect();\n  }, 500);\n});\n```\nOur button click handler creates a new oscillator, connects it, sets the frequency, starts it, and then stops and disconnects it after 500ms.\n\nThis is the basis for how you play sounds on a trigger. Just create your oscillator, play it, and destroy it. Notice that if you click the button again before the sound stops, it does create a new oscillator and plays them both, which you can usually hear as a louder sound.\n\n## Exciting sounds\nSo far, we've only made boring single-frequency sounds. Lets do something a bit more interesting. If we just wanted to change the pitch played on the button press, that would be as simple as changing \"440\" to the desired frequency. This could be set from a dynamic input as well.\n\nMore interesting would be to play a series of sounds. Lets make a varying wave-form.\n\nThe html will be the same as above, with this JavaScript:\n```js\nconst audioContext = new (window.AudioContext || window.webkitAudioContext)();\nconst volume = audioContext.createGain();\nvolume.connect(audioContext.destination);\nvolume.gain.setValueAtTime(.2, audioContext.currentTime);\n\nconst button = document.getElementById('play-sound');\n\nconst frequencyList = [];\nfor (let i = 0; i < 1000; i++) {\n\tfrequencyList.push(Math.sin(i * Math.PI / 100) * 100 + 400);\n}\n\nbutton.addEventListener('click', () => {\n  const oscillator = audioContext.createOscillator();\n  oscillator.connect(volume);\n  frequencyList.forEach((frequency, time) => {\n  \toscillator.frequency.setValueAtTime(frequency, audioContext.currentTime + time*.001);\n  });\n  oscillator.start();\n  window.setTimeout(() => {\n    oscillator.stop();\n  }, 1000);\n});\n```\nInstead of just setting a frequency and calling it done, we run over an array of 1000 frequency values, setting them at intervals of 1ms so that we get a (to human perception) smooth variation of pitch. Any AudioParams can be set like this, so you can create arrays of frequency and volume (gain) values to play over time.\n\n## More!\nNaturally, this is just the tip of the iceberg. Besides gain and oscillators, you can do other types of filtering and effects, including reverberation, delays, and distortion; you can use microphone input and uploaded audio files; and you can even do visualizations of the waveform output. A good place to start for more in-depth study is the [MDN Web Audio API Guide](https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API). Especially look through the types of AudioNodes listed in *Related pages for Web Audio API*.\n","slug":"using-the-web-audio-api","published":1,"updated":"2018-03-04T19:48:51.450Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckixl4zw1000hjku3l7kj27pe","content":"<p>Have you ever wanted to make some noise in your browser? I wanted to generate some sound effects, and it made me curious about what tools are available in the browser.</p>\n<p>What I found is the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API\" target=\"_blank\" rel=\"external\">Web Audio API</a>. I’m going to show how to play basic sounds, and lay the groundwork for building more advanced sound generators.</p>\n<blockquote>\n<p>All examples can be directly pasted into <a href=\"https://jsfiddle.net/\" target=\"_blank\" rel=\"external\">jsfiddle</a> and run. The first couple are just JavaScript, but the others use a short bit of HTML. I’m running these in Firefox, but Chrome and Edge should also work fine. Webkit-based browsers may not work, and IE has no support.</p>\n</blockquote>\n<p>The WebAudio API is built around a “node” system. It somewhat parallels how you would connect sound modules or effects pedals together in real life.</p>\n<p>The base object you need to work with is the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/AudioContext\" target=\"_blank\" rel=\"external\">AudioContext</a>, created with <code>new AudioContext()</code> (or <code>new webkitAudioContext()</code> for Webkit-based browsers). This context object has factory methods to create the other nodes you use.</p>\n<h2 id=\"Basic-sound-output\"><a href=\"#Basic-sound-output\" class=\"headerlink\" title=\"Basic sound output\"></a>Basic sound output</h2><p>Here’s how you output a simple tone (<strong>Warning</strong>, this is rather loud if run directly):<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> audioContext = <span class=\"keyword\">new</span> (<span class=\"built_in\">window</span>.AudioContext || <span class=\"built_in\">window</span>.webkitAudioContext)();</div><div class=\"line\"><span class=\"keyword\">const</span> oscillator = audioContext.createOscillator();</div><div class=\"line\">oscillator.connect(audioContext.destination);</div><div class=\"line\">oscillator.frequency.setValueAtTime(<span class=\"number\">440</span>, audioContext.currentTime);</div><div class=\"line\">oscillator.start();</div><div class=\"line\"><span class=\"built_in\">window</span>.setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">\toscillator.stop();</div><div class=\"line\">&#125;, <span class=\"number\">1000</span>);</div></pre></td></tr></table></figure></p>\n<p>We already learned about the audioContext, and the rest is fairly straightforward as well. The <code>audioContext.createOscillator()</code> creates an <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode\" target=\"_blank\" rel=\"external\">OscillatorNode</a> instance, which generates a tone. OscillatorNodes has <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/AudioParam\" target=\"_blank\" rel=\"external\">AudioParam</a> properties to control frequency (directly, and via a “detune” value, which seems to be more suitable for note-based music generation) and wave-shape.</p>\n<p>OscillatorNode implement <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/AudioNode\" target=\"_blank\" rel=\"external\">AudioNode</a>, which is the base class. AudioNodes use the AudioParam interface for properties, which gives controls like <code>setValueAtTime()</code> used above. So an oscillator has a <code>frequency</code> property which has the AudioParam properties and methods for reading and writing. You can’t write to the frequency property directly (you can-ish, because it’s JavaScript, but it won’t “work”), instead you read from <code>oscillator.frequency.value</code>, and you can either write to the <code>value</code> property or use the time-based methods such as <code>.setValueAtTime()</code>. Generally, using the time-based methods is better, because they will overwrite any value written to the value property directly.</p>\n<p>To use the output of an AudioNode, you call the <code>.connect()</code> method and pass the target, which can be another AudioNode, an AudioParam (for dynamic input), or <code>audioContext.destination</code> which represents the browser’s sound output (speakers, headphones). We connect our oscillator to audioContext.destination so we can hear the output.</p>\n<p>We call <code>.setValueAtTime()</code> with <code>440</code> and <code>audioContext.currentTime</code>, which says we want a frequency of 440hz, and we want that to be applied <em>now</em>. To sets value in the future, you add time in seconds to the currentTime value.</p>\n<p>To start the oscillator sound output we call <code>.start()</code>. After a 1 second we stop the output with <code>.stop()</code>. These are not start/pause controls like you might expect. Once you call <code>.stop()</code>, an OscillatorNode can not be re-started. For repeatedly doing something, you either need to use multiple oscillators, or use a single oscillator and disconnect it’s output or set the output volume to zero using a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/GainNode\" target=\"_blank\" rel=\"external\">GainNode</a> before the destination.</p>\n<h2 id=\"Fixing-the-volume-problem\"><a href=\"#Fixing-the-volume-problem\" class=\"headerlink\" title=\"Fixing the volume problem\"></a>Fixing the volume problem</h2><p>By default, the oscillator output is rather loud. Lets fix that by adding a GainNode.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> audioContext = <span class=\"keyword\">new</span> (<span class=\"built_in\">window</span>.AudioContext || <span class=\"built_in\">window</span>.webkitAudioContext)();</div><div class=\"line\"><span class=\"keyword\">const</span> volume = audioContext.createGain();</div><div class=\"line\">volume.connect(audioContext.destination);</div><div class=\"line\">volume.gain.setValueAtTime(<span class=\"number\">.2</span>, audioContext.currentTime);</div><div class=\"line\"><span class=\"keyword\">const</span> oscillator = audioContext.createOscillator();</div><div class=\"line\">oscillator.connect(volume);</div><div class=\"line\">oscillator.frequency.setValueAtTime(<span class=\"number\">440</span>, audioContext.currentTime);</div><div class=\"line\">oscillator.start();</div><div class=\"line\"><span class=\"built_in\">window</span>.setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">\toscillator.stop();</div><div class=\"line\">&#125;, <span class=\"number\">1000</span>);</div></pre></td></tr></table></figure></p>\n<p>Now, instead of connecting the oscillator to the output directly, we connect it to a GainNode which then connects to the destination. The GainNode has a gain AudioParam which takes a float value and multiplies the amplitude. So a value of 1 would be no change, .5 would be half, and 2 would be double. .2 (or 20%) makes for a fairly reasonable volume.</p>\n<h2 id=\"Doing-something-more-interesting\"><a href=\"#Doing-something-more-interesting\" class=\"headerlink\" title=\"Doing something more interesting\"></a>Doing something more interesting</h2><p>Lets make a button that plays a sound!</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- HTML --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"play-sound\"</span>&gt;</span>Play Sound<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// JavaScript</span></div><div class=\"line\"><span class=\"keyword\">const</span> audioContext = <span class=\"keyword\">new</span> (<span class=\"built_in\">window</span>.AudioContext || <span class=\"built_in\">window</span>.webkitAudioContext)();</div><div class=\"line\"><span class=\"keyword\">const</span> volume = audioContext.createGain();</div><div class=\"line\">volume.connect(audioContext.destination);</div><div class=\"line\">volume.gain.setValueAtTime(<span class=\"number\">.2</span>, audioContext.currentTime);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> button = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'play-sound'</span>);</div><div class=\"line\"></div><div class=\"line\">button.addEventListener(<span class=\"string\">'click'</span>, () =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> oscillator = audioContext.createOscillator();</div><div class=\"line\">  oscillator.connect(volume);</div><div class=\"line\">  oscillator.frequency.setValueAtTime(<span class=\"number\">440</span>, audioContext.currentTime);</div><div class=\"line\">  oscillator.start();</div><div class=\"line\">  <span class=\"built_in\">window</span>.setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    oscillator.stop();</div><div class=\"line\">    oscillator.disconnect();</div><div class=\"line\">  &#125;, <span class=\"number\">500</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Our button click handler creates a new oscillator, connects it, sets the frequency, starts it, and then stops and disconnects it after 500ms.</p>\n<p>This is the basis for how you play sounds on a trigger. Just create your oscillator, play it, and destroy it. Notice that if you click the button again before the sound stops, it does create a new oscillator and plays them both, which you can usually hear as a louder sound.</p>\n<h2 id=\"Exciting-sounds\"><a href=\"#Exciting-sounds\" class=\"headerlink\" title=\"Exciting sounds\"></a>Exciting sounds</h2><p>So far, we’ve only made boring single-frequency sounds. Lets do something a bit more interesting. If we just wanted to change the pitch played on the button press, that would be as simple as changing “440” to the desired frequency. This could be set from a dynamic input as well.</p>\n<p>More interesting would be to play a series of sounds. Lets make a varying wave-form.</p>\n<p>The html will be the same as above, with this JavaScript:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> audioContext = <span class=\"keyword\">new</span> (<span class=\"built_in\">window</span>.AudioContext || <span class=\"built_in\">window</span>.webkitAudioContext)();</div><div class=\"line\"><span class=\"keyword\">const</span> volume = audioContext.createGain();</div><div class=\"line\">volume.connect(audioContext.destination);</div><div class=\"line\">volume.gain.setValueAtTime(<span class=\"number\">.2</span>, audioContext.currentTime);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> button = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'play-sound'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> frequencyList = [];</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</div><div class=\"line\">\tfrequencyList.push(<span class=\"built_in\">Math</span>.sin(i * <span class=\"built_in\">Math</span>.PI / <span class=\"number\">100</span>) * <span class=\"number\">100</span> + <span class=\"number\">400</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">button.addEventListener(<span class=\"string\">'click'</span>, () =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> oscillator = audioContext.createOscillator();</div><div class=\"line\">  oscillator.connect(volume);</div><div class=\"line\">  frequencyList.forEach(<span class=\"function\">(<span class=\"params\">frequency, time</span>) =&gt;</span> &#123;</div><div class=\"line\">  \toscillator.frequency.setValueAtTime(frequency, audioContext.currentTime + time*<span class=\"number\">.001</span>);</div><div class=\"line\">  &#125;);</div><div class=\"line\">  oscillator.start();</div><div class=\"line\">  <span class=\"built_in\">window</span>.setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    oscillator.stop();</div><div class=\"line\">  &#125;, <span class=\"number\">1000</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>Instead of just setting a frequency and calling it done, we run over an array of 1000 frequency values, setting them at intervals of 1ms so that we get a (to human perception) smooth variation of pitch. Any AudioParams can be set like this, so you can create arrays of frequency and volume (gain) values to play over time.</p>\n<h2 id=\"More\"><a href=\"#More\" class=\"headerlink\" title=\"More!\"></a>More!</h2><p>Naturally, this is just the tip of the iceberg. Besides gain and oscillators, you can do other types of filtering and effects, including reverberation, delays, and distortion; you can use microphone input and uploaded audio files; and you can even do visualizations of the waveform output. A good place to start for more in-depth study is the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API\" target=\"_blank\" rel=\"external\">MDN Web Audio API Guide</a>. Especially look through the types of AudioNodes listed in <em>Related pages for Web Audio API</em>.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Have you ever wanted to make some noise in your browser? I wanted to generate some sound effects, and it made me curious about what tools are available in the browser.</p>\n<p>What I found is the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API\" target=\"_blank\" rel=\"external\">Web Audio API</a>. I’m going to show how to play basic sounds, and lay the groundwork for building more advanced sound generators.</p>\n<blockquote>\n<p>All examples can be directly pasted into <a href=\"https://jsfiddle.net/\" target=\"_blank\" rel=\"external\">jsfiddle</a> and run. The first couple are just JavaScript, but the others use a short bit of HTML. I’m running these in Firefox, but Chrome and Edge should also work fine. Webkit-based browsers may not work, and IE has no support.</p>\n</blockquote>\n<p>The WebAudio API is built around a “node” system. It somewhat parallels how you would connect sound modules or effects pedals together in real life.</p>\n<p>The base object you need to work with is the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/AudioContext\" target=\"_blank\" rel=\"external\">AudioContext</a>, created with <code>new AudioContext()</code> (or <code>new webkitAudioContext()</code> for Webkit-based browsers). This context object has factory methods to create the other nodes you use.</p>\n<h2 id=\"Basic-sound-output\"><a href=\"#Basic-sound-output\" class=\"headerlink\" title=\"Basic sound output\"></a>Basic sound output</h2><p>Here’s how you output a simple tone (<strong>Warning</strong>, this is rather loud if run directly):<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> audioContext = <span class=\"keyword\">new</span> (<span class=\"built_in\">window</span>.AudioContext || <span class=\"built_in\">window</span>.webkitAudioContext)();</div><div class=\"line\"><span class=\"keyword\">const</span> oscillator = audioContext.createOscillator();</div><div class=\"line\">oscillator.connect(audioContext.destination);</div><div class=\"line\">oscillator.frequency.setValueAtTime(<span class=\"number\">440</span>, audioContext.currentTime);</div><div class=\"line\">oscillator.start();</div><div class=\"line\"><span class=\"built_in\">window</span>.setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">\toscillator.stop();</div><div class=\"line\">&#125;, <span class=\"number\">1000</span>);</div></pre></td></tr></table></figure></p>\n<p>We already learned about the audioContext, and the rest is fairly straightforward as well. The <code>audioContext.createOscillator()</code> creates an <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode\" target=\"_blank\" rel=\"external\">OscillatorNode</a> instance, which generates a tone. OscillatorNodes has <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/AudioParam\" target=\"_blank\" rel=\"external\">AudioParam</a> properties to control frequency (directly, and via a “detune” value, which seems to be more suitable for note-based music generation) and wave-shape.</p>\n<p>OscillatorNode implement <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/AudioNode\" target=\"_blank\" rel=\"external\">AudioNode</a>, which is the base class. AudioNodes use the AudioParam interface for properties, which gives controls like <code>setValueAtTime()</code> used above. So an oscillator has a <code>frequency</code> property which has the AudioParam properties and methods for reading and writing. You can’t write to the frequency property directly (you can-ish, because it’s JavaScript, but it won’t “work”), instead you read from <code>oscillator.frequency.value</code>, and you can either write to the <code>value</code> property or use the time-based methods such as <code>.setValueAtTime()</code>. Generally, using the time-based methods is better, because they will overwrite any value written to the value property directly.</p>\n<p>To use the output of an AudioNode, you call the <code>.connect()</code> method and pass the target, which can be another AudioNode, an AudioParam (for dynamic input), or <code>audioContext.destination</code> which represents the browser’s sound output (speakers, headphones). We connect our oscillator to audioContext.destination so we can hear the output.</p>\n<p>We call <code>.setValueAtTime()</code> with <code>440</code> and <code>audioContext.currentTime</code>, which says we want a frequency of 440hz, and we want that to be applied <em>now</em>. To sets value in the future, you add time in seconds to the currentTime value.</p>\n<p>To start the oscillator sound output we call <code>.start()</code>. After a 1 second we stop the output with <code>.stop()</code>. These are not start/pause controls like you might expect. Once you call <code>.stop()</code>, an OscillatorNode can not be re-started. For repeatedly doing something, you either need to use multiple oscillators, or use a single oscillator and disconnect it’s output or set the output volume to zero using a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/GainNode\" target=\"_blank\" rel=\"external\">GainNode</a> before the destination.</p>\n<h2 id=\"Fixing-the-volume-problem\"><a href=\"#Fixing-the-volume-problem\" class=\"headerlink\" title=\"Fixing the volume problem\"></a>Fixing the volume problem</h2><p>By default, the oscillator output is rather loud. Lets fix that by adding a GainNode.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> audioContext = <span class=\"keyword\">new</span> (<span class=\"built_in\">window</span>.AudioContext || <span class=\"built_in\">window</span>.webkitAudioContext)();</div><div class=\"line\"><span class=\"keyword\">const</span> volume = audioContext.createGain();</div><div class=\"line\">volume.connect(audioContext.destination);</div><div class=\"line\">volume.gain.setValueAtTime(<span class=\"number\">.2</span>, audioContext.currentTime);</div><div class=\"line\"><span class=\"keyword\">const</span> oscillator = audioContext.createOscillator();</div><div class=\"line\">oscillator.connect(volume);</div><div class=\"line\">oscillator.frequency.setValueAtTime(<span class=\"number\">440</span>, audioContext.currentTime);</div><div class=\"line\">oscillator.start();</div><div class=\"line\"><span class=\"built_in\">window</span>.setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">\toscillator.stop();</div><div class=\"line\">&#125;, <span class=\"number\">1000</span>);</div></pre></td></tr></table></figure></p>\n<p>Now, instead of connecting the oscillator to the output directly, we connect it to a GainNode which then connects to the destination. The GainNode has a gain AudioParam which takes a float value and multiplies the amplitude. So a value of 1 would be no change, .5 would be half, and 2 would be double. .2 (or 20%) makes for a fairly reasonable volume.</p>\n<h2 id=\"Doing-something-more-interesting\"><a href=\"#Doing-something-more-interesting\" class=\"headerlink\" title=\"Doing something more interesting\"></a>Doing something more interesting</h2><p>Lets make a button that plays a sound!</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- HTML --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"play-sound\"</span>&gt;</span>Play Sound<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// JavaScript</span></div><div class=\"line\"><span class=\"keyword\">const</span> audioContext = <span class=\"keyword\">new</span> (<span class=\"built_in\">window</span>.AudioContext || <span class=\"built_in\">window</span>.webkitAudioContext)();</div><div class=\"line\"><span class=\"keyword\">const</span> volume = audioContext.createGain();</div><div class=\"line\">volume.connect(audioContext.destination);</div><div class=\"line\">volume.gain.setValueAtTime(<span class=\"number\">.2</span>, audioContext.currentTime);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> button = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'play-sound'</span>);</div><div class=\"line\"></div><div class=\"line\">button.addEventListener(<span class=\"string\">'click'</span>, () =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> oscillator = audioContext.createOscillator();</div><div class=\"line\">  oscillator.connect(volume);</div><div class=\"line\">  oscillator.frequency.setValueAtTime(<span class=\"number\">440</span>, audioContext.currentTime);</div><div class=\"line\">  oscillator.start();</div><div class=\"line\">  <span class=\"built_in\">window</span>.setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    oscillator.stop();</div><div class=\"line\">    oscillator.disconnect();</div><div class=\"line\">  &#125;, <span class=\"number\">500</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Our button click handler creates a new oscillator, connects it, sets the frequency, starts it, and then stops and disconnects it after 500ms.</p>\n<p>This is the basis for how you play sounds on a trigger. Just create your oscillator, play it, and destroy it. Notice that if you click the button again before the sound stops, it does create a new oscillator and plays them both, which you can usually hear as a louder sound.</p>\n<h2 id=\"Exciting-sounds\"><a href=\"#Exciting-sounds\" class=\"headerlink\" title=\"Exciting sounds\"></a>Exciting sounds</h2><p>So far, we’ve only made boring single-frequency sounds. Lets do something a bit more interesting. If we just wanted to change the pitch played on the button press, that would be as simple as changing “440” to the desired frequency. This could be set from a dynamic input as well.</p>\n<p>More interesting would be to play a series of sounds. Lets make a varying wave-form.</p>\n<p>The html will be the same as above, with this JavaScript:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> audioContext = <span class=\"keyword\">new</span> (<span class=\"built_in\">window</span>.AudioContext || <span class=\"built_in\">window</span>.webkitAudioContext)();</div><div class=\"line\"><span class=\"keyword\">const</span> volume = audioContext.createGain();</div><div class=\"line\">volume.connect(audioContext.destination);</div><div class=\"line\">volume.gain.setValueAtTime(<span class=\"number\">.2</span>, audioContext.currentTime);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> button = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'play-sound'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> frequencyList = [];</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</div><div class=\"line\">\tfrequencyList.push(<span class=\"built_in\">Math</span>.sin(i * <span class=\"built_in\">Math</span>.PI / <span class=\"number\">100</span>) * <span class=\"number\">100</span> + <span class=\"number\">400</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">button.addEventListener(<span class=\"string\">'click'</span>, () =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> oscillator = audioContext.createOscillator();</div><div class=\"line\">  oscillator.connect(volume);</div><div class=\"line\">  frequencyList.forEach(<span class=\"function\">(<span class=\"params\">frequency, time</span>) =&gt;</span> &#123;</div><div class=\"line\">  \toscillator.frequency.setValueAtTime(frequency, audioContext.currentTime + time*<span class=\"number\">.001</span>);</div><div class=\"line\">  &#125;);</div><div class=\"line\">  oscillator.start();</div><div class=\"line\">  <span class=\"built_in\">window</span>.setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    oscillator.stop();</div><div class=\"line\">  &#125;, <span class=\"number\">1000</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>Instead of just setting a frequency and calling it done, we run over an array of 1000 frequency values, setting them at intervals of 1ms so that we get a (to human perception) smooth variation of pitch. Any AudioParams can be set like this, so you can create arrays of frequency and volume (gain) values to play over time.</p>\n<h2 id=\"More\"><a href=\"#More\" class=\"headerlink\" title=\"More!\"></a>More!</h2><p>Naturally, this is just the tip of the iceberg. Besides gain and oscillators, you can do other types of filtering and effects, including reverberation, delays, and distortion; you can use microphone input and uploaded audio files; and you can even do visualizations of the waveform output. A good place to start for more in-depth study is the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API\" target=\"_blank\" rel=\"external\">MDN Web Audio API Guide</a>. Especially look through the types of AudioNodes listed in <em>Related pages for Web Audio API</em>.</p>\n"},{"title":"How to Setup Webpack v4","date":"2018-09-04T04:00:00.000Z","_content":"> These docs are written for Webpack version 4, and Babel version 7.\n\nIf you write JavaScript code you should be using a module system. For the browser, this means bundling, since built-in module support isn't yet ready to be used in production.\n\n> Bundler: A tool which compiles a module-based codebase into a single (or a few) large file to be linked from your HTML.\n\nThe industry standard tool for bundling is Webpack. In the past, Webpack had a bad rep for being difficult to configure because it's documentation was lacking, and because new users were often shown bloated examples including features they might never use. Since then, the documentation has dramatically improved. In this guide, we'll focus on what you need to get started!\n\n> The [Webpack documentation](https://webpack.js.org/concepts/) is really quite good, but it can be hard to filter to just what you need. This guide is meant to be the minimal parts you really need for development and production.\n\n# Prerequisites\n\nPrimarily, you need to have Node.js installed. This guide assumes you are using current Node v10+ and npm 6+.\n\nFor Linux and MacOS, the easiest way to install and work with Node is using nvm. Instructions for installing are on the [nvm project page](https://github.com/creationix/nvm#installation).\n\n> If using Windows, you can download an installer from the [Node.js website](https://nodejs.org/en/).\n>\n> The instructions are the same for Webpack in Windows, except you might use backslashes instead of slashes for paths on the command line. For example, `webpack src/main.js public/bundle.js` might be `webpack src\\main.js public\\bundle.js` in Windows.\n\n# Create a project\n\nFirst, create a project folder (such as `myproject`). In the project folder open a terminal and run `npm init`, and answer the questions. (You can also run `npm init -y` to skip all the questions and use defaults.)\n\n> From here on out, all command line snippets will assume you are currently in the project folder root.\n\nAdd Webpack to your development dependencies: `npm install --save-dev webpack webpack-cli`.\n\n> From here on in this guide, we'll use the shorthand `npm` commands like `npm i` (for `npm install`) and `npm i -D` (for `install --save-dev`).\n\nCreate a folder in your project called `src`.\n\nInside `src/`, add two JavaScript files:\n\n`src/index.js`:\n```js\nimport foo from './foo';\n\nconsole.log('Running in index.js!');\n\nfoo();\n```\n\n`src/foo.js`:\n```js\nimport camelCase from 'camelcase';\n\nfunction foo () {\n  console.log(camelCase('Running in foo.js!'));\n}\n\nexport default foo;\n```\n\nAnd do `npm i camelcase`.\n\n> The `camelcase` module is being used here as an example to show that you can import and bundle npm modules.\n\n> There are things missing that you should have in a \"real\" project, like linting. Feel free to add them, but they are out of scope for this article to cover.\n\n# Bundling\n\nWebpack has some defaults which allow you to do very basic bundling without any configuration. It will try to use `src/index.js` as an *entrypoint*, and it will output the bundle(s) to `dist/`.\n\n> *Entrypoints* are files you directly link to with script tags. Webpack can bundle multiple entrypoints in a single build, and can share common dependencies between them if configured to do so. Each entrypoint will have it own output bundle file.\n\nWe can just run `npx webpack` and it will bundle our files into `dist/main.js`. While not necessary for Webpack, we'll create an `index.html` file and start a static server.\n\nAdd `dist/index.html`\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>Document</title>\n</head>\n<body>\n  Check the console! (F12 to open dev tools)\n  <script src=\"/main.js\"></script>\n</body>\n</html>\n```\n\n> You can start a basic file server with `npx live-server ./dist` or `npx http-server -c-1 ./dist`, or setup your own server to serve the files in `dist/`. (Open the browser console to view the output.)\n>\n> [live-server](https://www.npmjs.com/package/live-server) automatically reloads the page for any file changes, while [http-server](https://www.npmjs.com/package/http-server) does not. We use `-c-1` with `http-server` to disable it's aggressive caching. Both of these servers are only suitable for development and testing, and should not be used in production.\n>\n> Run the server in a separate console so you don't need to stop and restart it to run Webpack. `npx` will re-download `live-server` or `http-server` every time, so to avoid this slowdown when running it, you can install it to the project with `npm i -D <package>`, or install it globally `npm i -g <package>`. After that, `npx` will use the previously installed module.\n\n## Build modes\n\nWhen you ran `npx webpack`, it printed a warning about missing the `mode` option. Let's do it correctly by running `npx webpack --mode development`. Without a specific `mode` set, Webpack defaults to \"production\", which mostly means that it *uglifies* the output.\n\n> *Uglifying* is basically minification, and it makes the file as small as possible by removing unnecessary whitespace and replacing variable names with shorter versions where safe. It can also remove static conditions like `if (false === false) { ... }`.\n\nAfter running in development mode, take a look at `dist/main.js`. There is a lot of code in this file! Webpack does include some overhead to properly handle modules, but there is also inline sourcemaps of the code, which can be used by the browser to show you the original code files when debugging.\n\nFinally, to build in production mode without a warning, run `npx webpack --mode production`. This will output the same code as `npx webpack`, but without the warning.\n\n## Using npm scripts\n\nYou can use Webpack with `npx` like we have so far, but you can make it simpler to keep the correct build modes straight by setting up npm scripts for each mode.\n\nIn `package.json`, replace this:\n```json\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n```\nwith this:\n```json\n  \"scripts\": {\n    \"dev\": \"webpack --mode development\",\n    \"build\": \"webpack --mode production\",\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n```\n\nNow you can run `npm run dev` for development mode, and `npm run build` for production mode. This exact build command is quite suitable for real projects, but you will probably want some other features for development.\n\n# Configuration\n\nIn most cases, you will end up needing to configure some options for Webpack. A lot of options can be provided as command line arguments, but the much cleaner standard approach is to use a Webpack config file.\n\nWebpack will automatically look for a file called `webpack.config.js` in the folder it is being run in (generally the project root), or you can tell it exactly the file to use with the `--config` command line argument.\n\nCreate `webpack.config.js` with these contents:\n```js\nconst path = require('path');\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    filename: 'main.js',\n    path: path.resolve(__dirname, 'dist')\n  }\n};\n```\n\n> This is a regular Node.js module, using require() to load modules.\n\nThis configuration says to use the same entrypoint and output location and name as the Webpack defaults. You can change these options now to be whatever you want. If your project needs to use `public` as the folder for static assets, then you could change `dist` to `public`, or even use a subfolder.\n\n> There are many options for both [entry](https://webpack.js.org/configuration/entry-context/) and [output](https://webpack.js.org/configuration/output/) in the Webpack docs.\n\n# Automatically building\n\nIn most circumstances, you want to build automatically when you save a file in your project which is being bundled while developing. There are two ways to do this, and which one you want depends on how you want to serve your files in development.\n\n> In Linux, the default file system max listener count is often too low to be able to watch the files in a project. This will cause an error like `Error: ENOSPC` in the console, which appears to suggest you are out of disk space. To fix this, you need to increase the max listener count with this command: `echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p`. [More Info](https://stackoverflow.com/questions/22475849/node-js-error-enospc).\n\n## Watch mode (your own server)\n\nIf you already have a server setup and can have it serve the files in the `dist/` folder, then you can simply use Webpack's built-in watch mode.\n\nTo do this, change your `\"dev\"` script in `package.json` to:\n```json\n    \"dev\": \"webpack --mode development --watch\",\n```\n\nWhen you run this, instead of just building and exiting, Webpack continues to run, and any time you make a change and save a file that is being bundled, the bundle will get rebuilt.\n\nIf your static server doesn't automatically refresh the page when files change (such as `http-server`), you will need to refresh the page after you save your files.\n\n> You can setup [LiveReload plugin](https://www.npmjs.com/package/webpack-livereload-plugin) which can refresh the page for you when your bundle is rebuilt. You should make sure you only do this for development. [Setting up development-only Webpack config]().\n\n## Dev Server (use webpack-dev-server)\n\nIf you don't have a local file server to serve `dist/` with, you can use webpack-dev-server, which combines Webpack with a small file server that has useful development features.\n\nInstall webpack-dev-server with `npm i -D webpack-dev-server`.\n\nAdd a `devServer` property to your Webpack config as below:\n```js\nconst path = require('path');\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    filename: 'main.js',\n    path: path.resolve(__dirname, 'dist')\n  },\n  devServer: {\n    contentBase: path.join(__dirname, 'dist'),\n  },\n};\n```\n\nReplace your `\"dev\"` script in `package.json` with:\n```json\n    \"dev\": \"webpack-dev-server --mode development --open\",\n```\n\n> If you are still running a static server like `http-server` or `live-server`, you can stop that process since webpack-dev-server includes that functionality.\n\nNow when you run `npm run dev`, webpack-dev-server will start a file server with the contents of `dist/`, Webpack will run, and automatically run again any time a file that is bundled is saved. Additionally, webpack-dev-server includes some extra code which causes the browser to refresh any time the code rebuilds. With the `--open` option included, it will also open your browser to show the index.html file.\n\n> [webpack-dev-server configuration options](https://webpack.js.org/configuration/dev-server/) include a proxy option so that all requests which don't match a bundle file are sent to another server.\n\n# More Webpack config\n\nWebpack has two primary ways to extend it's functionality. It supports a rich plugin ecosystem, which can provide features such as automatically injecting the paths to bundle into a generated html file, or displaying in-depth statistics about bundles. It also supports *loaders*, which are tools that run against imported files, and can run transforms on the code, or even move the original file to the output folder and make the imported value a path to that file.\n\nThe number one use-case for loaders is to run [Babel](https://babeljs.io) transforms against your JavaScript code. Babel transforms can replace JSX code with JavaScript, remove Typescript type annotations, or most commonly: replace modern syntax with older syntax to support more browsers.\n\nIn most cases, you will want to run Babel against your code with the [\"env\" preset](https://babeljs.io/docs/en/babel-preset-env), which compiles current JavaScript to older JavaScript.\n\n## Setup Babel and babel-loader\n\nFirst, lets modify our entrypoint file to use a new syntax feature, so that we can see that it gets replaced.\n\nChange `src/index.js` to:\n```js\nimport '@babel/polyfill';\nimport foo from './foo';\n\nconst obj1 = { a: '1' };\nconst obj2 = { ...obj1, b: '1' };\nconsole.log('obj2.a === obj2.b', obj2.a === obj2.b);\n\nfoo();\n```\n\n> The `...` operator is part of ES2018, and needs to be compiled for Edge, and non-latest Safari.\n\nInstall Babel and babel-loader with `npm i -D babel-loader @babel/core @babel/preset-env `. Then install Babel Polyfill with `npm i @babel/polyfill`.\n\nWe need to add babel-loader into our Webpack config:\n```js\nconst path = require('path');\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    filename: 'main.js',\n    path: path.resolve(__dirname, 'dist')\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        use: {\n          loader: 'babel-loader',\n        },\n      },\n    ],\n  },\n};\n```\n\nThen we need to setup a Babel config in `babel.config.js`:\n```js\nmodule.exports = {\n  presets: [\n    ['@babel/preset-env', {\n      useBuiltIns: 'entry',\n      modules: false,\n      targets: [\n        'last 2 firefox versions',\n        'last 2 chrome versions',\n        'last 2 edge versions',\n        'last 2 ios versions',\n      ],\n    }]\n  ],\n};\n```\n\n> This is an optimistic set of browsers, often you will need to support IE 11 as well.\n\nNow when you build your project, any modern syntax is compiled to code that all browsers in your support list can run. This is specifically only for files in your project that are not in `node_modules` (this is what the `exclude` line in the babel-loader config does).\n\nSyntax isn't the only thing older browsers might not support though, so in addition to having Babel transform syntax, we also need to include Polyfills for newer standard library features. This is the `import '@babel/polyfill';` in `index.js`. With the `useBuiltIns: 'entry'` option in the babel env config, that single polyfill import is transformed to only import the polyfills needed for the browser support list.\n\n> Currently there is an experimental option `useBuiltIns: 'usage'` which will only include polyfills for features that you actually use. In the future this could become the best practice.\n\n# Overview\n\nWhat we have so far is a reasonable set of tools for building JavaScript browser applications.\n\nWith `npm run build` we transform a tree of source code modules from using modern JavaScript to being a single bundle file of broadly supported older JavaScript which we can include in our html.\n\n# Onward and Upward\n\nThus far, our build configuration is fairly simple, and is focused only on JavaScript and building a single application.\n\nFrom the basic configuration created here, we can expand to support a lot of helpful features:\n\n- Code splitting (Separate a tree of your application).\n- Importing stylesheets and other static assets, to be included in the output folder.\n- Transforming non-JS code into JS (such as JSX, Typescript, Flow, and JavaScript proposal features).\n- Create a map (manifest) of output files for programmatic consumption.\n- Development only configuration options.\n\nTo explore these topics and more, head to the [Getting started with Webpack landing page](https://github.com/samsch/webpack-guide/).\n","source":"_posts/2018-09-04-how-to-setup-webpack-v4.md","raw":"---\ntitle: How to Setup Webpack v4\ndate: 2018-09-04 00:00:00\ntags:\n- React\n- Webpack\n- developer experience\n- js\n---\n> These docs are written for Webpack version 4, and Babel version 7.\n\nIf you write JavaScript code you should be using a module system. For the browser, this means bundling, since built-in module support isn't yet ready to be used in production.\n\n> Bundler: A tool which compiles a module-based codebase into a single (or a few) large file to be linked from your HTML.\n\nThe industry standard tool for bundling is Webpack. In the past, Webpack had a bad rep for being difficult to configure because it's documentation was lacking, and because new users were often shown bloated examples including features they might never use. Since then, the documentation has dramatically improved. In this guide, we'll focus on what you need to get started!\n\n> The [Webpack documentation](https://webpack.js.org/concepts/) is really quite good, but it can be hard to filter to just what you need. This guide is meant to be the minimal parts you really need for development and production.\n\n# Prerequisites\n\nPrimarily, you need to have Node.js installed. This guide assumes you are using current Node v10+ and npm 6+.\n\nFor Linux and MacOS, the easiest way to install and work with Node is using nvm. Instructions for installing are on the [nvm project page](https://github.com/creationix/nvm#installation).\n\n> If using Windows, you can download an installer from the [Node.js website](https://nodejs.org/en/).\n>\n> The instructions are the same for Webpack in Windows, except you might use backslashes instead of slashes for paths on the command line. For example, `webpack src/main.js public/bundle.js` might be `webpack src\\main.js public\\bundle.js` in Windows.\n\n# Create a project\n\nFirst, create a project folder (such as `myproject`). In the project folder open a terminal and run `npm init`, and answer the questions. (You can also run `npm init -y` to skip all the questions and use defaults.)\n\n> From here on out, all command line snippets will assume you are currently in the project folder root.\n\nAdd Webpack to your development dependencies: `npm install --save-dev webpack webpack-cli`.\n\n> From here on in this guide, we'll use the shorthand `npm` commands like `npm i` (for `npm install`) and `npm i -D` (for `install --save-dev`).\n\nCreate a folder in your project called `src`.\n\nInside `src/`, add two JavaScript files:\n\n`src/index.js`:\n```js\nimport foo from './foo';\n\nconsole.log('Running in index.js!');\n\nfoo();\n```\n\n`src/foo.js`:\n```js\nimport camelCase from 'camelcase';\n\nfunction foo () {\n  console.log(camelCase('Running in foo.js!'));\n}\n\nexport default foo;\n```\n\nAnd do `npm i camelcase`.\n\n> The `camelcase` module is being used here as an example to show that you can import and bundle npm modules.\n\n> There are things missing that you should have in a \"real\" project, like linting. Feel free to add them, but they are out of scope for this article to cover.\n\n# Bundling\n\nWebpack has some defaults which allow you to do very basic bundling without any configuration. It will try to use `src/index.js` as an *entrypoint*, and it will output the bundle(s) to `dist/`.\n\n> *Entrypoints* are files you directly link to with script tags. Webpack can bundle multiple entrypoints in a single build, and can share common dependencies between them if configured to do so. Each entrypoint will have it own output bundle file.\n\nWe can just run `npx webpack` and it will bundle our files into `dist/main.js`. While not necessary for Webpack, we'll create an `index.html` file and start a static server.\n\nAdd `dist/index.html`\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>Document</title>\n</head>\n<body>\n  Check the console! (F12 to open dev tools)\n  <script src=\"/main.js\"></script>\n</body>\n</html>\n```\n\n> You can start a basic file server with `npx live-server ./dist` or `npx http-server -c-1 ./dist`, or setup your own server to serve the files in `dist/`. (Open the browser console to view the output.)\n>\n> [live-server](https://www.npmjs.com/package/live-server) automatically reloads the page for any file changes, while [http-server](https://www.npmjs.com/package/http-server) does not. We use `-c-1` with `http-server` to disable it's aggressive caching. Both of these servers are only suitable for development and testing, and should not be used in production.\n>\n> Run the server in a separate console so you don't need to stop and restart it to run Webpack. `npx` will re-download `live-server` or `http-server` every time, so to avoid this slowdown when running it, you can install it to the project with `npm i -D <package>`, or install it globally `npm i -g <package>`. After that, `npx` will use the previously installed module.\n\n## Build modes\n\nWhen you ran `npx webpack`, it printed a warning about missing the `mode` option. Let's do it correctly by running `npx webpack --mode development`. Without a specific `mode` set, Webpack defaults to \"production\", which mostly means that it *uglifies* the output.\n\n> *Uglifying* is basically minification, and it makes the file as small as possible by removing unnecessary whitespace and replacing variable names with shorter versions where safe. It can also remove static conditions like `if (false === false) { ... }`.\n\nAfter running in development mode, take a look at `dist/main.js`. There is a lot of code in this file! Webpack does include some overhead to properly handle modules, but there is also inline sourcemaps of the code, which can be used by the browser to show you the original code files when debugging.\n\nFinally, to build in production mode without a warning, run `npx webpack --mode production`. This will output the same code as `npx webpack`, but without the warning.\n\n## Using npm scripts\n\nYou can use Webpack with `npx` like we have so far, but you can make it simpler to keep the correct build modes straight by setting up npm scripts for each mode.\n\nIn `package.json`, replace this:\n```json\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n```\nwith this:\n```json\n  \"scripts\": {\n    \"dev\": \"webpack --mode development\",\n    \"build\": \"webpack --mode production\",\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n```\n\nNow you can run `npm run dev` for development mode, and `npm run build` for production mode. This exact build command is quite suitable for real projects, but you will probably want some other features for development.\n\n# Configuration\n\nIn most cases, you will end up needing to configure some options for Webpack. A lot of options can be provided as command line arguments, but the much cleaner standard approach is to use a Webpack config file.\n\nWebpack will automatically look for a file called `webpack.config.js` in the folder it is being run in (generally the project root), or you can tell it exactly the file to use with the `--config` command line argument.\n\nCreate `webpack.config.js` with these contents:\n```js\nconst path = require('path');\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    filename: 'main.js',\n    path: path.resolve(__dirname, 'dist')\n  }\n};\n```\n\n> This is a regular Node.js module, using require() to load modules.\n\nThis configuration says to use the same entrypoint and output location and name as the Webpack defaults. You can change these options now to be whatever you want. If your project needs to use `public` as the folder for static assets, then you could change `dist` to `public`, or even use a subfolder.\n\n> There are many options for both [entry](https://webpack.js.org/configuration/entry-context/) and [output](https://webpack.js.org/configuration/output/) in the Webpack docs.\n\n# Automatically building\n\nIn most circumstances, you want to build automatically when you save a file in your project which is being bundled while developing. There are two ways to do this, and which one you want depends on how you want to serve your files in development.\n\n> In Linux, the default file system max listener count is often too low to be able to watch the files in a project. This will cause an error like `Error: ENOSPC` in the console, which appears to suggest you are out of disk space. To fix this, you need to increase the max listener count with this command: `echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p`. [More Info](https://stackoverflow.com/questions/22475849/node-js-error-enospc).\n\n## Watch mode (your own server)\n\nIf you already have a server setup and can have it serve the files in the `dist/` folder, then you can simply use Webpack's built-in watch mode.\n\nTo do this, change your `\"dev\"` script in `package.json` to:\n```json\n    \"dev\": \"webpack --mode development --watch\",\n```\n\nWhen you run this, instead of just building and exiting, Webpack continues to run, and any time you make a change and save a file that is being bundled, the bundle will get rebuilt.\n\nIf your static server doesn't automatically refresh the page when files change (such as `http-server`), you will need to refresh the page after you save your files.\n\n> You can setup [LiveReload plugin](https://www.npmjs.com/package/webpack-livereload-plugin) which can refresh the page for you when your bundle is rebuilt. You should make sure you only do this for development. [Setting up development-only Webpack config]().\n\n## Dev Server (use webpack-dev-server)\n\nIf you don't have a local file server to serve `dist/` with, you can use webpack-dev-server, which combines Webpack with a small file server that has useful development features.\n\nInstall webpack-dev-server with `npm i -D webpack-dev-server`.\n\nAdd a `devServer` property to your Webpack config as below:\n```js\nconst path = require('path');\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    filename: 'main.js',\n    path: path.resolve(__dirname, 'dist')\n  },\n  devServer: {\n    contentBase: path.join(__dirname, 'dist'),\n  },\n};\n```\n\nReplace your `\"dev\"` script in `package.json` with:\n```json\n    \"dev\": \"webpack-dev-server --mode development --open\",\n```\n\n> If you are still running a static server like `http-server` or `live-server`, you can stop that process since webpack-dev-server includes that functionality.\n\nNow when you run `npm run dev`, webpack-dev-server will start a file server with the contents of `dist/`, Webpack will run, and automatically run again any time a file that is bundled is saved. Additionally, webpack-dev-server includes some extra code which causes the browser to refresh any time the code rebuilds. With the `--open` option included, it will also open your browser to show the index.html file.\n\n> [webpack-dev-server configuration options](https://webpack.js.org/configuration/dev-server/) include a proxy option so that all requests which don't match a bundle file are sent to another server.\n\n# More Webpack config\n\nWebpack has two primary ways to extend it's functionality. It supports a rich plugin ecosystem, which can provide features such as automatically injecting the paths to bundle into a generated html file, or displaying in-depth statistics about bundles. It also supports *loaders*, which are tools that run against imported files, and can run transforms on the code, or even move the original file to the output folder and make the imported value a path to that file.\n\nThe number one use-case for loaders is to run [Babel](https://babeljs.io) transforms against your JavaScript code. Babel transforms can replace JSX code with JavaScript, remove Typescript type annotations, or most commonly: replace modern syntax with older syntax to support more browsers.\n\nIn most cases, you will want to run Babel against your code with the [\"env\" preset](https://babeljs.io/docs/en/babel-preset-env), which compiles current JavaScript to older JavaScript.\n\n## Setup Babel and babel-loader\n\nFirst, lets modify our entrypoint file to use a new syntax feature, so that we can see that it gets replaced.\n\nChange `src/index.js` to:\n```js\nimport '@babel/polyfill';\nimport foo from './foo';\n\nconst obj1 = { a: '1' };\nconst obj2 = { ...obj1, b: '1' };\nconsole.log('obj2.a === obj2.b', obj2.a === obj2.b);\n\nfoo();\n```\n\n> The `...` operator is part of ES2018, and needs to be compiled for Edge, and non-latest Safari.\n\nInstall Babel and babel-loader with `npm i -D babel-loader @babel/core @babel/preset-env `. Then install Babel Polyfill with `npm i @babel/polyfill`.\n\nWe need to add babel-loader into our Webpack config:\n```js\nconst path = require('path');\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    filename: 'main.js',\n    path: path.resolve(__dirname, 'dist')\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        use: {\n          loader: 'babel-loader',\n        },\n      },\n    ],\n  },\n};\n```\n\nThen we need to setup a Babel config in `babel.config.js`:\n```js\nmodule.exports = {\n  presets: [\n    ['@babel/preset-env', {\n      useBuiltIns: 'entry',\n      modules: false,\n      targets: [\n        'last 2 firefox versions',\n        'last 2 chrome versions',\n        'last 2 edge versions',\n        'last 2 ios versions',\n      ],\n    }]\n  ],\n};\n```\n\n> This is an optimistic set of browsers, often you will need to support IE 11 as well.\n\nNow when you build your project, any modern syntax is compiled to code that all browsers in your support list can run. This is specifically only for files in your project that are not in `node_modules` (this is what the `exclude` line in the babel-loader config does).\n\nSyntax isn't the only thing older browsers might not support though, so in addition to having Babel transform syntax, we also need to include Polyfills for newer standard library features. This is the `import '@babel/polyfill';` in `index.js`. With the `useBuiltIns: 'entry'` option in the babel env config, that single polyfill import is transformed to only import the polyfills needed for the browser support list.\n\n> Currently there is an experimental option `useBuiltIns: 'usage'` which will only include polyfills for features that you actually use. In the future this could become the best practice.\n\n# Overview\n\nWhat we have so far is a reasonable set of tools for building JavaScript browser applications.\n\nWith `npm run build` we transform a tree of source code modules from using modern JavaScript to being a single bundle file of broadly supported older JavaScript which we can include in our html.\n\n# Onward and Upward\n\nThus far, our build configuration is fairly simple, and is focused only on JavaScript and building a single application.\n\nFrom the basic configuration created here, we can expand to support a lot of helpful features:\n\n- Code splitting (Separate a tree of your application).\n- Importing stylesheets and other static assets, to be included in the output folder.\n- Transforming non-JS code into JS (such as JSX, Typescript, Flow, and JavaScript proposal features).\n- Create a map (manifest) of output files for programmatic consumption.\n- Development only configuration options.\n\nTo explore these topics and more, head to the [Getting started with Webpack landing page](https://github.com/samsch/webpack-guide/).\n","slug":"how-to-setup-webpack-v4","published":1,"updated":"2018-09-04T19:57:10.271Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckixl4zw2000ijku35o0ppouc","content":"<blockquote>\n<p>These docs are written for Webpack version 4, and Babel version 7.</p>\n</blockquote>\n<p>If you write JavaScript code you should be using a module system. For the browser, this means bundling, since built-in module support isn’t yet ready to be used in production.</p>\n<blockquote>\n<p>Bundler: A tool which compiles a module-based codebase into a single (or a few) large file to be linked from your HTML.</p>\n</blockquote>\n<p>The industry standard tool for bundling is Webpack. In the past, Webpack had a bad rep for being difficult to configure because it’s documentation was lacking, and because new users were often shown bloated examples including features they might never use. Since then, the documentation has dramatically improved. In this guide, we’ll focus on what you need to get started!</p>\n<blockquote>\n<p>The <a href=\"https://webpack.js.org/concepts/\" target=\"_blank\" rel=\"external\">Webpack documentation</a> is really quite good, but it can be hard to filter to just what you need. This guide is meant to be the minimal parts you really need for development and production.</p>\n</blockquote>\n<h1 id=\"Prerequisites\"><a href=\"#Prerequisites\" class=\"headerlink\" title=\"Prerequisites\"></a>Prerequisites</h1><p>Primarily, you need to have Node.js installed. This guide assumes you are using current Node v10+ and npm 6+.</p>\n<p>For Linux and MacOS, the easiest way to install and work with Node is using nvm. Instructions for installing are on the <a href=\"https://github.com/creationix/nvm#installation\" target=\"_blank\" rel=\"external\">nvm project page</a>.</p>\n<blockquote>\n<p>If using Windows, you can download an installer from the <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external\">Node.js website</a>.</p>\n<p>The instructions are the same for Webpack in Windows, except you might use backslashes instead of slashes for paths on the command line. For example, <code>webpack src/main.js public/bundle.js</code> might be <code>webpack src\\main.js public\\bundle.js</code> in Windows.</p>\n</blockquote>\n<h1 id=\"Create-a-project\"><a href=\"#Create-a-project\" class=\"headerlink\" title=\"Create a project\"></a>Create a project</h1><p>First, create a project folder (such as <code>myproject</code>). In the project folder open a terminal and run <code>npm init</code>, and answer the questions. (You can also run <code>npm init -y</code> to skip all the questions and use defaults.)</p>\n<blockquote>\n<p>From here on out, all command line snippets will assume you are currently in the project folder root.</p>\n</blockquote>\n<p>Add Webpack to your development dependencies: <code>npm install --save-dev webpack webpack-cli</code>.</p>\n<blockquote>\n<p>From here on in this guide, we’ll use the shorthand <code>npm</code> commands like <code>npm i</code> (for <code>npm install</code>) and <code>npm i -D</code> (for <code>install --save-dev</code>).</p>\n</blockquote>\n<p>Create a folder in your project called <code>src</code>.</p>\n<p>Inside <code>src/</code>, add two JavaScript files:</p>\n<p><code>src/index.js</code>:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> foo <span class=\"keyword\">from</span> <span class=\"string\">'./foo'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'Running in index.js!'</span>);</div><div class=\"line\"></div><div class=\"line\">foo();</div></pre></td></tr></table></figure></p>\n<p><code>src/foo.js</code>:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> camelCase <span class=\"keyword\">from</span> <span class=\"string\">'camelcase'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(camelCase(<span class=\"string\">'Running in foo.js!'</span>));</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> foo;</div></pre></td></tr></table></figure></p>\n<p>And do <code>npm i camelcase</code>.</p>\n<blockquote>\n<p>The <code>camelcase</code> module is being used here as an example to show that you can import and bundle npm modules.</p>\n<p>There are things missing that you should have in a “real” project, like linting. Feel free to add them, but they are out of scope for this article to cover.</p>\n</blockquote>\n<h1 id=\"Bundling\"><a href=\"#Bundling\" class=\"headerlink\" title=\"Bundling\"></a>Bundling</h1><p>Webpack has some defaults which allow you to do very basic bundling without any configuration. It will try to use <code>src/index.js</code> as an <em>entrypoint</em>, and it will output the bundle(s) to <code>dist/</code>.</p>\n<blockquote>\n<p><em>Entrypoints</em> are files you directly link to with script tags. Webpack can bundle multiple entrypoints in a single build, and can share common dependencies between them if configured to do so. Each entrypoint will have it own output bundle file.</p>\n</blockquote>\n<p>We can just run <code>npx webpack</code> and it will bundle our files into <code>dist/main.js</code>. While not necessary for Webpack, we’ll create an <code>index.html</code> file and start a static server.</p>\n<p>Add <code>dist/index.html</code><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  Check the console! (F12 to open dev tools)</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/main.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>You can start a basic file server with <code>npx live-server ./dist</code> or <code>npx http-server -c-1 ./dist</code>, or setup your own server to serve the files in <code>dist/</code>. (Open the browser console to view the output.)</p>\n<p><a href=\"https://www.npmjs.com/package/live-server\" target=\"_blank\" rel=\"external\">live-server</a> automatically reloads the page for any file changes, while <a href=\"https://www.npmjs.com/package/http-server\" target=\"_blank\" rel=\"external\">http-server</a> does not. We use <code>-c-1</code> with <code>http-server</code> to disable it’s aggressive caching. Both of these servers are only suitable for development and testing, and should not be used in production.</p>\n<p>Run the server in a separate console so you don’t need to stop and restart it to run Webpack. <code>npx</code> will re-download <code>live-server</code> or <code>http-server</code> every time, so to avoid this slowdown when running it, you can install it to the project with <code>npm i -D &lt;package&gt;</code>, or install it globally <code>npm i -g &lt;package&gt;</code>. After that, <code>npx</code> will use the previously installed module.</p>\n</blockquote>\n<h2 id=\"Build-modes\"><a href=\"#Build-modes\" class=\"headerlink\" title=\"Build modes\"></a>Build modes</h2><p>When you ran <code>npx webpack</code>, it printed a warning about missing the <code>mode</code> option. Let’s do it correctly by running <code>npx webpack --mode development</code>. Without a specific <code>mode</code> set, Webpack defaults to “production”, which mostly means that it <em>uglifies</em> the output.</p>\n<blockquote>\n<p><em>Uglifying</em> is basically minification, and it makes the file as small as possible by removing unnecessary whitespace and replacing variable names with shorter versions where safe. It can also remove static conditions like <code>if (false === false) { ... }</code>.</p>\n</blockquote>\n<p>After running in development mode, take a look at <code>dist/main.js</code>. There is a lot of code in this file! Webpack does include some overhead to properly handle modules, but there is also inline sourcemaps of the code, which can be used by the browser to show you the original code files when debugging.</p>\n<p>Finally, to build in production mode without a warning, run <code>npx webpack --mode production</code>. This will output the same code as <code>npx webpack</code>, but without the warning.</p>\n<h2 id=\"Using-npm-scripts\"><a href=\"#Using-npm-scripts\" class=\"headerlink\" title=\"Using npm scripts\"></a>Using npm scripts</h2><p>You can use Webpack with <code>npx</code> like we have so far, but you can make it simpler to keep the correct build modes straight by setting up npm scripts for each mode.</p>\n<p>In <code>package.json</code>, replace this:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">\"scripts\": &#123;</div><div class=\"line\">  \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure></p>\n<p>with this:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">\"scripts\": &#123;</div><div class=\"line\">  \"dev\": \"webpack --mode development\",</div><div class=\"line\">  \"build\": \"webpack --mode production\",</div><div class=\"line\">  \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure></p>\n<p>Now you can run <code>npm run dev</code> for development mode, and <code>npm run build</code> for production mode. This exact build command is quite suitable for real projects, but you will probably want some other features for development.</p>\n<h1 id=\"Configuration\"><a href=\"#Configuration\" class=\"headerlink\" title=\"Configuration\"></a>Configuration</h1><p>In most cases, you will end up needing to configure some options for Webpack. A lot of options can be provided as command line arguments, but the much cleaner standard approach is to use a Webpack config file.</p>\n<p>Webpack will automatically look for a file called <code>webpack.config.js</code> in the folder it is being run in (generally the project root), or you can tell it exactly the file to use with the <code>--config</code> command line argument.</p>\n<p>Create <code>webpack.config.js</code> with these contents:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  entry: <span class=\"string\">'./src/index.js'</span>,</div><div class=\"line\">  output: &#123;</div><div class=\"line\">    filename: <span class=\"string\">'main.js'</span>,</div><div class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>This is a regular Node.js module, using require() to load modules.</p>\n</blockquote>\n<p>This configuration says to use the same entrypoint and output location and name as the Webpack defaults. You can change these options now to be whatever you want. If your project needs to use <code>public</code> as the folder for static assets, then you could change <code>dist</code> to <code>public</code>, or even use a subfolder.</p>\n<blockquote>\n<p>There are many options for both <a href=\"https://webpack.js.org/configuration/entry-context/\" target=\"_blank\" rel=\"external\">entry</a> and <a href=\"https://webpack.js.org/configuration/output/\" target=\"_blank\" rel=\"external\">output</a> in the Webpack docs.</p>\n</blockquote>\n<h1 id=\"Automatically-building\"><a href=\"#Automatically-building\" class=\"headerlink\" title=\"Automatically building\"></a>Automatically building</h1><p>In most circumstances, you want to build automatically when you save a file in your project which is being bundled while developing. There are two ways to do this, and which one you want depends on how you want to serve your files in development.</p>\n<blockquote>\n<p>In Linux, the default file system max listener count is often too low to be able to watch the files in a project. This will cause an error like <code>Error: ENOSPC</code> in the console, which appears to suggest you are out of disk space. To fix this, you need to increase the max listener count with this command: <code>echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf &amp;&amp; sudo sysctl -p</code>. <a href=\"https://stackoverflow.com/questions/22475849/node-js-error-enospc\" target=\"_blank\" rel=\"external\">More Info</a>.</p>\n</blockquote>\n<h2 id=\"Watch-mode-your-own-server\"><a href=\"#Watch-mode-your-own-server\" class=\"headerlink\" title=\"Watch mode (your own server)\"></a>Watch mode (your own server)</h2><p>If you already have a server setup and can have it serve the files in the <code>dist/</code> folder, then you can simply use Webpack’s built-in watch mode.</p>\n<p>To do this, change your <code>&quot;dev&quot;</code> script in <code>package.json</code> to:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">\"dev\": \"webpack --mode development --watch\",</div></pre></td></tr></table></figure></p>\n<p>When you run this, instead of just building and exiting, Webpack continues to run, and any time you make a change and save a file that is being bundled, the bundle will get rebuilt.</p>\n<p>If your static server doesn’t automatically refresh the page when files change (such as <code>http-server</code>), you will need to refresh the page after you save your files.</p>\n<blockquote>\n<p>You can setup <a href=\"https://www.npmjs.com/package/webpack-livereload-plugin\" target=\"_blank\" rel=\"external\">LiveReload plugin</a> which can refresh the page for you when your bundle is rebuilt. You should make sure you only do this for development. <a href=\"\">Setting up development-only Webpack config</a>.</p>\n</blockquote>\n<h2 id=\"Dev-Server-use-webpack-dev-server\"><a href=\"#Dev-Server-use-webpack-dev-server\" class=\"headerlink\" title=\"Dev Server (use webpack-dev-server)\"></a>Dev Server (use webpack-dev-server)</h2><p>If you don’t have a local file server to serve <code>dist/</code> with, you can use webpack-dev-server, which combines Webpack with a small file server that has useful development features.</p>\n<p>Install webpack-dev-server with <code>npm i -D webpack-dev-server</code>.</p>\n<p>Add a <code>devServer</code> property to your Webpack config as below:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  entry: <span class=\"string\">'./src/index.js'</span>,</div><div class=\"line\">  output: &#123;</div><div class=\"line\">    filename: <span class=\"string\">'main.js'</span>,</div><div class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  devServer: &#123;</div><div class=\"line\">    contentBase: path.join(__dirname, <span class=\"string\">'dist'</span>),</div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>Replace your <code>&quot;dev&quot;</code> script in <code>package.json</code> with:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">\"dev\": \"webpack-dev-server --mode development --open\",</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>If you are still running a static server like <code>http-server</code> or <code>live-server</code>, you can stop that process since webpack-dev-server includes that functionality.</p>\n</blockquote>\n<p>Now when you run <code>npm run dev</code>, webpack-dev-server will start a file server with the contents of <code>dist/</code>, Webpack will run, and automatically run again any time a file that is bundled is saved. Additionally, webpack-dev-server includes some extra code which causes the browser to refresh any time the code rebuilds. With the <code>--open</code> option included, it will also open your browser to show the index.html file.</p>\n<blockquote>\n<p><a href=\"https://webpack.js.org/configuration/dev-server/\" target=\"_blank\" rel=\"external\">webpack-dev-server configuration options</a> include a proxy option so that all requests which don’t match a bundle file are sent to another server.</p>\n</blockquote>\n<h1 id=\"More-Webpack-config\"><a href=\"#More-Webpack-config\" class=\"headerlink\" title=\"More Webpack config\"></a>More Webpack config</h1><p>Webpack has two primary ways to extend it’s functionality. It supports a rich plugin ecosystem, which can provide features such as automatically injecting the paths to bundle into a generated html file, or displaying in-depth statistics about bundles. It also supports <em>loaders</em>, which are tools that run against imported files, and can run transforms on the code, or even move the original file to the output folder and make the imported value a path to that file.</p>\n<p>The number one use-case for loaders is to run <a href=\"https://babeljs.io\" target=\"_blank\" rel=\"external\">Babel</a> transforms against your JavaScript code. Babel transforms can replace JSX code with JavaScript, remove Typescript type annotations, or most commonly: replace modern syntax with older syntax to support more browsers.</p>\n<p>In most cases, you will want to run Babel against your code with the <a href=\"https://babeljs.io/docs/en/babel-preset-env\" target=\"_blank\" rel=\"external\">“env” preset</a>, which compiles current JavaScript to older JavaScript.</p>\n<h2 id=\"Setup-Babel-and-babel-loader\"><a href=\"#Setup-Babel-and-babel-loader\" class=\"headerlink\" title=\"Setup Babel and babel-loader\"></a>Setup Babel and babel-loader</h2><p>First, lets modify our entrypoint file to use a new syntax feature, so that we can see that it gets replaced.</p>\n<p>Change <code>src/index.js</code> to:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'@babel/polyfill'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> foo <span class=\"keyword\">from</span> <span class=\"string\">'./foo'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> obj1 = &#123; <span class=\"attr\">a</span>: <span class=\"string\">'1'</span> &#125;;</div><div class=\"line\"><span class=\"keyword\">const</span> obj2 = &#123; ...obj1, <span class=\"attr\">b</span>: <span class=\"string\">'1'</span> &#125;;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'obj2.a === obj2.b'</span>, obj2.a === obj2.b);</div><div class=\"line\"></div><div class=\"line\">foo();</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>The <code>...</code> operator is part of ES2018, and needs to be compiled for Edge, and non-latest Safari.</p>\n</blockquote>\n<p>Install Babel and babel-loader with <code>npm i -D babel-loader @babel/core @babel/preset-env</code>. Then install Babel Polyfill with <code>npm i @babel/polyfill</code>.</p>\n<p>We need to add babel-loader into our Webpack config:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  entry: <span class=\"string\">'./src/index.js'</span>,</div><div class=\"line\">  output: &#123;</div><div class=\"line\">    filename: <span class=\"string\">'main.js'</span>,</div><div class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"built_in\">module</span>: &#123;</div><div class=\"line\">    rules: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: <span class=\"regexp\">/\\.js$/</span>,</div><div class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span>,</div><div class=\"line\">        use: &#123;</div><div class=\"line\">          loader: <span class=\"string\">'babel-loader'</span>,</div><div class=\"line\">        &#125;,</div><div class=\"line\">      &#125;,</div><div class=\"line\">    ],</div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>Then we need to setup a Babel config in <code>babel.config.js</code>:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  presets: [</div><div class=\"line\">    [<span class=\"string\">'@babel/preset-env'</span>, &#123;</div><div class=\"line\">      useBuiltIns: <span class=\"string\">'entry'</span>,</div><div class=\"line\">      modules: <span class=\"literal\">false</span>,</div><div class=\"line\">      targets: [</div><div class=\"line\">        <span class=\"string\">'last 2 firefox versions'</span>,</div><div class=\"line\">        <span class=\"string\">'last 2 chrome versions'</span>,</div><div class=\"line\">        <span class=\"string\">'last 2 edge versions'</span>,</div><div class=\"line\">        <span class=\"string\">'last 2 ios versions'</span>,</div><div class=\"line\">      ],</div><div class=\"line\">    &#125;]</div><div class=\"line\">  ],</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>This is an optimistic set of browsers, often you will need to support IE 11 as well.</p>\n</blockquote>\n<p>Now when you build your project, any modern syntax is compiled to code that all browsers in your support list can run. This is specifically only for files in your project that are not in <code>node_modules</code> (this is what the <code>exclude</code> line in the babel-loader config does).</p>\n<p>Syntax isn’t the only thing older browsers might not support though, so in addition to having Babel transform syntax, we also need to include Polyfills for newer standard library features. This is the <code>import &#39;@babel/polyfill&#39;;</code> in <code>index.js</code>. With the <code>useBuiltIns: &#39;entry&#39;</code> option in the babel env config, that single polyfill import is transformed to only import the polyfills needed for the browser support list.</p>\n<blockquote>\n<p>Currently there is an experimental option <code>useBuiltIns: &#39;usage&#39;</code> which will only include polyfills for features that you actually use. In the future this could become the best practice.</p>\n</blockquote>\n<h1 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h1><p>What we have so far is a reasonable set of tools for building JavaScript browser applications.</p>\n<p>With <code>npm run build</code> we transform a tree of source code modules from using modern JavaScript to being a single bundle file of broadly supported older JavaScript which we can include in our html.</p>\n<h1 id=\"Onward-and-Upward\"><a href=\"#Onward-and-Upward\" class=\"headerlink\" title=\"Onward and Upward\"></a>Onward and Upward</h1><p>Thus far, our build configuration is fairly simple, and is focused only on JavaScript and building a single application.</p>\n<p>From the basic configuration created here, we can expand to support a lot of helpful features:</p>\n<ul>\n<li>Code splitting (Separate a tree of your application).</li>\n<li>Importing stylesheets and other static assets, to be included in the output folder.</li>\n<li>Transforming non-JS code into JS (such as JSX, Typescript, Flow, and JavaScript proposal features).</li>\n<li>Create a map (manifest) of output files for programmatic consumption.</li>\n<li>Development only configuration options.</li>\n</ul>\n<p>To explore these topics and more, head to the <a href=\"https://github.com/samsch/webpack-guide/\" target=\"_blank\" rel=\"external\">Getting started with Webpack landing page</a>.</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>These docs are written for Webpack version 4, and Babel version 7.</p>\n</blockquote>\n<p>If you write JavaScript code you should be using a module system. For the browser, this means bundling, since built-in module support isn’t yet ready to be used in production.</p>\n<blockquote>\n<p>Bundler: A tool which compiles a module-based codebase into a single (or a few) large file to be linked from your HTML.</p>\n</blockquote>\n<p>The industry standard tool for bundling is Webpack. In the past, Webpack had a bad rep for being difficult to configure because it’s documentation was lacking, and because new users were often shown bloated examples including features they might never use. Since then, the documentation has dramatically improved. In this guide, we’ll focus on what you need to get started!</p>\n<blockquote>\n<p>The <a href=\"https://webpack.js.org/concepts/\" target=\"_blank\" rel=\"external\">Webpack documentation</a> is really quite good, but it can be hard to filter to just what you need. This guide is meant to be the minimal parts you really need for development and production.</p>\n</blockquote>\n<h1 id=\"Prerequisites\"><a href=\"#Prerequisites\" class=\"headerlink\" title=\"Prerequisites\"></a>Prerequisites</h1><p>Primarily, you need to have Node.js installed. This guide assumes you are using current Node v10+ and npm 6+.</p>\n<p>For Linux and MacOS, the easiest way to install and work with Node is using nvm. Instructions for installing are on the <a href=\"https://github.com/creationix/nvm#installation\" target=\"_blank\" rel=\"external\">nvm project page</a>.</p>\n<blockquote>\n<p>If using Windows, you can download an installer from the <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external\">Node.js website</a>.</p>\n<p>The instructions are the same for Webpack in Windows, except you might use backslashes instead of slashes for paths on the command line. For example, <code>webpack src/main.js public/bundle.js</code> might be <code>webpack src\\main.js public\\bundle.js</code> in Windows.</p>\n</blockquote>\n<h1 id=\"Create-a-project\"><a href=\"#Create-a-project\" class=\"headerlink\" title=\"Create a project\"></a>Create a project</h1><p>First, create a project folder (such as <code>myproject</code>). In the project folder open a terminal and run <code>npm init</code>, and answer the questions. (You can also run <code>npm init -y</code> to skip all the questions and use defaults.)</p>\n<blockquote>\n<p>From here on out, all command line snippets will assume you are currently in the project folder root.</p>\n</blockquote>\n<p>Add Webpack to your development dependencies: <code>npm install --save-dev webpack webpack-cli</code>.</p>\n<blockquote>\n<p>From here on in this guide, we’ll use the shorthand <code>npm</code> commands like <code>npm i</code> (for <code>npm install</code>) and <code>npm i -D</code> (for <code>install --save-dev</code>).</p>\n</blockquote>\n<p>Create a folder in your project called <code>src</code>.</p>\n<p>Inside <code>src/</code>, add two JavaScript files:</p>\n<p><code>src/index.js</code>:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> foo <span class=\"keyword\">from</span> <span class=\"string\">'./foo'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'Running in index.js!'</span>);</div><div class=\"line\"></div><div class=\"line\">foo();</div></pre></td></tr></table></figure></p>\n<p><code>src/foo.js</code>:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> camelCase <span class=\"keyword\">from</span> <span class=\"string\">'camelcase'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(camelCase(<span class=\"string\">'Running in foo.js!'</span>));</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> foo;</div></pre></td></tr></table></figure></p>\n<p>And do <code>npm i camelcase</code>.</p>\n<blockquote>\n<p>The <code>camelcase</code> module is being used here as an example to show that you can import and bundle npm modules.</p>\n<p>There are things missing that you should have in a “real” project, like linting. Feel free to add them, but they are out of scope for this article to cover.</p>\n</blockquote>\n<h1 id=\"Bundling\"><a href=\"#Bundling\" class=\"headerlink\" title=\"Bundling\"></a>Bundling</h1><p>Webpack has some defaults which allow you to do very basic bundling without any configuration. It will try to use <code>src/index.js</code> as an <em>entrypoint</em>, and it will output the bundle(s) to <code>dist/</code>.</p>\n<blockquote>\n<p><em>Entrypoints</em> are files you directly link to with script tags. Webpack can bundle multiple entrypoints in a single build, and can share common dependencies between them if configured to do so. Each entrypoint will have it own output bundle file.</p>\n</blockquote>\n<p>We can just run <code>npx webpack</code> and it will bundle our files into <code>dist/main.js</code>. While not necessary for Webpack, we’ll create an <code>index.html</code> file and start a static server.</p>\n<p>Add <code>dist/index.html</code><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  Check the console! (F12 to open dev tools)</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/main.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>You can start a basic file server with <code>npx live-server ./dist</code> or <code>npx http-server -c-1 ./dist</code>, or setup your own server to serve the files in <code>dist/</code>. (Open the browser console to view the output.)</p>\n<p><a href=\"https://www.npmjs.com/package/live-server\" target=\"_blank\" rel=\"external\">live-server</a> automatically reloads the page for any file changes, while <a href=\"https://www.npmjs.com/package/http-server\" target=\"_blank\" rel=\"external\">http-server</a> does not. We use <code>-c-1</code> with <code>http-server</code> to disable it’s aggressive caching. Both of these servers are only suitable for development and testing, and should not be used in production.</p>\n<p>Run the server in a separate console so you don’t need to stop and restart it to run Webpack. <code>npx</code> will re-download <code>live-server</code> or <code>http-server</code> every time, so to avoid this slowdown when running it, you can install it to the project with <code>npm i -D &lt;package&gt;</code>, or install it globally <code>npm i -g &lt;package&gt;</code>. After that, <code>npx</code> will use the previously installed module.</p>\n</blockquote>\n<h2 id=\"Build-modes\"><a href=\"#Build-modes\" class=\"headerlink\" title=\"Build modes\"></a>Build modes</h2><p>When you ran <code>npx webpack</code>, it printed a warning about missing the <code>mode</code> option. Let’s do it correctly by running <code>npx webpack --mode development</code>. Without a specific <code>mode</code> set, Webpack defaults to “production”, which mostly means that it <em>uglifies</em> the output.</p>\n<blockquote>\n<p><em>Uglifying</em> is basically minification, and it makes the file as small as possible by removing unnecessary whitespace and replacing variable names with shorter versions where safe. It can also remove static conditions like <code>if (false === false) { ... }</code>.</p>\n</blockquote>\n<p>After running in development mode, take a look at <code>dist/main.js</code>. There is a lot of code in this file! Webpack does include some overhead to properly handle modules, but there is also inline sourcemaps of the code, which can be used by the browser to show you the original code files when debugging.</p>\n<p>Finally, to build in production mode without a warning, run <code>npx webpack --mode production</code>. This will output the same code as <code>npx webpack</code>, but without the warning.</p>\n<h2 id=\"Using-npm-scripts\"><a href=\"#Using-npm-scripts\" class=\"headerlink\" title=\"Using npm scripts\"></a>Using npm scripts</h2><p>You can use Webpack with <code>npx</code> like we have so far, but you can make it simpler to keep the correct build modes straight by setting up npm scripts for each mode.</p>\n<p>In <code>package.json</code>, replace this:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">\"scripts\": &#123;</div><div class=\"line\">  \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure></p>\n<p>with this:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">\"scripts\": &#123;</div><div class=\"line\">  \"dev\": \"webpack --mode development\",</div><div class=\"line\">  \"build\": \"webpack --mode production\",</div><div class=\"line\">  \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure></p>\n<p>Now you can run <code>npm run dev</code> for development mode, and <code>npm run build</code> for production mode. This exact build command is quite suitable for real projects, but you will probably want some other features for development.</p>\n<h1 id=\"Configuration\"><a href=\"#Configuration\" class=\"headerlink\" title=\"Configuration\"></a>Configuration</h1><p>In most cases, you will end up needing to configure some options for Webpack. A lot of options can be provided as command line arguments, but the much cleaner standard approach is to use a Webpack config file.</p>\n<p>Webpack will automatically look for a file called <code>webpack.config.js</code> in the folder it is being run in (generally the project root), or you can tell it exactly the file to use with the <code>--config</code> command line argument.</p>\n<p>Create <code>webpack.config.js</code> with these contents:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  entry: <span class=\"string\">'./src/index.js'</span>,</div><div class=\"line\">  output: &#123;</div><div class=\"line\">    filename: <span class=\"string\">'main.js'</span>,</div><div class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>This is a regular Node.js module, using require() to load modules.</p>\n</blockquote>\n<p>This configuration says to use the same entrypoint and output location and name as the Webpack defaults. You can change these options now to be whatever you want. If your project needs to use <code>public</code> as the folder for static assets, then you could change <code>dist</code> to <code>public</code>, or even use a subfolder.</p>\n<blockquote>\n<p>There are many options for both <a href=\"https://webpack.js.org/configuration/entry-context/\" target=\"_blank\" rel=\"external\">entry</a> and <a href=\"https://webpack.js.org/configuration/output/\" target=\"_blank\" rel=\"external\">output</a> in the Webpack docs.</p>\n</blockquote>\n<h1 id=\"Automatically-building\"><a href=\"#Automatically-building\" class=\"headerlink\" title=\"Automatically building\"></a>Automatically building</h1><p>In most circumstances, you want to build automatically when you save a file in your project which is being bundled while developing. There are two ways to do this, and which one you want depends on how you want to serve your files in development.</p>\n<blockquote>\n<p>In Linux, the default file system max listener count is often too low to be able to watch the files in a project. This will cause an error like <code>Error: ENOSPC</code> in the console, which appears to suggest you are out of disk space. To fix this, you need to increase the max listener count with this command: <code>echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf &amp;&amp; sudo sysctl -p</code>. <a href=\"https://stackoverflow.com/questions/22475849/node-js-error-enospc\" target=\"_blank\" rel=\"external\">More Info</a>.</p>\n</blockquote>\n<h2 id=\"Watch-mode-your-own-server\"><a href=\"#Watch-mode-your-own-server\" class=\"headerlink\" title=\"Watch mode (your own server)\"></a>Watch mode (your own server)</h2><p>If you already have a server setup and can have it serve the files in the <code>dist/</code> folder, then you can simply use Webpack’s built-in watch mode.</p>\n<p>To do this, change your <code>&quot;dev&quot;</code> script in <code>package.json</code> to:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">\"dev\": \"webpack --mode development --watch\",</div></pre></td></tr></table></figure></p>\n<p>When you run this, instead of just building and exiting, Webpack continues to run, and any time you make a change and save a file that is being bundled, the bundle will get rebuilt.</p>\n<p>If your static server doesn’t automatically refresh the page when files change (such as <code>http-server</code>), you will need to refresh the page after you save your files.</p>\n<blockquote>\n<p>You can setup <a href=\"https://www.npmjs.com/package/webpack-livereload-plugin\" target=\"_blank\" rel=\"external\">LiveReload plugin</a> which can refresh the page for you when your bundle is rebuilt. You should make sure you only do this for development. <a href=\"\">Setting up development-only Webpack config</a>.</p>\n</blockquote>\n<h2 id=\"Dev-Server-use-webpack-dev-server\"><a href=\"#Dev-Server-use-webpack-dev-server\" class=\"headerlink\" title=\"Dev Server (use webpack-dev-server)\"></a>Dev Server (use webpack-dev-server)</h2><p>If you don’t have a local file server to serve <code>dist/</code> with, you can use webpack-dev-server, which combines Webpack with a small file server that has useful development features.</p>\n<p>Install webpack-dev-server with <code>npm i -D webpack-dev-server</code>.</p>\n<p>Add a <code>devServer</code> property to your Webpack config as below:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  entry: <span class=\"string\">'./src/index.js'</span>,</div><div class=\"line\">  output: &#123;</div><div class=\"line\">    filename: <span class=\"string\">'main.js'</span>,</div><div class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  devServer: &#123;</div><div class=\"line\">    contentBase: path.join(__dirname, <span class=\"string\">'dist'</span>),</div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>Replace your <code>&quot;dev&quot;</code> script in <code>package.json</code> with:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">\"dev\": \"webpack-dev-server --mode development --open\",</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>If you are still running a static server like <code>http-server</code> or <code>live-server</code>, you can stop that process since webpack-dev-server includes that functionality.</p>\n</blockquote>\n<p>Now when you run <code>npm run dev</code>, webpack-dev-server will start a file server with the contents of <code>dist/</code>, Webpack will run, and automatically run again any time a file that is bundled is saved. Additionally, webpack-dev-server includes some extra code which causes the browser to refresh any time the code rebuilds. With the <code>--open</code> option included, it will also open your browser to show the index.html file.</p>\n<blockquote>\n<p><a href=\"https://webpack.js.org/configuration/dev-server/\" target=\"_blank\" rel=\"external\">webpack-dev-server configuration options</a> include a proxy option so that all requests which don’t match a bundle file are sent to another server.</p>\n</blockquote>\n<h1 id=\"More-Webpack-config\"><a href=\"#More-Webpack-config\" class=\"headerlink\" title=\"More Webpack config\"></a>More Webpack config</h1><p>Webpack has two primary ways to extend it’s functionality. It supports a rich plugin ecosystem, which can provide features such as automatically injecting the paths to bundle into a generated html file, or displaying in-depth statistics about bundles. It also supports <em>loaders</em>, which are tools that run against imported files, and can run transforms on the code, or even move the original file to the output folder and make the imported value a path to that file.</p>\n<p>The number one use-case for loaders is to run <a href=\"https://babeljs.io\" target=\"_blank\" rel=\"external\">Babel</a> transforms against your JavaScript code. Babel transforms can replace JSX code with JavaScript, remove Typescript type annotations, or most commonly: replace modern syntax with older syntax to support more browsers.</p>\n<p>In most cases, you will want to run Babel against your code with the <a href=\"https://babeljs.io/docs/en/babel-preset-env\" target=\"_blank\" rel=\"external\">“env” preset</a>, which compiles current JavaScript to older JavaScript.</p>\n<h2 id=\"Setup-Babel-and-babel-loader\"><a href=\"#Setup-Babel-and-babel-loader\" class=\"headerlink\" title=\"Setup Babel and babel-loader\"></a>Setup Babel and babel-loader</h2><p>First, lets modify our entrypoint file to use a new syntax feature, so that we can see that it gets replaced.</p>\n<p>Change <code>src/index.js</code> to:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'@babel/polyfill'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> foo <span class=\"keyword\">from</span> <span class=\"string\">'./foo'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> obj1 = &#123; <span class=\"attr\">a</span>: <span class=\"string\">'1'</span> &#125;;</div><div class=\"line\"><span class=\"keyword\">const</span> obj2 = &#123; ...obj1, <span class=\"attr\">b</span>: <span class=\"string\">'1'</span> &#125;;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'obj2.a === obj2.b'</span>, obj2.a === obj2.b);</div><div class=\"line\"></div><div class=\"line\">foo();</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>The <code>...</code> operator is part of ES2018, and needs to be compiled for Edge, and non-latest Safari.</p>\n</blockquote>\n<p>Install Babel and babel-loader with <code>npm i -D babel-loader @babel/core @babel/preset-env</code>. Then install Babel Polyfill with <code>npm i @babel/polyfill</code>.</p>\n<p>We need to add babel-loader into our Webpack config:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  entry: <span class=\"string\">'./src/index.js'</span>,</div><div class=\"line\">  output: &#123;</div><div class=\"line\">    filename: <span class=\"string\">'main.js'</span>,</div><div class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"built_in\">module</span>: &#123;</div><div class=\"line\">    rules: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: <span class=\"regexp\">/\\.js$/</span>,</div><div class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span>,</div><div class=\"line\">        use: &#123;</div><div class=\"line\">          loader: <span class=\"string\">'babel-loader'</span>,</div><div class=\"line\">        &#125;,</div><div class=\"line\">      &#125;,</div><div class=\"line\">    ],</div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>Then we need to setup a Babel config in <code>babel.config.js</code>:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  presets: [</div><div class=\"line\">    [<span class=\"string\">'@babel/preset-env'</span>, &#123;</div><div class=\"line\">      useBuiltIns: <span class=\"string\">'entry'</span>,</div><div class=\"line\">      modules: <span class=\"literal\">false</span>,</div><div class=\"line\">      targets: [</div><div class=\"line\">        <span class=\"string\">'last 2 firefox versions'</span>,</div><div class=\"line\">        <span class=\"string\">'last 2 chrome versions'</span>,</div><div class=\"line\">        <span class=\"string\">'last 2 edge versions'</span>,</div><div class=\"line\">        <span class=\"string\">'last 2 ios versions'</span>,</div><div class=\"line\">      ],</div><div class=\"line\">    &#125;]</div><div class=\"line\">  ],</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>This is an optimistic set of browsers, often you will need to support IE 11 as well.</p>\n</blockquote>\n<p>Now when you build your project, any modern syntax is compiled to code that all browsers in your support list can run. This is specifically only for files in your project that are not in <code>node_modules</code> (this is what the <code>exclude</code> line in the babel-loader config does).</p>\n<p>Syntax isn’t the only thing older browsers might not support though, so in addition to having Babel transform syntax, we also need to include Polyfills for newer standard library features. This is the <code>import &#39;@babel/polyfill&#39;;</code> in <code>index.js</code>. With the <code>useBuiltIns: &#39;entry&#39;</code> option in the babel env config, that single polyfill import is transformed to only import the polyfills needed for the browser support list.</p>\n<blockquote>\n<p>Currently there is an experimental option <code>useBuiltIns: &#39;usage&#39;</code> which will only include polyfills for features that you actually use. In the future this could become the best practice.</p>\n</blockquote>\n<h1 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h1><p>What we have so far is a reasonable set of tools for building JavaScript browser applications.</p>\n<p>With <code>npm run build</code> we transform a tree of source code modules from using modern JavaScript to being a single bundle file of broadly supported older JavaScript which we can include in our html.</p>\n<h1 id=\"Onward-and-Upward\"><a href=\"#Onward-and-Upward\" class=\"headerlink\" title=\"Onward and Upward\"></a>Onward and Upward</h1><p>Thus far, our build configuration is fairly simple, and is focused only on JavaScript and building a single application.</p>\n<p>From the basic configuration created here, we can expand to support a lot of helpful features:</p>\n<ul>\n<li>Code splitting (Separate a tree of your application).</li>\n<li>Importing stylesheets and other static assets, to be included in the output folder.</li>\n<li>Transforming non-JS code into JS (such as JSX, Typescript, Flow, and JavaScript proposal features).</li>\n<li>Create a map (manifest) of output files for programmatic consumption.</li>\n<li>Development only configuration options.</li>\n</ul>\n<p>To explore these topics and more, head to the <a href=\"https://github.com/samsch/webpack-guide/\" target=\"_blank\" rel=\"external\">Getting started with Webpack landing page</a>.</p>\n"},{"title":"Does Using React Negatively Affect SEO?","date":"2019-07-08T21:45:04.000Z","_content":"[Original gist](https://gist.github.com/samsch/c97e955782e5a2eeb726cf44d450cd6f)\n\nThe effect on SEO related to React comes from doing client-side rendering only. So this isn't React specific, any client-side-only view will suffer from this. But yes, SEO explicitly suffers for non-Google search engines which don't run the JavaScript for a page. Basically, your page is effectively blank. Google does run JavaScript, but their algorithm is intentionally quite complex and takes into account many factors, some of which (like initial render performance) can be affected by using only client-side rendering.\n\nIn reality, most sites where SEO matters for the pages probably should not be rendered on the client, or at least not on the client only. The web is designed around servers generating html, and unless you have a strong reason not to, it's better to fall in with that paradigm by default.\n\nSo then, there are two ways React can still be valuable, even when rendering on the server. The simpler way is to just use React as a server side templating language. I've been doing this on a current project, and it works quite nicely. JSX is handled on Node by compiling your server code with the Babel cli. Now, certain frequently-used features for front end that are normally handled by Webpack don't have great support and can be much more of a pain to setup (css-modules, file/image imports), but if you just treat React like any other templating language (e.g., Pug), it's not really any worse, and I prefer it personally.\n\nThe other option is using hydrated React SSR. Frequently this is just referred to as \"React SSR\" or even just \"SSR\", but I try to explicitly saying \"hydrated\" here because \"SSR\" simply stands for Server Side Rendering, which nominally describes basically anything that isn't client-side rendered.\n\nHydrated SSR means you share React components on the server and client, render on the server for the first request, the client code runs and \"hydrates\" it (the client renders a second time, ensuring it matches what the server rendered and attaching event listeners), and then client routing and rendering take over from there.\n\nHydrated SSR sounds great, but realize you get nearly all the downsides and only some of the upsides of doing both client and server rendering. It makes the codebase more complex and heavier. If you aren't using a Node (JavaScript) backend, then it adds significant complexity. And while it does improve SEO for non-Google crawlers, it doesn't necessarily improve the performance, and can hurt Time to Interactive. If your site isn't at least minimally usable without JavaScript on the client at all, it's not doing much for you. And to make it usable without JavaScript, you need to do more work on the server side for handling forms and such.\n\nSo, the progressions of what usually makes sense to use, starting with lower complexity web sites, and progressing to high-interactivity web apps:\n\nweb site/app type | examples | likely best way to implement\n--- | --- | ---\nSimple static websites | \"postcard\" sites, marketting landing pages | Just generate static html. Static site generators are great tools, and there are quite a few to fit tastes.\nSimple dynamic content websites | blogs, forums, some ecommerce | Render html on the server using a templating language, do minor UI enhancements with JS on the client.\nDynamic content with complex interactions | Social media, some ecommerce | Render html on the server where possible, replace functionality on the client with JS (React can be a useful tool).\nHighly interactive content | Maps, chatrooms, games, some admin interfaces, dashboards | Render base html on the server, maybe static if no extra data is needed, render significant parts of the UI on the client (React is great for this).\n\nIf you look at the progression here, you'll notice that the likely importance of SEO generally goes from high to low as you move down the table. This works out, since the html generated by the server for the earlier entries will be more SEO friendly.\n\nWhere hydrated React SSR comes in is when you *need* SEO for dynamic, interactive content in the lower parts of the table. A notable example of a large scale website where they feel the complexity trade-offs are necessary for SEO and accessibility is Airbnb (which is also largely (or fully?) designed to function without client-side JavaScript).","source":"_posts/2019-07-08-does-using-react-negatively-affect-seo.md","raw":"---\ntitle: Does Using React Negatively Affect SEO?\ndate: 2019-07-08 17:45:04\ntags:\n  - React\n  - seo\n  - ssr\n---\n[Original gist](https://gist.github.com/samsch/c97e955782e5a2eeb726cf44d450cd6f)\n\nThe effect on SEO related to React comes from doing client-side rendering only. So this isn't React specific, any client-side-only view will suffer from this. But yes, SEO explicitly suffers for non-Google search engines which don't run the JavaScript for a page. Basically, your page is effectively blank. Google does run JavaScript, but their algorithm is intentionally quite complex and takes into account many factors, some of which (like initial render performance) can be affected by using only client-side rendering.\n\nIn reality, most sites where SEO matters for the pages probably should not be rendered on the client, or at least not on the client only. The web is designed around servers generating html, and unless you have a strong reason not to, it's better to fall in with that paradigm by default.\n\nSo then, there are two ways React can still be valuable, even when rendering on the server. The simpler way is to just use React as a server side templating language. I've been doing this on a current project, and it works quite nicely. JSX is handled on Node by compiling your server code with the Babel cli. Now, certain frequently-used features for front end that are normally handled by Webpack don't have great support and can be much more of a pain to setup (css-modules, file/image imports), but if you just treat React like any other templating language (e.g., Pug), it's not really any worse, and I prefer it personally.\n\nThe other option is using hydrated React SSR. Frequently this is just referred to as \"React SSR\" or even just \"SSR\", but I try to explicitly saying \"hydrated\" here because \"SSR\" simply stands for Server Side Rendering, which nominally describes basically anything that isn't client-side rendered.\n\nHydrated SSR means you share React components on the server and client, render on the server for the first request, the client code runs and \"hydrates\" it (the client renders a second time, ensuring it matches what the server rendered and attaching event listeners), and then client routing and rendering take over from there.\n\nHydrated SSR sounds great, but realize you get nearly all the downsides and only some of the upsides of doing both client and server rendering. It makes the codebase more complex and heavier. If you aren't using a Node (JavaScript) backend, then it adds significant complexity. And while it does improve SEO for non-Google crawlers, it doesn't necessarily improve the performance, and can hurt Time to Interactive. If your site isn't at least minimally usable without JavaScript on the client at all, it's not doing much for you. And to make it usable without JavaScript, you need to do more work on the server side for handling forms and such.\n\nSo, the progressions of what usually makes sense to use, starting with lower complexity web sites, and progressing to high-interactivity web apps:\n\nweb site/app type | examples | likely best way to implement\n--- | --- | ---\nSimple static websites | \"postcard\" sites, marketting landing pages | Just generate static html. Static site generators are great tools, and there are quite a few to fit tastes.\nSimple dynamic content websites | blogs, forums, some ecommerce | Render html on the server using a templating language, do minor UI enhancements with JS on the client.\nDynamic content with complex interactions | Social media, some ecommerce | Render html on the server where possible, replace functionality on the client with JS (React can be a useful tool).\nHighly interactive content | Maps, chatrooms, games, some admin interfaces, dashboards | Render base html on the server, maybe static if no extra data is needed, render significant parts of the UI on the client (React is great for this).\n\nIf you look at the progression here, you'll notice that the likely importance of SEO generally goes from high to low as you move down the table. This works out, since the html generated by the server for the earlier entries will be more SEO friendly.\n\nWhere hydrated React SSR comes in is when you *need* SEO for dynamic, interactive content in the lower parts of the table. A notable example of a large scale website where they feel the complexity trade-offs are necessary for SEO and accessibility is Airbnb (which is also largely (or fully?) designed to function without client-side JavaScript).","slug":"does-using-react-negatively-affect-seo","published":1,"updated":"2019-07-24T18:17:15.404Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckixl4zw2000jjku3j9abcyap","content":"<p><a href=\"https://gist.github.com/samsch/c97e955782e5a2eeb726cf44d450cd6f\" target=\"_blank\" rel=\"external\">Original gist</a></p>\n<p>The effect on SEO related to React comes from doing client-side rendering only. So this isn’t React specific, any client-side-only view will suffer from this. But yes, SEO explicitly suffers for non-Google search engines which don’t run the JavaScript for a page. Basically, your page is effectively blank. Google does run JavaScript, but their algorithm is intentionally quite complex and takes into account many factors, some of which (like initial render performance) can be affected by using only client-side rendering.</p>\n<p>In reality, most sites where SEO matters for the pages probably should not be rendered on the client, or at least not on the client only. The web is designed around servers generating html, and unless you have a strong reason not to, it’s better to fall in with that paradigm by default.</p>\n<p>So then, there are two ways React can still be valuable, even when rendering on the server. The simpler way is to just use React as a server side templating language. I’ve been doing this on a current project, and it works quite nicely. JSX is handled on Node by compiling your server code with the Babel cli. Now, certain frequently-used features for front end that are normally handled by Webpack don’t have great support and can be much more of a pain to setup (css-modules, file/image imports), but if you just treat React like any other templating language (e.g., Pug), it’s not really any worse, and I prefer it personally.</p>\n<p>The other option is using hydrated React SSR. Frequently this is just referred to as “React SSR” or even just “SSR”, but I try to explicitly saying “hydrated” here because “SSR” simply stands for Server Side Rendering, which nominally describes basically anything that isn’t client-side rendered.</p>\n<p>Hydrated SSR means you share React components on the server and client, render on the server for the first request, the client code runs and “hydrates” it (the client renders a second time, ensuring it matches what the server rendered and attaching event listeners), and then client routing and rendering take over from there.</p>\n<p>Hydrated SSR sounds great, but realize you get nearly all the downsides and only some of the upsides of doing both client and server rendering. It makes the codebase more complex and heavier. If you aren’t using a Node (JavaScript) backend, then it adds significant complexity. And while it does improve SEO for non-Google crawlers, it doesn’t necessarily improve the performance, and can hurt Time to Interactive. If your site isn’t at least minimally usable without JavaScript on the client at all, it’s not doing much for you. And to make it usable without JavaScript, you need to do more work on the server side for handling forms and such.</p>\n<p>So, the progressions of what usually makes sense to use, starting with lower complexity web sites, and progressing to high-interactivity web apps:</p>\n<table>\n<thead>\n<tr>\n<th>web site/app type</th>\n<th>examples</th>\n<th>likely best way to implement</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Simple static websites</td>\n<td>“postcard” sites, marketting landing pages</td>\n<td>Just generate static html. Static site generators are great tools, and there are quite a few to fit tastes.</td>\n</tr>\n<tr>\n<td>Simple dynamic content websites</td>\n<td>blogs, forums, some ecommerce</td>\n<td>Render html on the server using a templating language, do minor UI enhancements with JS on the client.</td>\n</tr>\n<tr>\n<td>Dynamic content with complex interactions</td>\n<td>Social media, some ecommerce</td>\n<td>Render html on the server where possible, replace functionality on the client with JS (React can be a useful tool).</td>\n</tr>\n<tr>\n<td>Highly interactive content</td>\n<td>Maps, chatrooms, games, some admin interfaces, dashboards</td>\n<td>Render base html on the server, maybe static if no extra data is needed, render significant parts of the UI on the client (React is great for this).</td>\n</tr>\n</tbody>\n</table>\n<p>If you look at the progression here, you’ll notice that the likely importance of SEO generally goes from high to low as you move down the table. This works out, since the html generated by the server for the earlier entries will be more SEO friendly.</p>\n<p>Where hydrated React SSR comes in is when you <em>need</em> SEO for dynamic, interactive content in the lower parts of the table. A notable example of a large scale website where they feel the complexity trade-offs are necessary for SEO and accessibility is Airbnb (which is also largely (or fully?) designed to function without client-side JavaScript).</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://gist.github.com/samsch/c97e955782e5a2eeb726cf44d450cd6f\" target=\"_blank\" rel=\"external\">Original gist</a></p>\n<p>The effect on SEO related to React comes from doing client-side rendering only. So this isn’t React specific, any client-side-only view will suffer from this. But yes, SEO explicitly suffers for non-Google search engines which don’t run the JavaScript for a page. Basically, your page is effectively blank. Google does run JavaScript, but their algorithm is intentionally quite complex and takes into account many factors, some of which (like initial render performance) can be affected by using only client-side rendering.</p>\n<p>In reality, most sites where SEO matters for the pages probably should not be rendered on the client, or at least not on the client only. The web is designed around servers generating html, and unless you have a strong reason not to, it’s better to fall in with that paradigm by default.</p>\n<p>So then, there are two ways React can still be valuable, even when rendering on the server. The simpler way is to just use React as a server side templating language. I’ve been doing this on a current project, and it works quite nicely. JSX is handled on Node by compiling your server code with the Babel cli. Now, certain frequently-used features for front end that are normally handled by Webpack don’t have great support and can be much more of a pain to setup (css-modules, file/image imports), but if you just treat React like any other templating language (e.g., Pug), it’s not really any worse, and I prefer it personally.</p>\n<p>The other option is using hydrated React SSR. Frequently this is just referred to as “React SSR” or even just “SSR”, but I try to explicitly saying “hydrated” here because “SSR” simply stands for Server Side Rendering, which nominally describes basically anything that isn’t client-side rendered.</p>\n<p>Hydrated SSR means you share React components on the server and client, render on the server for the first request, the client code runs and “hydrates” it (the client renders a second time, ensuring it matches what the server rendered and attaching event listeners), and then client routing and rendering take over from there.</p>\n<p>Hydrated SSR sounds great, but realize you get nearly all the downsides and only some of the upsides of doing both client and server rendering. It makes the codebase more complex and heavier. If you aren’t using a Node (JavaScript) backend, then it adds significant complexity. And while it does improve SEO for non-Google crawlers, it doesn’t necessarily improve the performance, and can hurt Time to Interactive. If your site isn’t at least minimally usable without JavaScript on the client at all, it’s not doing much for you. And to make it usable without JavaScript, you need to do more work on the server side for handling forms and such.</p>\n<p>So, the progressions of what usually makes sense to use, starting with lower complexity web sites, and progressing to high-interactivity web apps:</p>\n<table>\n<thead>\n<tr>\n<th>web site/app type</th>\n<th>examples</th>\n<th>likely best way to implement</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Simple static websites</td>\n<td>“postcard” sites, marketting landing pages</td>\n<td>Just generate static html. Static site generators are great tools, and there are quite a few to fit tastes.</td>\n</tr>\n<tr>\n<td>Simple dynamic content websites</td>\n<td>blogs, forums, some ecommerce</td>\n<td>Render html on the server using a templating language, do minor UI enhancements with JS on the client.</td>\n</tr>\n<tr>\n<td>Dynamic content with complex interactions</td>\n<td>Social media, some ecommerce</td>\n<td>Render html on the server where possible, replace functionality on the client with JS (React can be a useful tool).</td>\n</tr>\n<tr>\n<td>Highly interactive content</td>\n<td>Maps, chatrooms, games, some admin interfaces, dashboards</td>\n<td>Render base html on the server, maybe static if no extra data is needed, render significant parts of the UI on the client (React is great for this).</td>\n</tr>\n</tbody>\n</table>\n<p>If you look at the progression here, you’ll notice that the likely importance of SEO generally goes from high to low as you move down the table. This works out, since the html generated by the server for the earlier entries will be more SEO friendly.</p>\n<p>Where hydrated React SSR comes in is when you <em>need</em> SEO for dynamic, interactive content in the lower parts of the table. A notable example of a large scale website where they feel the complexity trade-offs are necessary for SEO and accessibility is Airbnb (which is also largely (or fully?) designed to function without client-side JavaScript).</p>\n"},{"title":"Effects are not lifecycles","date":"2019-07-23T20:58:11.000Z","_content":"You can't write lifecycles with useEffect.\n\nWith React hooks being widely regarded as \"better\" than using classes in the React community, both for new users and for experienced developers, there's a wide pattern of developer migration to learn the new tools.\n\nMost of these developers are bringing with them the concepts they've gotten used to with React classes and even from non-React frameworks or tools. Some of these are easy to directly transfer across: It's not terribly hard to pick up `useState` if you are used to class state, and `useRef` is fairly straight forward for many as well, once they get the basic concept of how hooks hold on to state.\n\n## Lifecycles are \"when\" you do things\n\nReact class component authors are used to writing functionality in lifecycles, and lifecycles don't exist with hooks. You can *emulate* them if you're careful, maybe using some `useRef` instances to reference changing props because of closures. But emulating lifecycles is a bad idea, and the reason why is this: Effects are a higher-level abstraction than lifecycles.\n\nWhen you use a lifecycle like componentDidMount, or componentDidUpdate (let alone the older deprecated lifecycles which ran at different stages), you must think in terms of *when* something should happen. \"I want the data loaded when the component mounts.\" \"I want to load data if when the component updates with a new X prop.\" This idea of \"when\" is procedural thinking. The \"when\" concept isn't actually important, but because the tool for completing these tasks is lifecycles, you need to map the \"what\" that you want to do, to the \"when\" of a specific lifecycle.\n\nWell I'm here to tell you to forget all of that. Seriously, forget the concept of \"when\" entirely. You don't care *when* something happens. You really don't. You think you might for this specific thing? You don't.\n\n## Effects are \"what\", not \"when\"\n\nReact is a strict model. It's part of why it's so powerful and flexible. The model says \"given X state, the view should be viewFunction(X)\". For a long time, we had to break this model for anything that wasn't direct view output. Instead of \"given X state, do effectFunction(X)\", we had to break down *when* we wanted those things to happen, and sort them into lifecycle methods.\n\nWith `useEffect`, you say \"given X state, do effectFunction(x)\". What's important now is just *what* your state is, and *what* you should do given that state. \"When\" doesn't matter anymore. With lifecycles, you would do async loads of your data in componentDidMount. You did it at mount, because you know it's not previously been done then. But do you *actually* care about it being at mount? Isn't what really matters that you load the data *if it hasn't already been loaded?* So we just boiled it down to the important part: If our data is not yet loaded, then load the data.\n\nThat concept is how `useEffect` works. We don't care that the component is mounting, we just write in our useEffect that we want the data to be loaded if it hasn't been already. What's more, from a high level, we don't usually even care if it loads the data multiple times, just that the data gets loaded.\n\n## What it looks like in code\n\nNow we've boiled down the *what* that we want to do. \"When data isn't loaded, load the data.\"\n\nThe naive approach looks like this:\n\n```jsx\nconst [isLoaded, setLoaded] = useState(false);\nconst [data, setData] = useState(null);\n\nuseEffect(() => {\n  if (isLoaded === false) {\n    loadData().then(data => {\n      setData(data);\n      setLoaded(true);\n    });\n  }\n});\n```\nThis code *works*. It's the most naive approach given our concept of what we *want*, but it works perfectly fine.\n\n> Arguably, there are more naive approaches, but we're making the assumption here that we already know *how* hooks work, so we aren't taking into consideration putting the `useEffect()` inside the condition, since that is a known error.\n\nLet's compare that to what the code looks like if you emulate `componentDidMount` using `[]` as a second argument.\n```jsx\nconst [data, setData] = useState(null);\n\nuseEffect(() => {\n  loadData().then(data => {\n    setData(data);\n    setLoaded(true);\n  });\n}, []);\n```\nAt first glance, there is less code involved, which you might argue is a good thing. But this code doesn't describe the situation as well. We have *implicit* state. It *looks* like `loadData()` should run every time, because there is no *semantic* code which says it won't. In other words, we aren't *describing* what the code is actually supposed to do. If you remove the `[]`, then this code looks almost identical, but simply doesn't work properly (it always loads data, instead of only if we need it). What's more, we very likely need the loading state in render anyway, and while you can assume that `null` data means it's not loaded, you are breaking single responsibility principle by overloading the meaning of a variable.\n\nThis is a very common stumbling block that people trip over when learning hooks, because they try to emulate lifecycles.\n\n## Optimizing\n\nNow, for practical purposes, we *don't* actually want the `loadData` function called more than once. If you follow the simplest application of what belongs in the `useEffect` dependencies argument (every outside reference), this is automatically fixed:\n```jsx\nconst [isLoaded, setLoaded] = useState(false);\nconst [data, setData] = useState(null);\n\nuseEffect(() => {\n  if (isLoaded === false) {\n    loadData().then(data => {\n      setData(data);\n      setLoaded(true);\n    });\n  }\n}, [isLoaded, loadData, setData, setLoaded]);\n```\n\nThe two setters won't change, but they are semantically deps of the function, and maybe down the road they get replaced by something that might change. We'll assume for now that `loadData` won't change (if it did, it will only trigger a new call *if* `isLoaded` is still `false`). Our key dependency here is `isLoaded`. In the first pass, React automatically runs the effect, and `isLoaded` is false, so `loadData()` is called. If the component renders again while `isLoaded` is still false, the deps won't have changed, so the effect won't run again.\n\nOnce `loadData()` resolves, `isLoaded` is set true. The effect runs again, but this time the condition is false, so `loadData()` isn't called.\n\nWhat's important to take away from this is that the dependency argument *didn't change* our functionality at all, it just reduced unnecessary calls to a function.\n\n## But what about things that *shouldn't* be loaded more than once!\n\nAh, right. Maybe it's making a call which changes something somewhere else. It should *only* be called once when needed.\n\nThis means our \"what\" changed. It's no longer \"if not loaded, load data\", it's now: \"if not loaded, *and not already loading*, load data.\" Because our \"what\" changed, our semantic code should change too.\n\nWe could simply add an `isLoading` state, but then we could have something confusing happen like `isLoading` and `isLoaded` both true! Since these state should be *exclusive*, that means they are also *related*. And more than related, they are actually the *same* state field (the data status), just different values.\n\nSo now we change our state code to reflect our new \"what\":\n```jsx\nconst [dataStatus, setDataStatus] = useState('empty');\nconst [data, setData] = useState(null);\n\nuseEffect(() => {\n  if (dataStatus === 'empty') {\n    loadData().then(data => {\n      setData(data);\n      setDataStatus('available');\n    });\n    setDataStatus('loading');\n  }\n});\n```\n\nNow we have code which *only* calls `loadData()` when we need it and it isn't already loading, AND it doesn't use the dependency argument of `useEffect`.\n\nAdditionally, the different parts of our state are all explicitly included here.\n\n## Tell me what to do!\n\nSo, forget about lifecycles, mounting, updates, and generally \"when\" thing happen. Just completely put it out of your head.\n\nThink about *what* you need to do, and *what* the states are that should cause those things to happen.\n\nModel those states explicitly in your code, and model the effects run based on those states.\n\nYour code should *always* work without using the second argument to `useEffect`. If you *need*, the second argument, you are probably incorrectly coding your functionality.\n","source":"_posts/2019-07-23-effects-are-not-lifecycles.md","raw":"---\ntitle: Effects are not lifecycles\ndate: 2019-07-23 16:58:11\ntags:\n  - React\n  - hooks\n  - lifecycles\n---\nYou can't write lifecycles with useEffect.\n\nWith React hooks being widely regarded as \"better\" than using classes in the React community, both for new users and for experienced developers, there's a wide pattern of developer migration to learn the new tools.\n\nMost of these developers are bringing with them the concepts they've gotten used to with React classes and even from non-React frameworks or tools. Some of these are easy to directly transfer across: It's not terribly hard to pick up `useState` if you are used to class state, and `useRef` is fairly straight forward for many as well, once they get the basic concept of how hooks hold on to state.\n\n## Lifecycles are \"when\" you do things\n\nReact class component authors are used to writing functionality in lifecycles, and lifecycles don't exist with hooks. You can *emulate* them if you're careful, maybe using some `useRef` instances to reference changing props because of closures. But emulating lifecycles is a bad idea, and the reason why is this: Effects are a higher-level abstraction than lifecycles.\n\nWhen you use a lifecycle like componentDidMount, or componentDidUpdate (let alone the older deprecated lifecycles which ran at different stages), you must think in terms of *when* something should happen. \"I want the data loaded when the component mounts.\" \"I want to load data if when the component updates with a new X prop.\" This idea of \"when\" is procedural thinking. The \"when\" concept isn't actually important, but because the tool for completing these tasks is lifecycles, you need to map the \"what\" that you want to do, to the \"when\" of a specific lifecycle.\n\nWell I'm here to tell you to forget all of that. Seriously, forget the concept of \"when\" entirely. You don't care *when* something happens. You really don't. You think you might for this specific thing? You don't.\n\n## Effects are \"what\", not \"when\"\n\nReact is a strict model. It's part of why it's so powerful and flexible. The model says \"given X state, the view should be viewFunction(X)\". For a long time, we had to break this model for anything that wasn't direct view output. Instead of \"given X state, do effectFunction(X)\", we had to break down *when* we wanted those things to happen, and sort them into lifecycle methods.\n\nWith `useEffect`, you say \"given X state, do effectFunction(x)\". What's important now is just *what* your state is, and *what* you should do given that state. \"When\" doesn't matter anymore. With lifecycles, you would do async loads of your data in componentDidMount. You did it at mount, because you know it's not previously been done then. But do you *actually* care about it being at mount? Isn't what really matters that you load the data *if it hasn't already been loaded?* So we just boiled it down to the important part: If our data is not yet loaded, then load the data.\n\nThat concept is how `useEffect` works. We don't care that the component is mounting, we just write in our useEffect that we want the data to be loaded if it hasn't been already. What's more, from a high level, we don't usually even care if it loads the data multiple times, just that the data gets loaded.\n\n## What it looks like in code\n\nNow we've boiled down the *what* that we want to do. \"When data isn't loaded, load the data.\"\n\nThe naive approach looks like this:\n\n```jsx\nconst [isLoaded, setLoaded] = useState(false);\nconst [data, setData] = useState(null);\n\nuseEffect(() => {\n  if (isLoaded === false) {\n    loadData().then(data => {\n      setData(data);\n      setLoaded(true);\n    });\n  }\n});\n```\nThis code *works*. It's the most naive approach given our concept of what we *want*, but it works perfectly fine.\n\n> Arguably, there are more naive approaches, but we're making the assumption here that we already know *how* hooks work, so we aren't taking into consideration putting the `useEffect()` inside the condition, since that is a known error.\n\nLet's compare that to what the code looks like if you emulate `componentDidMount` using `[]` as a second argument.\n```jsx\nconst [data, setData] = useState(null);\n\nuseEffect(() => {\n  loadData().then(data => {\n    setData(data);\n    setLoaded(true);\n  });\n}, []);\n```\nAt first glance, there is less code involved, which you might argue is a good thing. But this code doesn't describe the situation as well. We have *implicit* state. It *looks* like `loadData()` should run every time, because there is no *semantic* code which says it won't. In other words, we aren't *describing* what the code is actually supposed to do. If you remove the `[]`, then this code looks almost identical, but simply doesn't work properly (it always loads data, instead of only if we need it). What's more, we very likely need the loading state in render anyway, and while you can assume that `null` data means it's not loaded, you are breaking single responsibility principle by overloading the meaning of a variable.\n\nThis is a very common stumbling block that people trip over when learning hooks, because they try to emulate lifecycles.\n\n## Optimizing\n\nNow, for practical purposes, we *don't* actually want the `loadData` function called more than once. If you follow the simplest application of what belongs in the `useEffect` dependencies argument (every outside reference), this is automatically fixed:\n```jsx\nconst [isLoaded, setLoaded] = useState(false);\nconst [data, setData] = useState(null);\n\nuseEffect(() => {\n  if (isLoaded === false) {\n    loadData().then(data => {\n      setData(data);\n      setLoaded(true);\n    });\n  }\n}, [isLoaded, loadData, setData, setLoaded]);\n```\n\nThe two setters won't change, but they are semantically deps of the function, and maybe down the road they get replaced by something that might change. We'll assume for now that `loadData` won't change (if it did, it will only trigger a new call *if* `isLoaded` is still `false`). Our key dependency here is `isLoaded`. In the first pass, React automatically runs the effect, and `isLoaded` is false, so `loadData()` is called. If the component renders again while `isLoaded` is still false, the deps won't have changed, so the effect won't run again.\n\nOnce `loadData()` resolves, `isLoaded` is set true. The effect runs again, but this time the condition is false, so `loadData()` isn't called.\n\nWhat's important to take away from this is that the dependency argument *didn't change* our functionality at all, it just reduced unnecessary calls to a function.\n\n## But what about things that *shouldn't* be loaded more than once!\n\nAh, right. Maybe it's making a call which changes something somewhere else. It should *only* be called once when needed.\n\nThis means our \"what\" changed. It's no longer \"if not loaded, load data\", it's now: \"if not loaded, *and not already loading*, load data.\" Because our \"what\" changed, our semantic code should change too.\n\nWe could simply add an `isLoading` state, but then we could have something confusing happen like `isLoading` and `isLoaded` both true! Since these state should be *exclusive*, that means they are also *related*. And more than related, they are actually the *same* state field (the data status), just different values.\n\nSo now we change our state code to reflect our new \"what\":\n```jsx\nconst [dataStatus, setDataStatus] = useState('empty');\nconst [data, setData] = useState(null);\n\nuseEffect(() => {\n  if (dataStatus === 'empty') {\n    loadData().then(data => {\n      setData(data);\n      setDataStatus('available');\n    });\n    setDataStatus('loading');\n  }\n});\n```\n\nNow we have code which *only* calls `loadData()` when we need it and it isn't already loading, AND it doesn't use the dependency argument of `useEffect`.\n\nAdditionally, the different parts of our state are all explicitly included here.\n\n## Tell me what to do!\n\nSo, forget about lifecycles, mounting, updates, and generally \"when\" thing happen. Just completely put it out of your head.\n\nThink about *what* you need to do, and *what* the states are that should cause those things to happen.\n\nModel those states explicitly in your code, and model the effects run based on those states.\n\nYour code should *always* work without using the second argument to `useEffect`. If you *need*, the second argument, you are probably incorrectly coding your functionality.\n","slug":"effects-are-not-lifecycles","published":1,"updated":"2019-08-08T00:51:16.579Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckixl4zw3000ljku3celreiul","content":"<p>You can’t write lifecycles with useEffect.</p>\n<p>With React hooks being widely regarded as “better” than using classes in the React community, both for new users and for experienced developers, there’s a wide pattern of developer migration to learn the new tools.</p>\n<p>Most of these developers are bringing with them the concepts they’ve gotten used to with React classes and even from non-React frameworks or tools. Some of these are easy to directly transfer across: It’s not terribly hard to pick up <code>useState</code> if you are used to class state, and <code>useRef</code> is fairly straight forward for many as well, once they get the basic concept of how hooks hold on to state.</p>\n<h2 id=\"Lifecycles-are-“when”-you-do-things\"><a href=\"#Lifecycles-are-“when”-you-do-things\" class=\"headerlink\" title=\"Lifecycles are “when” you do things\"></a>Lifecycles are “when” you do things</h2><p>React class component authors are used to writing functionality in lifecycles, and lifecycles don’t exist with hooks. You can <em>emulate</em> them if you’re careful, maybe using some <code>useRef</code> instances to reference changing props because of closures. But emulating lifecycles is a bad idea, and the reason why is this: Effects are a higher-level abstraction than lifecycles.</p>\n<p>When you use a lifecycle like componentDidMount, or componentDidUpdate (let alone the older deprecated lifecycles which ran at different stages), you must think in terms of <em>when</em> something should happen. “I want the data loaded when the component mounts.” “I want to load data if when the component updates with a new X prop.” This idea of “when” is procedural thinking. The “when” concept isn’t actually important, but because the tool for completing these tasks is lifecycles, you need to map the “what” that you want to do, to the “when” of a specific lifecycle.</p>\n<p>Well I’m here to tell you to forget all of that. Seriously, forget the concept of “when” entirely. You don’t care <em>when</em> something happens. You really don’t. You think you might for this specific thing? You don’t.</p>\n<h2 id=\"Effects-are-“what”-not-“when”\"><a href=\"#Effects-are-“what”-not-“when”\" class=\"headerlink\" title=\"Effects are “what”, not “when”\"></a>Effects are “what”, not “when”</h2><p>React is a strict model. It’s part of why it’s so powerful and flexible. The model says “given X state, the view should be viewFunction(X)”. For a long time, we had to break this model for anything that wasn’t direct view output. Instead of “given X state, do effectFunction(X)”, we had to break down <em>when</em> we wanted those things to happen, and sort them into lifecycle methods.</p>\n<p>With <code>useEffect</code>, you say “given X state, do effectFunction(x)”. What’s important now is just <em>what</em> your state is, and <em>what</em> you should do given that state. “When” doesn’t matter anymore. With lifecycles, you would do async loads of your data in componentDidMount. You did it at mount, because you know it’s not previously been done then. But do you <em>actually</em> care about it being at mount? Isn’t what really matters that you load the data <em>if it hasn’t already been loaded?</em> So we just boiled it down to the important part: If our data is not yet loaded, then load the data.</p>\n<p>That concept is how <code>useEffect</code> works. We don’t care that the component is mounting, we just write in our useEffect that we want the data to be loaded if it hasn’t been already. What’s more, from a high level, we don’t usually even care if it loads the data multiple times, just that the data gets loaded.</p>\n<h2 id=\"What-it-looks-like-in-code\"><a href=\"#What-it-looks-like-in-code\" class=\"headerlink\" title=\"What it looks like in code\"></a>What it looks like in code</h2><p>Now we’ve boiled down the <em>what</em> that we want to do. “When data isn’t loaded, load the data.”</p>\n<p>The naive approach looks like this:</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> [isLoaded, setLoaded] = useState(<span class=\"literal\">false</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> [data, setData] = useState(<span class=\"literal\">null</span>);</div><div class=\"line\"></div><div class=\"line\">useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (isLoaded === <span class=\"literal\">false</span>) &#123;</div><div class=\"line\">    loadData().then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</div><div class=\"line\">      setData(data);</div><div class=\"line\">      setLoaded(<span class=\"literal\">true</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>This code <em>works</em>. It’s the most naive approach given our concept of what we <em>want</em>, but it works perfectly fine.</p>\n<blockquote>\n<p>Arguably, there are more naive approaches, but we’re making the assumption here that we already know <em>how</em> hooks work, so we aren’t taking into consideration putting the <code>useEffect()</code> inside the condition, since that is a known error.</p>\n</blockquote>\n<p>Let’s compare that to what the code looks like if you emulate <code>componentDidMount</code> using <code>[]</code> as a second argument.<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> [data, setData] = useState(<span class=\"literal\">null</span>);</div><div class=\"line\"></div><div class=\"line\">useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  loadData().then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</div><div class=\"line\">    setData(data);</div><div class=\"line\">    setLoaded(<span class=\"literal\">true</span>);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;, []);</div></pre></td></tr></table></figure></p>\n<p>At first glance, there is less code involved, which you might argue is a good thing. But this code doesn’t describe the situation as well. We have <em>implicit</em> state. It <em>looks</em> like <code>loadData()</code> should run every time, because there is no <em>semantic</em> code which says it won’t. In other words, we aren’t <em>describing</em> what the code is actually supposed to do. If you remove the <code>[]</code>, then this code looks almost identical, but simply doesn’t work properly (it always loads data, instead of only if we need it). What’s more, we very likely need the loading state in render anyway, and while you can assume that <code>null</code> data means it’s not loaded, you are breaking single responsibility principle by overloading the meaning of a variable.</p>\n<p>This is a very common stumbling block that people trip over when learning hooks, because they try to emulate lifecycles.</p>\n<h2 id=\"Optimizing\"><a href=\"#Optimizing\" class=\"headerlink\" title=\"Optimizing\"></a>Optimizing</h2><p>Now, for practical purposes, we <em>don’t</em> actually want the <code>loadData</code> function called more than once. If you follow the simplest application of what belongs in the <code>useEffect</code> dependencies argument (every outside reference), this is automatically fixed:<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> [isLoaded, setLoaded] = useState(<span class=\"literal\">false</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> [data, setData] = useState(<span class=\"literal\">null</span>);</div><div class=\"line\"></div><div class=\"line\">useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (isLoaded === <span class=\"literal\">false</span>) &#123;</div><div class=\"line\">    loadData().then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</div><div class=\"line\">      setData(data);</div><div class=\"line\">      setLoaded(<span class=\"literal\">true</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;, [isLoaded, loadData, setData, setLoaded]);</div></pre></td></tr></table></figure></p>\n<p>The two setters won’t change, but they are semantically deps of the function, and maybe down the road they get replaced by something that might change. We’ll assume for now that <code>loadData</code> won’t change (if it did, it will only trigger a new call <em>if</em> <code>isLoaded</code> is still <code>false</code>). Our key dependency here is <code>isLoaded</code>. In the first pass, React automatically runs the effect, and <code>isLoaded</code> is false, so <code>loadData()</code> is called. If the component renders again while <code>isLoaded</code> is still false, the deps won’t have changed, so the effect won’t run again.</p>\n<p>Once <code>loadData()</code> resolves, <code>isLoaded</code> is set true. The effect runs again, but this time the condition is false, so <code>loadData()</code> isn’t called.</p>\n<p>What’s important to take away from this is that the dependency argument <em>didn’t change</em> our functionality at all, it just reduced unnecessary calls to a function.</p>\n<h2 id=\"But-what-about-things-that-shouldn’t-be-loaded-more-than-once\"><a href=\"#But-what-about-things-that-shouldn’t-be-loaded-more-than-once\" class=\"headerlink\" title=\"But what about things that shouldn’t be loaded more than once!\"></a>But what about things that <em>shouldn’t</em> be loaded more than once!</h2><p>Ah, right. Maybe it’s making a call which changes something somewhere else. It should <em>only</em> be called once when needed.</p>\n<p>This means our “what” changed. It’s no longer “if not loaded, load data”, it’s now: “if not loaded, <em>and not already loading</em>, load data.” Because our “what” changed, our semantic code should change too.</p>\n<p>We could simply add an <code>isLoading</code> state, but then we could have something confusing happen like <code>isLoading</code> and <code>isLoaded</code> both true! Since these state should be <em>exclusive</em>, that means they are also <em>related</em>. And more than related, they are actually the <em>same</em> state field (the data status), just different values.</p>\n<p>So now we change our state code to reflect our new “what”:<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> [dataStatus, setDataStatus] = useState(<span class=\"string\">'empty'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> [data, setData] = useState(<span class=\"literal\">null</span>);</div><div class=\"line\"></div><div class=\"line\">useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (dataStatus === <span class=\"string\">'empty'</span>) &#123;</div><div class=\"line\">    loadData().then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</div><div class=\"line\">      setData(data);</div><div class=\"line\">      setDataStatus(<span class=\"string\">'available'</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    setDataStatus(<span class=\"string\">'loading'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>Now we have code which <em>only</em> calls <code>loadData()</code> when we need it and it isn’t already loading, AND it doesn’t use the dependency argument of <code>useEffect</code>.</p>\n<p>Additionally, the different parts of our state are all explicitly included here.</p>\n<h2 id=\"Tell-me-what-to-do\"><a href=\"#Tell-me-what-to-do\" class=\"headerlink\" title=\"Tell me what to do!\"></a>Tell me what to do!</h2><p>So, forget about lifecycles, mounting, updates, and generally “when” thing happen. Just completely put it out of your head.</p>\n<p>Think about <em>what</em> you need to do, and <em>what</em> the states are that should cause those things to happen.</p>\n<p>Model those states explicitly in your code, and model the effects run based on those states.</p>\n<p>Your code should <em>always</em> work without using the second argument to <code>useEffect</code>. If you <em>need</em>, the second argument, you are probably incorrectly coding your functionality.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>You can’t write lifecycles with useEffect.</p>\n<p>With React hooks being widely regarded as “better” than using classes in the React community, both for new users and for experienced developers, there’s a wide pattern of developer migration to learn the new tools.</p>\n<p>Most of these developers are bringing with them the concepts they’ve gotten used to with React classes and even from non-React frameworks or tools. Some of these are easy to directly transfer across: It’s not terribly hard to pick up <code>useState</code> if you are used to class state, and <code>useRef</code> is fairly straight forward for many as well, once they get the basic concept of how hooks hold on to state.</p>\n<h2 id=\"Lifecycles-are-“when”-you-do-things\"><a href=\"#Lifecycles-are-“when”-you-do-things\" class=\"headerlink\" title=\"Lifecycles are “when” you do things\"></a>Lifecycles are “when” you do things</h2><p>React class component authors are used to writing functionality in lifecycles, and lifecycles don’t exist with hooks. You can <em>emulate</em> them if you’re careful, maybe using some <code>useRef</code> instances to reference changing props because of closures. But emulating lifecycles is a bad idea, and the reason why is this: Effects are a higher-level abstraction than lifecycles.</p>\n<p>When you use a lifecycle like componentDidMount, or componentDidUpdate (let alone the older deprecated lifecycles which ran at different stages), you must think in terms of <em>when</em> something should happen. “I want the data loaded when the component mounts.” “I want to load data if when the component updates with a new X prop.” This idea of “when” is procedural thinking. The “when” concept isn’t actually important, but because the tool for completing these tasks is lifecycles, you need to map the “what” that you want to do, to the “when” of a specific lifecycle.</p>\n<p>Well I’m here to tell you to forget all of that. Seriously, forget the concept of “when” entirely. You don’t care <em>when</em> something happens. You really don’t. You think you might for this specific thing? You don’t.</p>\n<h2 id=\"Effects-are-“what”-not-“when”\"><a href=\"#Effects-are-“what”-not-“when”\" class=\"headerlink\" title=\"Effects are “what”, not “when”\"></a>Effects are “what”, not “when”</h2><p>React is a strict model. It’s part of why it’s so powerful and flexible. The model says “given X state, the view should be viewFunction(X)”. For a long time, we had to break this model for anything that wasn’t direct view output. Instead of “given X state, do effectFunction(X)”, we had to break down <em>when</em> we wanted those things to happen, and sort them into lifecycle methods.</p>\n<p>With <code>useEffect</code>, you say “given X state, do effectFunction(x)”. What’s important now is just <em>what</em> your state is, and <em>what</em> you should do given that state. “When” doesn’t matter anymore. With lifecycles, you would do async loads of your data in componentDidMount. You did it at mount, because you know it’s not previously been done then. But do you <em>actually</em> care about it being at mount? Isn’t what really matters that you load the data <em>if it hasn’t already been loaded?</em> So we just boiled it down to the important part: If our data is not yet loaded, then load the data.</p>\n<p>That concept is how <code>useEffect</code> works. We don’t care that the component is mounting, we just write in our useEffect that we want the data to be loaded if it hasn’t been already. What’s more, from a high level, we don’t usually even care if it loads the data multiple times, just that the data gets loaded.</p>\n<h2 id=\"What-it-looks-like-in-code\"><a href=\"#What-it-looks-like-in-code\" class=\"headerlink\" title=\"What it looks like in code\"></a>What it looks like in code</h2><p>Now we’ve boiled down the <em>what</em> that we want to do. “When data isn’t loaded, load the data.”</p>\n<p>The naive approach looks like this:</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> [isLoaded, setLoaded] = useState(<span class=\"literal\">false</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> [data, setData] = useState(<span class=\"literal\">null</span>);</div><div class=\"line\"></div><div class=\"line\">useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (isLoaded === <span class=\"literal\">false</span>) &#123;</div><div class=\"line\">    loadData().then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</div><div class=\"line\">      setData(data);</div><div class=\"line\">      setLoaded(<span class=\"literal\">true</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>This code <em>works</em>. It’s the most naive approach given our concept of what we <em>want</em>, but it works perfectly fine.</p>\n<blockquote>\n<p>Arguably, there are more naive approaches, but we’re making the assumption here that we already know <em>how</em> hooks work, so we aren’t taking into consideration putting the <code>useEffect()</code> inside the condition, since that is a known error.</p>\n</blockquote>\n<p>Let’s compare that to what the code looks like if you emulate <code>componentDidMount</code> using <code>[]</code> as a second argument.<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> [data, setData] = useState(<span class=\"literal\">null</span>);</div><div class=\"line\"></div><div class=\"line\">useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  loadData().then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</div><div class=\"line\">    setData(data);</div><div class=\"line\">    setLoaded(<span class=\"literal\">true</span>);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;, []);</div></pre></td></tr></table></figure></p>\n<p>At first glance, there is less code involved, which you might argue is a good thing. But this code doesn’t describe the situation as well. We have <em>implicit</em> state. It <em>looks</em> like <code>loadData()</code> should run every time, because there is no <em>semantic</em> code which says it won’t. In other words, we aren’t <em>describing</em> what the code is actually supposed to do. If you remove the <code>[]</code>, then this code looks almost identical, but simply doesn’t work properly (it always loads data, instead of only if we need it). What’s more, we very likely need the loading state in render anyway, and while you can assume that <code>null</code> data means it’s not loaded, you are breaking single responsibility principle by overloading the meaning of a variable.</p>\n<p>This is a very common stumbling block that people trip over when learning hooks, because they try to emulate lifecycles.</p>\n<h2 id=\"Optimizing\"><a href=\"#Optimizing\" class=\"headerlink\" title=\"Optimizing\"></a>Optimizing</h2><p>Now, for practical purposes, we <em>don’t</em> actually want the <code>loadData</code> function called more than once. If you follow the simplest application of what belongs in the <code>useEffect</code> dependencies argument (every outside reference), this is automatically fixed:<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> [isLoaded, setLoaded] = useState(<span class=\"literal\">false</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> [data, setData] = useState(<span class=\"literal\">null</span>);</div><div class=\"line\"></div><div class=\"line\">useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (isLoaded === <span class=\"literal\">false</span>) &#123;</div><div class=\"line\">    loadData().then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</div><div class=\"line\">      setData(data);</div><div class=\"line\">      setLoaded(<span class=\"literal\">true</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;, [isLoaded, loadData, setData, setLoaded]);</div></pre></td></tr></table></figure></p>\n<p>The two setters won’t change, but they are semantically deps of the function, and maybe down the road they get replaced by something that might change. We’ll assume for now that <code>loadData</code> won’t change (if it did, it will only trigger a new call <em>if</em> <code>isLoaded</code> is still <code>false</code>). Our key dependency here is <code>isLoaded</code>. In the first pass, React automatically runs the effect, and <code>isLoaded</code> is false, so <code>loadData()</code> is called. If the component renders again while <code>isLoaded</code> is still false, the deps won’t have changed, so the effect won’t run again.</p>\n<p>Once <code>loadData()</code> resolves, <code>isLoaded</code> is set true. The effect runs again, but this time the condition is false, so <code>loadData()</code> isn’t called.</p>\n<p>What’s important to take away from this is that the dependency argument <em>didn’t change</em> our functionality at all, it just reduced unnecessary calls to a function.</p>\n<h2 id=\"But-what-about-things-that-shouldn’t-be-loaded-more-than-once\"><a href=\"#But-what-about-things-that-shouldn’t-be-loaded-more-than-once\" class=\"headerlink\" title=\"But what about things that shouldn’t be loaded more than once!\"></a>But what about things that <em>shouldn’t</em> be loaded more than once!</h2><p>Ah, right. Maybe it’s making a call which changes something somewhere else. It should <em>only</em> be called once when needed.</p>\n<p>This means our “what” changed. It’s no longer “if not loaded, load data”, it’s now: “if not loaded, <em>and not already loading</em>, load data.” Because our “what” changed, our semantic code should change too.</p>\n<p>We could simply add an <code>isLoading</code> state, but then we could have something confusing happen like <code>isLoading</code> and <code>isLoaded</code> both true! Since these state should be <em>exclusive</em>, that means they are also <em>related</em>. And more than related, they are actually the <em>same</em> state field (the data status), just different values.</p>\n<p>So now we change our state code to reflect our new “what”:<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> [dataStatus, setDataStatus] = useState(<span class=\"string\">'empty'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> [data, setData] = useState(<span class=\"literal\">null</span>);</div><div class=\"line\"></div><div class=\"line\">useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (dataStatus === <span class=\"string\">'empty'</span>) &#123;</div><div class=\"line\">    loadData().then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</div><div class=\"line\">      setData(data);</div><div class=\"line\">      setDataStatus(<span class=\"string\">'available'</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    setDataStatus(<span class=\"string\">'loading'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>Now we have code which <em>only</em> calls <code>loadData()</code> when we need it and it isn’t already loading, AND it doesn’t use the dependency argument of <code>useEffect</code>.</p>\n<p>Additionally, the different parts of our state are all explicitly included here.</p>\n<h2 id=\"Tell-me-what-to-do\"><a href=\"#Tell-me-what-to-do\" class=\"headerlink\" title=\"Tell me what to do!\"></a>Tell me what to do!</h2><p>So, forget about lifecycles, mounting, updates, and generally “when” thing happen. Just completely put it out of your head.</p>\n<p>Think about <em>what</em> you need to do, and <em>what</em> the states are that should cause those things to happen.</p>\n<p>Model those states explicitly in your code, and model the effects run based on those states.</p>\n<p>Your code should <em>always</em> work without using the second argument to <code>useEffect</code>. If you <em>need</em>, the second argument, you are probably incorrectly coding your functionality.</p>\n"},{"title":"React is a Leaky Abstraction (and that's ok)","date":"2020-03-30T17:38:42.000Z","_content":"## What React Abstracts\n\nReact is a view rendering and state framework, designed to abstract over the idea of making your view a function of your state. For web, that means it abstracts over the DOM. What this means is that React gives you tools to work with the view as a higher-level idea and through a higher-level API than the browser's built-in interfaces for creating, updating, and deleting elements.\n\n> React Native takes the same high-level abstraction and applies it to native mobile view primitives. The ability to do this is a key feature of a high-level abstraction. I'm going to talk about React in the context of DOM for this article though.\n\nAbstracting the DOM makes writing a view much easier. Instead of calling `document.createElement()` for each node, manually mutating each property, setting event listeners, holding all the element references, updating properties, deleting elements, removing event listeners, and so on and so forth; with React you describe exactly the final result of what you want the view markup to be, and React does all the work to make the DOM conform to that request.\n\n## How it leaks\n\nThat last little nugget of how it works is an important point! You describe the *markup* of the view you want. But you are still describing the view as \"html\" (JSX), which translates to DOM. So React *isn't* hiding the DOM from you entirely, you still see it, describe it, and can get access to elements directly with a ref. Not only that, but the properties you pass are the actual DOM properties React will set the elements to (with some transformations applied to some properties, such as styles and event listeners).\n\nThis makes React a \"leaky\" abstraction. It doesn't completely remove the idea of the DOM from your code, and the DOM rules still influence how you have to write your code. This becomes immediately clear when you do compare React for DOM to React Native. In React DOM you describe html markup in render functions, but in React Native you use \"View\" representations that map to ideas in Android and iOS.\n\n## Why that's ok\n\nSo React isn't a perfect abstraction of the view. This is ok! Even though it leaks, React still provides a much more powerful interface for creating views than the DOM primitive methods, and *parts* of using React *are* fully abstracted. You never need to directly create, add, move, or remove DOM elements when using React (with only a very few small exceptions which can be easily isolated, like using third party libraries which themselves manipulate the DOM directly).\n\nOther parts of React will commonly require some knowledge of DOM, html, and how they work. A really good example of this is styles. You still have to work with css while using React DOM for styles. React doesn't provide any styling considerations beside the (transformed) `style` property and className property. To style elements in React, you must work with css (through the DOM).\n\n## How does this information help me?\n\nUnderstanding your tools better helps you use them more effectively. Knowing how React is a leaky abstraction allows you to better make decisions about using other abstractions with it, when to rely on the framework, and when you can safely work around the framework with standard DOM tools.\n\nFor example, using React without any extra styling tools means either passing style props with css properties, or passing className props. But because you know React doesn't abstract around styles at all means you can easily use style abstraction tools that aren't specifically designed for React, such as `emotion`'s `css` template function which returns a class name string (which can be directly passed), but that you can also use style abstractions which are built around React as well, leveraging the React component abstraction, such as styled-components's `styled.*` template functions.\n\n## How will this change?\n\nThe status of building views on the web right now requires knowledge of html and css, and generally DOM. It's possible in the future we might see a perfect abstraction of building views, which can then be completely portable to other view systems. There are attempts to do this now, with tools like React Native Web, which attempts to turn the React Native primitives into a general abstraction over both Native views and DOM views. But for at least a while longer, you will still need to work with the leaks.","source":"_drafts/2020-03-30-react-is-a-leaky-abstration.md","raw":"---\ntitle: React is a Leaky Abstraction (and that's ok)\ndate: 2020-03-30 13:38:42\ntags:\n  - React\n---\n## What React Abstracts\n\nReact is a view rendering and state framework, designed to abstract over the idea of making your view a function of your state. For web, that means it abstracts over the DOM. What this means is that React gives you tools to work with the view as a higher-level idea and through a higher-level API than the browser's built-in interfaces for creating, updating, and deleting elements.\n\n> React Native takes the same high-level abstraction and applies it to native mobile view primitives. The ability to do this is a key feature of a high-level abstraction. I'm going to talk about React in the context of DOM for this article though.\n\nAbstracting the DOM makes writing a view much easier. Instead of calling `document.createElement()` for each node, manually mutating each property, setting event listeners, holding all the element references, updating properties, deleting elements, removing event listeners, and so on and so forth; with React you describe exactly the final result of what you want the view markup to be, and React does all the work to make the DOM conform to that request.\n\n## How it leaks\n\nThat last little nugget of how it works is an important point! You describe the *markup* of the view you want. But you are still describing the view as \"html\" (JSX), which translates to DOM. So React *isn't* hiding the DOM from you entirely, you still see it, describe it, and can get access to elements directly with a ref. Not only that, but the properties you pass are the actual DOM properties React will set the elements to (with some transformations applied to some properties, such as styles and event listeners).\n\nThis makes React a \"leaky\" abstraction. It doesn't completely remove the idea of the DOM from your code, and the DOM rules still influence how you have to write your code. This becomes immediately clear when you do compare React for DOM to React Native. In React DOM you describe html markup in render functions, but in React Native you use \"View\" representations that map to ideas in Android and iOS.\n\n## Why that's ok\n\nSo React isn't a perfect abstraction of the view. This is ok! Even though it leaks, React still provides a much more powerful interface for creating views than the DOM primitive methods, and *parts* of using React *are* fully abstracted. You never need to directly create, add, move, or remove DOM elements when using React (with only a very few small exceptions which can be easily isolated, like using third party libraries which themselves manipulate the DOM directly).\n\nOther parts of React will commonly require some knowledge of DOM, html, and how they work. A really good example of this is styles. You still have to work with css while using React DOM for styles. React doesn't provide any styling considerations beside the (transformed) `style` property and className property. To style elements in React, you must work with css (through the DOM).\n\n## How does this information help me?\n\nUnderstanding your tools better helps you use them more effectively. Knowing how React is a leaky abstraction allows you to better make decisions about using other abstractions with it, when to rely on the framework, and when you can safely work around the framework with standard DOM tools.\n\nFor example, using React without any extra styling tools means either passing style props with css properties, or passing className props. But because you know React doesn't abstract around styles at all means you can easily use style abstraction tools that aren't specifically designed for React, such as `emotion`'s `css` template function which returns a class name string (which can be directly passed), but that you can also use style abstractions which are built around React as well, leveraging the React component abstraction, such as styled-components's `styled.*` template functions.\n\n## How will this change?\n\nThe status of building views on the web right now requires knowledge of html and css, and generally DOM. It's possible in the future we might see a perfect abstraction of building views, which can then be completely portable to other view systems. There are attempts to do this now, with tools like React Native Web, which attempts to turn the React Native primitives into a general abstraction over both Native views and DOM views. But for at least a while longer, you will still need to work with the leaks.","slug":"react-is-a-leaky-abstration","published":0,"updated":"2020-12-20T20:35:16.792Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckixlasy10000w8u30bkuhraa","content":"<h2 id=\"What-React-Abstracts\"><a href=\"#What-React-Abstracts\" class=\"headerlink\" title=\"What React Abstracts\"></a>What React Abstracts</h2><p>React is a view rendering and state framework, designed to abstract over the idea of making your view a function of your state. For web, that means it abstracts over the DOM. What this means is that React gives you tools to work with the view as a higher-level idea and through a higher-level API than the browser’s built-in interfaces for creating, updating, and deleting elements.</p>\n<blockquote>\n<p>React Native takes the same high-level abstraction and applies it to native mobile view primitives. The ability to do this is a key feature of a high-level abstraction. I’m going to talk about React in the context of DOM for this article though.</p>\n</blockquote>\n<p>Abstracting the DOM makes writing a view much easier. Instead of calling <code>document.createElement()</code> for each node, manually mutating each property, setting event listeners, holding all the element references, updating properties, deleting elements, removing event listeners, and so on and so forth; with React you describe exactly the final result of what you want the view markup to be, and React does all the work to make the DOM conform to that request.</p>\n<h2 id=\"How-it-leaks\"><a href=\"#How-it-leaks\" class=\"headerlink\" title=\"How it leaks\"></a>How it leaks</h2><p>That last little nugget of how it works is an important point! You describe the <em>markup</em> of the view you want. But you are still describing the view as “html” (JSX), which translates to DOM. So React <em>isn’t</em> hiding the DOM from you entirely, you still see it, describe it, and can get access to elements directly with a ref. Not only that, but the properties you pass are the actual DOM properties React will set the elements to (with some transformations applied to some properties, such as styles and event listeners).</p>\n<p>This makes React a “leaky” abstraction. It doesn’t completely remove the idea of the DOM from your code, and the DOM rules still influence how you have to write your code. This becomes immediately clear when you do compare React for DOM to React Native. In React DOM you describe html markup in render functions, but in React Native you use “View” representations that map to ideas in Android and iOS.</p>\n<h2 id=\"Why-that’s-ok\"><a href=\"#Why-that’s-ok\" class=\"headerlink\" title=\"Why that’s ok\"></a>Why that’s ok</h2><p>So React isn’t a perfect abstraction of the view. This is ok! Even though it leaks, React still provides a much more powerful interface for creating views than the DOM primitive methods, and <em>parts</em> of using React <em>are</em> fully abstracted. You never need to directly create, add, move, or remove DOM elements when using React (with only a very few small exceptions which can be easily isolated, like using third party libraries which themselves manipulate the DOM directly).</p>\n<p>Other parts of React will commonly require some knowledge of DOM, html, and how they work. A really good example of this is styles. You still have to work with css while using React DOM for styles. React doesn’t provide any styling considerations beside the (transformed) <code>style</code> property and className property. To style elements in React, you must work with css (through the DOM).</p>\n<h2 id=\"How-does-this-information-help-me\"><a href=\"#How-does-this-information-help-me\" class=\"headerlink\" title=\"How does this information help me?\"></a>How does this information help me?</h2><p>Understanding your tools better helps you use them more effectively. Knowing how React is a leaky abstraction allows you to better make decisions about using other abstractions with it, when to rely on the framework, and when you can safely work around the framework with standard DOM tools.</p>\n<p>For example, using React without any extra styling tools means either passing style props with css properties, or passing className props. But because you know React doesn’t abstract around styles at all means you can easily use style abstraction tools that aren’t specifically designed for React, such as <code>emotion</code>‘s <code>css</code> template function which returns a class name string (which can be directly passed), but that you can also use style abstractions which are built around React as well, leveraging the React component abstraction, such as styled-components’s <code>styled.*</code> template functions.</p>\n<h2 id=\"How-will-this-change\"><a href=\"#How-will-this-change\" class=\"headerlink\" title=\"How will this change?\"></a>How will this change?</h2><p>The status of building views on the web right now requires knowledge of html and css, and generally DOM. It’s possible in the future we might see a perfect abstraction of building views, which can then be completely portable to other view systems. There are attempts to do this now, with tools like React Native Web, which attempts to turn the React Native primitives into a general abstraction over both Native views and DOM views. But for at least a while longer, you will still need to work with the leaks.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"What-React-Abstracts\"><a href=\"#What-React-Abstracts\" class=\"headerlink\" title=\"What React Abstracts\"></a>What React Abstracts</h2><p>React is a view rendering and state framework, designed to abstract over the idea of making your view a function of your state. For web, that means it abstracts over the DOM. What this means is that React gives you tools to work with the view as a higher-level idea and through a higher-level API than the browser’s built-in interfaces for creating, updating, and deleting elements.</p>\n<blockquote>\n<p>React Native takes the same high-level abstraction and applies it to native mobile view primitives. The ability to do this is a key feature of a high-level abstraction. I’m going to talk about React in the context of DOM for this article though.</p>\n</blockquote>\n<p>Abstracting the DOM makes writing a view much easier. Instead of calling <code>document.createElement()</code> for each node, manually mutating each property, setting event listeners, holding all the element references, updating properties, deleting elements, removing event listeners, and so on and so forth; with React you describe exactly the final result of what you want the view markup to be, and React does all the work to make the DOM conform to that request.</p>\n<h2 id=\"How-it-leaks\"><a href=\"#How-it-leaks\" class=\"headerlink\" title=\"How it leaks\"></a>How it leaks</h2><p>That last little nugget of how it works is an important point! You describe the <em>markup</em> of the view you want. But you are still describing the view as “html” (JSX), which translates to DOM. So React <em>isn’t</em> hiding the DOM from you entirely, you still see it, describe it, and can get access to elements directly with a ref. Not only that, but the properties you pass are the actual DOM properties React will set the elements to (with some transformations applied to some properties, such as styles and event listeners).</p>\n<p>This makes React a “leaky” abstraction. It doesn’t completely remove the idea of the DOM from your code, and the DOM rules still influence how you have to write your code. This becomes immediately clear when you do compare React for DOM to React Native. In React DOM you describe html markup in render functions, but in React Native you use “View” representations that map to ideas in Android and iOS.</p>\n<h2 id=\"Why-that’s-ok\"><a href=\"#Why-that’s-ok\" class=\"headerlink\" title=\"Why that’s ok\"></a>Why that’s ok</h2><p>So React isn’t a perfect abstraction of the view. This is ok! Even though it leaks, React still provides a much more powerful interface for creating views than the DOM primitive methods, and <em>parts</em> of using React <em>are</em> fully abstracted. You never need to directly create, add, move, or remove DOM elements when using React (with only a very few small exceptions which can be easily isolated, like using third party libraries which themselves manipulate the DOM directly).</p>\n<p>Other parts of React will commonly require some knowledge of DOM, html, and how they work. A really good example of this is styles. You still have to work with css while using React DOM for styles. React doesn’t provide any styling considerations beside the (transformed) <code>style</code> property and className property. To style elements in React, you must work with css (through the DOM).</p>\n<h2 id=\"How-does-this-information-help-me\"><a href=\"#How-does-this-information-help-me\" class=\"headerlink\" title=\"How does this information help me?\"></a>How does this information help me?</h2><p>Understanding your tools better helps you use them more effectively. Knowing how React is a leaky abstraction allows you to better make decisions about using other abstractions with it, when to rely on the framework, and when you can safely work around the framework with standard DOM tools.</p>\n<p>For example, using React without any extra styling tools means either passing style props with css properties, or passing className props. But because you know React doesn’t abstract around styles at all means you can easily use style abstraction tools that aren’t specifically designed for React, such as <code>emotion</code>‘s <code>css</code> template function which returns a class name string (which can be directly passed), but that you can also use style abstractions which are built around React as well, leveraging the React component abstraction, such as styled-components’s <code>styled.*</code> template functions.</p>\n<h2 id=\"How-will-this-change\"><a href=\"#How-will-this-change\" class=\"headerlink\" title=\"How will this change?\"></a>How will this change?</h2><p>The status of building views on the web right now requires knowledge of html and css, and generally DOM. It’s possible in the future we might see a perfect abstraction of building views, which can then be completely portable to other view systems. There are attempts to do this now, with tools like React Native Web, which attempts to turn the React Native primitives into a general abstraction over both Native views and DOM views. But for at least a while longer, you will still need to work with the leaks.</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ckixl4zvr0000jku3e17mfgre","tag_id":"ckixl4zvv0003jku3oqcl4bet","_id":"ckixl4zw5000ojku3724vjfy3"},{"post_id":"ckixl4zvr0000jku3e17mfgre","tag_id":"ckixl4zvx0007jku3dhtma2xj","_id":"ckixl4zw5000pjku33ipr6h54"},{"post_id":"ckixl4zvr0000jku3e17mfgre","tag_id":"ckixl4zvz000ajku3nhuanwx0","_id":"ckixl4zw5000rjku3fkzdqcft"},{"post_id":"ckixl4zvr0000jku3e17mfgre","tag_id":"ckixl4zw0000djku35dicmp8o","_id":"ckixl4zw5000sjku3e12mzxyh"},{"post_id":"ckixl4zvr0000jku3e17mfgre","tag_id":"ckixl4zw1000gjku3i5m73rju","_id":"ckixl4zw6000ujku3ox7xjmty"},{"post_id":"ckixl4zvr0000jku3e17mfgre","tag_id":"ckixl4zw3000kjku3xpg37l8l","_id":"ckixl4zw6000vjku3jei5ua2u"},{"post_id":"ckixl4zvu0002jku3e4lbc7eu","tag_id":"ckixl4zw4000njku3mwwqg3cl","_id":"ckixl4zw7000yjku3hl8m4mp0"},{"post_id":"ckixl4zvu0002jku3e4lbc7eu","tag_id":"ckixl4zw5000qjku3ng601xes","_id":"ckixl4zw7000zjku3f2t2pb3p"},{"post_id":"ckixl4zvu0002jku3e4lbc7eu","tag_id":"ckixl4zw6000tjku32iwdlwib","_id":"ckixl4zw70011jku30sctmm9f"},{"post_id":"ckixl4zvu0002jku3e4lbc7eu","tag_id":"ckixl4zw6000wjku3r3hw8f6t","_id":"ckixl4zw70012jku39tcb7f1r"},{"post_id":"ckixl4zvw0005jku3w68s38k7","tag_id":"ckixl4zw4000njku3mwwqg3cl","_id":"ckixl4zw80015jku39vrskyiq"},{"post_id":"ckixl4zvw0005jku3w68s38k7","tag_id":"ckixl4zw70010jku35wzhui6q","_id":"ckixl4zw80016jku3alweva2z"},{"post_id":"ckixl4zvw0005jku3w68s38k7","tag_id":"ckixl4zvv0003jku3oqcl4bet","_id":"ckixl4zw80018jku3kp8m2wl3"},{"post_id":"ckixl4zvw0005jku3w68s38k7","tag_id":"ckixl4zw6000wjku3r3hw8f6t","_id":"ckixl4zw80019jku3yi7anyq1"},{"post_id":"ckixl4zvx0006jku39shksd9g","tag_id":"ckixl4zvv0003jku3oqcl4bet","_id":"ckixl4zw9001djku3nchz3ikc"},{"post_id":"ckixl4zvx0006jku39shksd9g","tag_id":"ckixl4zvx0007jku3dhtma2xj","_id":"ckixl4zw9001ejku3v6q50cn3"},{"post_id":"ckixl4zvx0006jku39shksd9g","tag_id":"ckixl4zvz000ajku3nhuanwx0","_id":"ckixl4zw9001gjku3z67km6zp"},{"post_id":"ckixl4zvx0006jku39shksd9g","tag_id":"ckixl4zw8001ajku3cbojedxs","_id":"ckixl4zw9001hjku3t0ehwwca"},{"post_id":"ckixl4zvx0006jku39shksd9g","tag_id":"ckixl4zw8001bjku3woam0tiy","_id":"ckixl4zwa001jjku3jzblo319"},{"post_id":"ckixl4zvx0008jku33um6qiia","tag_id":"ckixl4zw4000njku3mwwqg3cl","_id":"ckixl4zwa001ljku3fw2elx6b"},{"post_id":"ckixl4zvx0008jku33um6qiia","tag_id":"ckixl4zw70010jku35wzhui6q","_id":"ckixl4zwa001mjku3uqi0nvyp"},{"post_id":"ckixl4zvx0008jku33um6qiia","tag_id":"ckixl4zvv0003jku3oqcl4bet","_id":"ckixl4zwa001ojku3gabvozc0"},{"post_id":"ckixl4zvx0008jku33um6qiia","tag_id":"ckixl4zw6000wjku3r3hw8f6t","_id":"ckixl4zwb001pjku3vfwmxt5d"},{"post_id":"ckixl4zvy0009jku3q40jj1ek","tag_id":"ckixl4zw4000njku3mwwqg3cl","_id":"ckixl4zwb001sjku3nx6clsdt"},{"post_id":"ckixl4zvy0009jku3q40jj1ek","tag_id":"ckixl4zw70010jku35wzhui6q","_id":"ckixl4zwb001tjku3j0b07s2i"},{"post_id":"ckixl4zvy0009jku3q40jj1ek","tag_id":"ckixl4zvv0003jku3oqcl4bet","_id":"ckixl4zwc001vjku3wk30oawa"},{"post_id":"ckixl4zvy0009jku3q40jj1ek","tag_id":"ckixl4zw6000wjku3r3hw8f6t","_id":"ckixl4zwc001wjku38dnzdh0r"},{"post_id":"ckixl4zvz000bjku32ar0th46","tag_id":"ckixl4zw4000njku3mwwqg3cl","_id":"ckixl4zwc001zjku35cqat3ei"},{"post_id":"ckixl4zvz000bjku32ar0th46","tag_id":"ckixl4zw70010jku35wzhui6q","_id":"ckixl4zwc0020jku3pc9q0t6c"},{"post_id":"ckixl4zvz000bjku32ar0th46","tag_id":"ckixl4zvv0003jku3oqcl4bet","_id":"ckixl4zwd0022jku3v46my1p0"},{"post_id":"ckixl4zvz000bjku32ar0th46","tag_id":"ckixl4zw6000wjku3r3hw8f6t","_id":"ckixl4zwd0023jku3kefi570d"},{"post_id":"ckixl4zvz000cjku398kve0cd","tag_id":"ckixl4zwc001yjku38nawftcv","_id":"ckixl4zwd0027jku3cs9vm5ug"},{"post_id":"ckixl4zvz000cjku398kve0cd","tag_id":"ckixl4zw4000njku3mwwqg3cl","_id":"ckixl4zwe0028jku32r04auu6"},{"post_id":"ckixl4zvz000cjku398kve0cd","tag_id":"ckixl4zwd0024jku3k5vyehhq","_id":"ckixl4zwe002ajku34ud926lu"},{"post_id":"ckixl4zvz000cjku398kve0cd","tag_id":"ckixl4zwd0025jku3u0s6ph95","_id":"ckixl4zwe002bjku3fphl6xi5"},{"post_id":"ckixl4zw0000ejku33ekv4rjc","tag_id":"ckixl4zw4000njku3mwwqg3cl","_id":"ckixl4zwf002fjku3aa4vsz3l"},{"post_id":"ckixl4zw0000ejku33ekv4rjc","tag_id":"ckixl4zw5000qjku3ng601xes","_id":"ckixl4zwf002gjku3fo3bbcwu"},{"post_id":"ckixl4zw0000ejku33ekv4rjc","tag_id":"ckixl4zw6000tjku32iwdlwib","_id":"ckixl4zwf002ijku3as8rxbu4"},{"post_id":"ckixl4zw0000ejku33ekv4rjc","tag_id":"ckixl4zw6000wjku3r3hw8f6t","_id":"ckixl4zwf002jjku3dw4lj8jb"},{"post_id":"ckixl4zw1000fjku3do7efm9p","tag_id":"ckixl4zwf002ejku3t1o97pd4","_id":"ckixl4zwg002mjku3g1gd3e0h"},{"post_id":"ckixl4zw1000fjku3do7efm9p","tag_id":"ckixl4zwf002hjku377e014tc","_id":"ckixl4zwg002njku3mi0bwg56"},{"post_id":"ckixl4zw1000fjku3do7efm9p","tag_id":"ckixl4zwf002kjku3mpghtrsl","_id":"ckixl4zwg002pjku3m4pu8v5f"},{"post_id":"ckixl4zw1000hjku3l7kj27pe","tag_id":"ckixl4zw6000wjku3r3hw8f6t","_id":"ckixl4zwh002rjku3xjpfhx59"},{"post_id":"ckixl4zw1000hjku3l7kj27pe","tag_id":"ckixl4zwg002ojku393zv9ofc","_id":"ckixl4zwh002sjku362m7m0ga"},{"post_id":"ckixl4zw2000ijku35o0ppouc","tag_id":"ckixl4zw4000njku3mwwqg3cl","_id":"ckixl4zwi002wjku36avz26vj"},{"post_id":"ckixl4zw2000ijku35o0ppouc","tag_id":"ckixl4zw70010jku35wzhui6q","_id":"ckixl4zwi002xjku3019xqr6f"},{"post_id":"ckixl4zw2000ijku35o0ppouc","tag_id":"ckixl4zvv0003jku3oqcl4bet","_id":"ckixl4zwj002zjku302fygikf"},{"post_id":"ckixl4zw2000ijku35o0ppouc","tag_id":"ckixl4zw6000wjku3r3hw8f6t","_id":"ckixl4zwj0030jku3dwid3lby"},{"post_id":"ckixl4zw2000jjku3j9abcyap","tag_id":"ckixl4zw4000njku3mwwqg3cl","_id":"ckixl4zwj0033jku3jheiiou4"},{"post_id":"ckixl4zw2000jjku3j9abcyap","tag_id":"ckixl4zwi002yjku3fpo3cfao","_id":"ckixl4zwj0034jku3vkbz5qrz"},{"post_id":"ckixl4zw2000jjku3j9abcyap","tag_id":"ckixl4zwj0031jku3jea148s4","_id":"ckixl4zwk0036jku37ws8ieu7"},{"post_id":"ckixl4zw3000ljku3celreiul","tag_id":"ckixl4zw4000njku3mwwqg3cl","_id":"ckixl4zwk0039jku3t49nwxs1"},{"post_id":"ckixl4zw3000ljku3celreiul","tag_id":"ckixl4zwj0035jku3njg3dvle","_id":"ckixl4zwk003ajku3fsk769jw"},{"post_id":"ckixl4zw3000ljku3celreiul","tag_id":"ckixl4zwk0037jku3toqb6mtu","_id":"ckixl4zwk003bjku3cyabtfkk"},{"post_id":"ckixlasy10000w8u30bkuhraa","tag_id":"ckixl4zw4000njku3mwwqg3cl","_id":"ckixlasy60001w8u3eg124te6"}],"Tag":[{"name":"developer experience","_id":"ckixl4zvv0003jku3oqcl4bet"},{"name":"deployment","_id":"ckixl4zvx0007jku3dhtma2xj"},{"name":"node","_id":"ckixl4zvz000ajku3nhuanwx0"},{"name":"Caddy","_id":"ckixl4zw0000djku35dicmp8o"},{"name":"Node.js","_id":"ckixl4zw1000gjku3i5m73rju"},{"name":"PHP","_id":"ckixl4zw3000kjku3xpg37l8l"},{"name":"React","_id":"ckixl4zw4000njku3mwwqg3cl"},{"name":"state","_id":"ckixl4zw5000qjku3ng601xes"},{"name":"patterns","_id":"ckixl4zw6000tjku32iwdlwib"},{"name":"js","_id":"ckixl4zw6000wjku3r3hw8f6t"},{"name":"Webpack","_id":"ckixl4zw70010jku35wzhui6q"},{"name":"hexo","_id":"ckixl4zw8001ajku3cbojedxs"},{"name":"ghost","_id":"ckixl4zw8001bjku3woam0tiy"},{"name":"webpack","_id":"ckixl4zwc001yjku38nawftcv"},{"name":"css","_id":"ckixl4zwd0024jku3k5vyehhq"},{"name":"css-loader","_id":"ckixl4zwd0025jku3u0s6ph95"},{"name":"arduino","_id":"ckixl4zwf002ejku3t1o97pd4"},{"name":"cos-play","_id":"ckixl4zwf002hjku377e014tc"},{"name":"sound","_id":"ckixl4zwf002kjku3mpghtrsl"},{"name":"Web API","_id":"ckixl4zwg002ojku393zv9ofc"},{"name":"seo","_id":"ckixl4zwi002yjku3fpo3cfao"},{"name":"ssr","_id":"ckixl4zwj0031jku3jea148s4"},{"name":"hooks","_id":"ckixl4zwj0035jku3njg3dvle"},{"name":"lifecycles","_id":"ckixl4zwk0037jku3toqb6mtu"}]}}